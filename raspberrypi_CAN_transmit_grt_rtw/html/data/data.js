var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"raspberrypi_CAN_transmit","ref":false,"files":[{"name":"raspberrypi_CAN_transmit.c","type":"source","group":"model","path":"C:\\Users\\yoshi\\hydroplane.us\\Hydroplane Team - Documents\\Engineering\\Demonstration System\\Command, Control, and Comm\\IO Hardware Manuals\\raspberrypi_CAN_transmit_grt_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * raspberrypi_CAN_transmit.c\r\n *\r\n * Code generation for model \"raspberrypi_CAN_transmit\".\r\n *\r\n * Model version              : 7.6\r\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\r\n * C source code generated on : Wed Jul 26 11:17:43 2023\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objective: Debugging\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"raspberrypi_CAN_transmit.h\"\r\n#include \"raspberrypi_CAN_transmit_types.h\"\r\n#include \"rtwtypes.h\"\r\n#include <string.h>\r\n#include \"raspberrypi_CAN_transmit_private.h\"\r\n#include \"rt_nonfinite.h\"\r\n\r\n/* Block signals (default storage) */\r\nB_raspberrypi_CAN_transmit_T raspberrypi_CAN_transmit_B;\r\n\r\n/* Block states (default storage) */\r\nDW_raspberrypi_CAN_transmit_T raspberrypi_CAN_transmit_DW;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL_raspberrypi_CAN_tran_T raspberrypi_CAN_transmit_M_;\r\nRT_MODEL_raspberrypi_CAN_tran_T *const raspberrypi_CAN_transmit_M =\r\n  &raspberrypi_CAN_transmit_M_;\r\n\r\n/* Forward declaration for local functions */\r\nstatic void raspberrypi_CA_SystemCore_setup(codertarget_raspi_internal__f_T *obj);\r\nstatic void raspberrypi_SystemCore_setup_f0(codertarget_raspi_internal_CA_T *obj);\r\nstatic void raspberry_SystemCore_setup_f0kl(codertarget_raspi_internal_f0_T *obj);\r\nstatic void raspberrypi_CA_SystemCore_setup(codertarget_raspi_internal__f_T *obj)\r\n{\r\n  codertarget_raspi_internal__f_T *obj_0;\r\n  int32_T isCANSetup;\r\n  int32_T stat;\r\n  char_T canInterface[5];\r\n  static const char_T tmp[19] = { ' ', 'i', 's', ' ', 'n', 'o', 't', ' ', 'u',\r\n    'p', '.', ' ', 'S', 'e', 't', ' ', 'u', 'p', ' ' };\r\n\r\n  static const char_T tmp_0[14] = { ' ', 'i', 's', ' ', 'n', 'o', 't', ' ', 's',\r\n    'e', 't', ' ', 'u', 'p' };\r\n\r\n  static const char_T tmp_1[46] = { ' ', 'd', 'o', 'e', 's', ' ', 'n', 'o', 't',\r\n    ' ', 'e', 'x', 'i', 's', 't', '.', ' ', 'S', 'e', 'l', 'e', 'c', 't', ' ',\r\n    'a', ' ', 'v', 'a', 'l', 'i', 'd', ' ', 'C', 'A', 'N', ' ', 'i', 'n', 't',\r\n    'e', 'r', 'f', 'a', 'c', 'e', '.' };\r\n\r\n  static const char_T tmp_2[34] = { ' ', 'b', 'e', 'f', 'o', 'r', 'e', ' ', 'l',\r\n    'a', 'u', 'n', 'c', 'h', 'i', 'n', 'g', ' ', 't', 'h', 'e', ' ', 'a', 'p',\r\n    'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', '.' };\r\n\r\n  obj->isSetupComplete = false;\r\n  obj->isInitialized = 1;\r\n  obj_0 = obj;\r\n  canInterface[0] = 'c';\r\n  canInterface[1] = 'a';\r\n  canInterface[2] = 'n';\r\n  canInterface[3] = '0';\r\n  canInterface[4] = '\\x00';\r\n  stat = -1;\r\n  isCANSetup = MW_checkIFStatus(&canInterface[0]);\r\n  if (isCANSetup == 0) {\r\n    MW_createSocket(&canInterface[0], &obj_0->sockHandleDataFrames);\r\n    stat = MW_createSocket(&canInterface[0], &obj_0->sockHandleErrorFrames);\r\n  } else if (isCANSetup == 1) {\r\n    raspberrypi_CAN_transmit_B.errString1_c[0] = 'c';\r\n    raspberrypi_CAN_transmit_B.errString1_c[1] = 'a';\r\n    raspberrypi_CAN_transmit_B.errString1_c[2] = 'n';\r\n    raspberrypi_CAN_transmit_B.errString1_c[3] = '0';\r\n    for (isCANSetup = 0; isCANSetup < 19; isCANSetup++) {\r\n      raspberrypi_CAN_transmit_B.errString1_c[isCANSetup + 4] = tmp[isCANSetup];\r\n    }\r\n\r\n    raspberrypi_CAN_transmit_B.errString1_c[23] = 'c';\r\n    raspberrypi_CAN_transmit_B.errString1_c[24] = 'a';\r\n    raspberrypi_CAN_transmit_B.errString1_c[25] = 'n';\r\n    raspberrypi_CAN_transmit_B.errString1_c[26] = '0';\r\n    for (isCANSetup = 0; isCANSetup < 34; isCANSetup++) {\r\n      raspberrypi_CAN_transmit_B.errString1_c[isCANSetup + 27] =\r\n        tmp_2[isCANSetup];\r\n    }\r\n\r\n    raspberrypi_CAN_transmit_B.errString1_c[61] = '\\n';\r\n    raspberrypi_CAN_transmit_B.errString1_c[62] = '\\x00';\r\n    MW_printError(&raspberrypi_CAN_transmit_B.errString1_c[0]);\r\n  } else if (isCANSetup == 2) {\r\n    raspberrypi_CAN_transmit_B.errString2_p[0] = 'c';\r\n    raspberrypi_CAN_transmit_B.errString2_p[1] = 'a';\r\n    raspberrypi_CAN_transmit_B.errString2_p[2] = 'n';\r\n    raspberrypi_CAN_transmit_B.errString2_p[3] = '0';\r\n    for (isCANSetup = 0; isCANSetup < 46; isCANSetup++) {\r\n      raspberrypi_CAN_transmit_B.errString2_p[isCANSetup + 4] = tmp_1[isCANSetup];\r\n    }\r\n\r\n    raspberrypi_CAN_transmit_B.errString2_p[50] = '\\n';\r\n    raspberrypi_CAN_transmit_B.errString2_p[51] = '\\x00';\r\n    MW_printError(&raspberrypi_CAN_transmit_B.errString2_p[0]);\r\n  } else {\r\n    raspberrypi_CAN_transmit_B.errString3_g1[0] = 'c';\r\n    raspberrypi_CAN_transmit_B.errString3_g1[1] = 'a';\r\n    raspberrypi_CAN_transmit_B.errString3_g1[2] = 'n';\r\n    raspberrypi_CAN_transmit_B.errString3_g1[3] = '0';\r\n    for (isCANSetup = 0; isCANSetup < 14; isCANSetup++) {\r\n      raspberrypi_CAN_transmit_B.errString3_g1[isCANSetup + 4] =\r\n        tmp_0[isCANSetup];\r\n    }\r\n\r\n    raspberrypi_CAN_transmit_B.errString3_g1[18] = '\\n';\r\n    raspberrypi_CAN_transmit_B.errString3_g1[19] = '\\x00';\r\n    MW_printError(&raspberrypi_CAN_transmit_B.errString3_g1[0]);\r\n  }\r\n\r\n  obj_0->Initialized = (stat == 0);\r\n  obj->isSetupComplete = true;\r\n}\r\n\r\nstatic void raspberrypi_SystemCore_setup_f0(codertarget_raspi_internal_CA_T *obj)\r\n{\r\n  codertarget_raspi_internal_CA_T *obj_0;\r\n  int32_T isCANSetup;\r\n  int32_T stat1;\r\n  int32_T stat2;\r\n  char_T canInterface[5];\r\n  static const char_T tmp[19] = { ' ', 'i', 's', ' ', 'n', 'o', 't', ' ', 'u',\r\n    'p', '.', ' ', 'S', 'e', 't', ' ', 'u', 'p', ' ' };\r\n\r\n  static const char_T tmp_0[14] = { ' ', 'i', 's', ' ', 'n', 'o', 't', ' ', 's',\r\n    'e', 't', ' ', 'u', 'p' };\r\n\r\n  static const char_T tmp_1[46] = { ' ', 'd', 'o', 'e', 's', ' ', 'n', 'o', 't',\r\n    ' ', 'e', 'x', 'i', 's', 't', '.', ' ', 'S', 'e', 'l', 'e', 'c', 't', ' ',\r\n    'a', ' ', 'v', 'a', 'l', 'i', 'd', ' ', 'C', 'A', 'N', ' ', 'i', 'n', 't',\r\n    'e', 'r', 'f', 'a', 'c', 'e', '.' };\r\n\r\n  static const char_T tmp_2[34] = { ' ', 'b', 'e', 'f', 'o', 'r', 'e', ' ', 'l',\r\n    'a', 'u', 'n', 'c', 'h', 'i', 'n', 'g', ' ', 't', 'h', 'e', ' ', 'a', 'p',\r\n    'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', '.' };\r\n\r\n  obj->isSetupComplete = false;\r\n  obj->isInitialized = 1;\r\n  obj_0 = obj;\r\n  canInterface[0] = 'c';\r\n  canInterface[1] = 'a';\r\n  canInterface[2] = 'n';\r\n  canInterface[3] = '0';\r\n  canInterface[4] = '\\x00';\r\n  stat1 = -1;\r\n  stat2 = -1;\r\n  isCANSetup = MW_checkIFStatus(&canInterface[0]);\r\n  if (isCANSetup == 0) {\r\n    stat1 = MW_createSocket(&canInterface[0], &obj_0->sockHandleDataFrames);\r\n    stat2 = MW_createSocket(&canInterface[0], &obj_0->sockHandleErrorFrames);\r\n  } else if (isCANSetup == 1) {\r\n    raspberrypi_CAN_transmit_B.errString1_m[0] = 'c';\r\n    raspberrypi_CAN_transmit_B.errString1_m[1] = 'a';\r\n    raspberrypi_CAN_transmit_B.errString1_m[2] = 'n';\r\n    raspberrypi_CAN_transmit_B.errString1_m[3] = '0';\r\n    for (isCANSetup = 0; isCANSetup < 19; isCANSetup++) {\r\n      raspberrypi_CAN_transmit_B.errString1_m[isCANSetup + 4] = tmp[isCANSetup];\r\n    }\r\n\r\n    raspberrypi_CAN_transmit_B.errString1_m[23] = 'c';\r\n    raspberrypi_CAN_transmit_B.errString1_m[24] = 'a';\r\n    raspberrypi_CAN_transmit_B.errString1_m[25] = 'n';\r\n    raspberrypi_CAN_transmit_B.errString1_m[26] = '0';\r\n    for (isCANSetup = 0; isCANSetup < 34; isCANSetup++) {\r\n      raspberrypi_CAN_transmit_B.errString1_m[isCANSetup + 27] =\r\n        tmp_2[isCANSetup];\r\n    }\r\n\r\n    raspberrypi_CAN_transmit_B.errString1_m[61] = '\\n';\r\n    raspberrypi_CAN_transmit_B.errString1_m[62] = '\\x00';\r\n    MW_printError(&raspberrypi_CAN_transmit_B.errString1_m[0]);\r\n  } else if (isCANSetup == 2) {\r\n    raspberrypi_CAN_transmit_B.errString2_b[0] = 'c';\r\n    raspberrypi_CAN_transmit_B.errString2_b[1] = 'a';\r\n    raspberrypi_CAN_transmit_B.errString2_b[2] = 'n';\r\n    raspberrypi_CAN_transmit_B.errString2_b[3] = '0';\r\n    for (isCANSetup = 0; isCANSetup < 46; isCANSetup++) {\r\n      raspberrypi_CAN_transmit_B.errString2_b[isCANSetup + 4] = tmp_1[isCANSetup];\r\n    }\r\n\r\n    raspberrypi_CAN_transmit_B.errString2_b[50] = '\\n';\r\n    raspberrypi_CAN_transmit_B.errString2_b[51] = '\\x00';\r\n    MW_printError(&raspberrypi_CAN_transmit_B.errString2_b[0]);\r\n  } else {\r\n    raspberrypi_CAN_transmit_B.errString3_g[0] = 'c';\r\n    raspberrypi_CAN_transmit_B.errString3_g[1] = 'a';\r\n    raspberrypi_CAN_transmit_B.errString3_g[2] = 'n';\r\n    raspberrypi_CAN_transmit_B.errString3_g[3] = '0';\r\n    for (isCANSetup = 0; isCANSetup < 14; isCANSetup++) {\r\n      raspberrypi_CAN_transmit_B.errString3_g[isCANSetup + 4] = tmp_0[isCANSetup];\r\n    }\r\n\r\n    raspberrypi_CAN_transmit_B.errString3_g[18] = '\\n';\r\n    raspberrypi_CAN_transmit_B.errString3_g[19] = '\\x00';\r\n    MW_printError(&raspberrypi_CAN_transmit_B.errString3_g[0]);\r\n  }\r\n\r\n  if ((stat1 == 0) && (stat2 == 0)) {\r\n    obj_0->Initialized = true;\r\n  } else {\r\n    obj_0->Initialized = false;\r\n  }\r\n\r\n  obj->isSetupComplete = true;\r\n}\r\n\r\nstatic void raspberry_SystemCore_setup_f0kl(codertarget_raspi_internal_f0_T *obj)\r\n{\r\n  codertarget_raspi_internal_f0_T *obj_0;\r\n  int32_T isCANSetup;\r\n  int32_T stat1;\r\n  int32_T stat2;\r\n  char_T canInterface[5];\r\n  static const char_T tmp[19] = { ' ', 'i', 's', ' ', 'n', 'o', 't', ' ', 'u',\r\n    'p', '.', ' ', 'S', 'e', 't', ' ', 'u', 'p', ' ' };\r\n\r\n  static const char_T tmp_0[14] = { ' ', 'i', 's', ' ', 'n', 'o', 't', ' ', 's',\r\n    'e', 't', ' ', 'u', 'p' };\r\n\r\n  static const char_T tmp_1[46] = { ' ', 'd', 'o', 'e', 's', ' ', 'n', 'o', 't',\r\n    ' ', 'e', 'x', 'i', 's', 't', '.', ' ', 'S', 'e', 'l', 'e', 'c', 't', ' ',\r\n    'a', ' ', 'v', 'a', 'l', 'i', 'd', ' ', 'C', 'A', 'N', ' ', 'i', 'n', 't',\r\n    'e', 'r', 'f', 'a', 'c', 'e', '.' };\r\n\r\n  static const char_T tmp_2[34] = { ' ', 'b', 'e', 'f', 'o', 'r', 'e', ' ', 'l',\r\n    'a', 'u', 'n', 'c', 'h', 'i', 'n', 'g', ' ', 't', 'h', 'e', ' ', 'a', 'p',\r\n    'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', '.' };\r\n\r\n  obj->isSetupComplete = false;\r\n  obj->isInitialized = 1;\r\n  obj_0 = obj;\r\n  canInterface[0] = 'c';\r\n  canInterface[1] = 'a';\r\n  canInterface[2] = 'n';\r\n  canInterface[3] = '0';\r\n  canInterface[4] = '\\x00';\r\n  stat1 = -1;\r\n  stat2 = -1;\r\n  isCANSetup = MW_checkIFStatus(&canInterface[0]);\r\n  if (isCANSetup == 0) {\r\n    stat1 = MW_createSocket(&canInterface[0], &obj_0->sockHandleDataFrames);\r\n    stat2 = MW_createSocket(&canInterface[0], &obj_0->sockHandleErrorFrames);\r\n  } else if (isCANSetup == 1) {\r\n    raspberrypi_CAN_transmit_B.errString1[0] = 'c';\r\n    raspberrypi_CAN_transmit_B.errString1[1] = 'a';\r\n    raspberrypi_CAN_transmit_B.errString1[2] = 'n';\r\n    raspberrypi_CAN_transmit_B.errString1[3] = '0';\r\n    for (isCANSetup = 0; isCANSetup < 19; isCANSetup++) {\r\n      raspberrypi_CAN_transmit_B.errString1[isCANSetup + 4] = tmp[isCANSetup];\r\n    }\r\n\r\n    raspberrypi_CAN_transmit_B.errString1[23] = 'c';\r\n    raspberrypi_CAN_transmit_B.errString1[24] = 'a';\r\n    raspberrypi_CAN_transmit_B.errString1[25] = 'n';\r\n    raspberrypi_CAN_transmit_B.errString1[26] = '0';\r\n    for (isCANSetup = 0; isCANSetup < 34; isCANSetup++) {\r\n      raspberrypi_CAN_transmit_B.errString1[isCANSetup + 27] = tmp_2[isCANSetup];\r\n    }\r\n\r\n    raspberrypi_CAN_transmit_B.errString1[61] = '\\n';\r\n    raspberrypi_CAN_transmit_B.errString1[62] = '\\x00';\r\n    MW_printError(&raspberrypi_CAN_transmit_B.errString1[0]);\r\n  } else if (isCANSetup == 2) {\r\n    raspberrypi_CAN_transmit_B.errString2[0] = 'c';\r\n    raspberrypi_CAN_transmit_B.errString2[1] = 'a';\r\n    raspberrypi_CAN_transmit_B.errString2[2] = 'n';\r\n    raspberrypi_CAN_transmit_B.errString2[3] = '0';\r\n    for (isCANSetup = 0; isCANSetup < 46; isCANSetup++) {\r\n      raspberrypi_CAN_transmit_B.errString2[isCANSetup + 4] = tmp_1[isCANSetup];\r\n    }\r\n\r\n    raspberrypi_CAN_transmit_B.errString2[50] = '\\n';\r\n    raspberrypi_CAN_transmit_B.errString2[51] = '\\x00';\r\n    MW_printError(&raspberrypi_CAN_transmit_B.errString2[0]);\r\n  } else {\r\n    raspberrypi_CAN_transmit_B.errString3[0] = 'c';\r\n    raspberrypi_CAN_transmit_B.errString3[1] = 'a';\r\n    raspberrypi_CAN_transmit_B.errString3[2] = 'n';\r\n    raspberrypi_CAN_transmit_B.errString3[3] = '0';\r\n    for (isCANSetup = 0; isCANSetup < 14; isCANSetup++) {\r\n      raspberrypi_CAN_transmit_B.errString3[isCANSetup + 4] = tmp_0[isCANSetup];\r\n    }\r\n\r\n    raspberrypi_CAN_transmit_B.errString3[18] = '\\n';\r\n    raspberrypi_CAN_transmit_B.errString3[19] = '\\x00';\r\n    MW_printError(&raspberrypi_CAN_transmit_B.errString3[0]);\r\n  }\r\n\r\n  if ((stat1 == 0) && (stat2 == 0)) {\r\n    obj_0->Initialized = true;\r\n  } else {\r\n    obj_0->Initialized = false;\r\n  }\r\n\r\n  obj->isSetupComplete = true;\r\n}\r\n\r\n/* Model step function */\r\nvoid raspberrypi_CAN_transmit_step(void)\r\n{\r\n  codertarget_raspi_internal_CA_T *obj_0;\r\n  codertarget_raspi_internal__f_T *obj;\r\n  codertarget_raspi_internal_f0_T *obj_1;\r\n  real_T idType;\r\n  int32_T kstr;\r\n  int32_T ret;\r\n  int32_T txData_tmp;\r\n  uint32_T u0_ID;\r\n  char_T rxInterface[5];\r\n  uint8_T dataLength;\r\n  uint8_T error;\r\n  uint8_T extended;\r\n  uint8_T remote;\r\n  uint8_T status;\r\n  boolean_T idType_0;\r\n  static const char_T tmp[28] = { 'E', 'x', 't', 'e', 'n', 'd', 'e', 'd', ' ',\r\n    '(', '2', '9', '-', 'b', 'i', 't', ' ', 'i', 'd', 'e', 'n', 't', 'i', 'f',\r\n    'i', 'e', 'r', ')' };\r\n\r\n  static const char_T tmp_0[69] = { 'I', 'n', 'v', 'a', 'l', 'i', 'd', ' ', 'L',\r\n    'E', 'D', ' ', 'v', 'a', 'l', 'u', 'e', '.', ' ', 'L', 'E', 'D', ' ', 'v',\r\n    'a', 'l', 'u', 'e', ' ', 'm', 'u', 's', 't', ' ', 'b', 'e', ' ', 'a', ' ',\r\n    'l', 'o', 'g', 'i', 'c', 'a', 'l', ' ', 'v', 'a', 'l', 'u', 'e', ' ', '(',\r\n    't', 'r', 'u', 'e', ' ', 'o', 'r', ' ', 'f', 'a', 'l', 's', 'e', ')', '.' };\r\n\r\n  static const char_T tmp_1[5] = \"none\";\r\n  static const char_T tmp_2[28] = { 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', ' ',\r\n    '(', '1', '1', '-', 'b', 'i', 't', ' ', 'i', 'd', 'e', 'n', 't', 'i', 'f',\r\n    'i', 'e', 'r', ')' };\r\n\r\n  /* MATLABSystem: '<Root>/CAN Receive1' */\r\n  idType = raspberrypi_CAN_transmit_P.CANReceive1_SampleTime;\r\n  if (raspberrypi_CAN_transmit_DW.obj_o.SampleTime != idType) {\r\n    obj = &raspberrypi_CAN_transmit_DW.obj_o;\r\n    obj->SampleTime = idType;\r\n  }\r\n\r\n  obj = &raspberrypi_CAN_transmit_DW.obj_o;\r\n  if (obj->Initialized) {\r\n    rxInterface[0] = 'c';\r\n    rxInterface[1] = 'a';\r\n    rxInterface[2] = 'n';\r\n    rxInterface[3] = '0';\r\n    rxInterface[4] = '\\x00';\r\n    for (ret = 0; ret < 8; ret++) {\r\n      raspberrypi_CAN_transmit_B.rxData[ret] = 0U;\r\n    }\r\n\r\n    extended = 0U;\r\n    for (ret = 0; ret < 28; ret++) {\r\n      raspberrypi_CAN_transmit_B.a[ret] = obj->IdentifierType[ret];\r\n    }\r\n\r\n    for (ret = 0; ret < 28; ret++) {\r\n      raspberrypi_CAN_transmit_B.b[ret] = tmp[ret];\r\n    }\r\n\r\n    ret = memcmp(&raspberrypi_CAN_transmit_B.a[0],\r\n                 &raspberrypi_CAN_transmit_B.b[0], 28);\r\n    idType_0 = (ret == 0);\r\n    if (idType_0) {\r\n      extended = 1U;\r\n    }\r\n\r\n    ret = MW_CAN_receiveRawSimulink(&rxInterface[0], 20U,\r\n      &raspberrypi_CAN_transmit_B.rxData[0], 1, &status, extended, &remote,\r\n      &error, obj->sockHandleDataFrames, obj->sockHandleErrorFrames);\r\n    if (ret != 0) {\r\n      obj->Initialized = false;\r\n    }\r\n\r\n    extended = raspberrypi_CAN_transmit_B.rxData[0];\r\n  } else {\r\n    extended = 0U;\r\n    status = 0U;\r\n  }\r\n\r\n  /* MATLABSystem: '<Root>/CAN Receive1' */\r\n  raspberrypi_CAN_transmit_B.CANReceive1_o1 = extended;\r\n\r\n  /* MATLABSystem: '<Root>/CAN Receive1' */\r\n  raspberrypi_CAN_transmit_B.CANReceive1_o2 = status;\r\n\r\n  /* S-Function (scanunpack): '<Root>/CAN Unpack' */\r\n  {\r\n    /* S-Function (scanunpack): '<Root>/CAN Unpack' */\r\n    if ((8 == raspberrypi_CAN_transmit_B.CANReceive1_o1.Length) &&\r\n        (raspberrypi_CAN_transmit_B.CANReceive1_o1.ID != INVALID_CAN_ID) ) {\r\n      if ((20 == raspberrypi_CAN_transmit_B.CANReceive1_o1.ID) && (0U ==\r\n           raspberrypi_CAN_transmit_B.CANReceive1_o1.Extended) ) {\r\n        (void) memcpy(&raspberrypi_CAN_transmit_B.CANUnpack[0],\r\n                      raspberrypi_CAN_transmit_B.CANReceive1_o1.Data,\r\n                      8 * sizeof(uint8_T));\r\n      }\r\n    }\r\n  }\r\n\r\n  for (ret = 0; ret < 8; ret++) {\r\n    /* Sum: '<Root>/Add1' incorporates:\r\n     *  Constant: '<Root>/Constant Short9'\r\n     */\r\n    raspberrypi_CAN_transmit_B.Add1[ret] = (uint8_T)((uint32_T)\r\n      raspberrypi_CAN_transmit_B.CANUnpack[ret] +\r\n      raspberrypi_CAN_transmit_P.ConstantShort9_Value);\r\n  }\r\n\r\n  /* S-Function (scanpack): '<Root>/CAN Pack' */\r\n  /* S-Function (scanpack): '<Root>/CAN Pack' */\r\n  raspberrypi_CAN_transmit_B.CANPack.ID = 21U;\r\n  raspberrypi_CAN_transmit_B.CANPack.Length = 8U;\r\n  raspberrypi_CAN_transmit_B.CANPack.Extended = 0U;\r\n  raspberrypi_CAN_transmit_B.CANPack.Remote = 0;\r\n  raspberrypi_CAN_transmit_B.CANPack.Data[0] = 0;\r\n  raspberrypi_CAN_transmit_B.CANPack.Data[1] = 0;\r\n  raspberrypi_CAN_transmit_B.CANPack.Data[2] = 0;\r\n  raspberrypi_CAN_transmit_B.CANPack.Data[3] = 0;\r\n  raspberrypi_CAN_transmit_B.CANPack.Data[4] = 0;\r\n  raspberrypi_CAN_transmit_B.CANPack.Data[5] = 0;\r\n  raspberrypi_CAN_transmit_B.CANPack.Data[6] = 0;\r\n  raspberrypi_CAN_transmit_B.CANPack.Data[7] = 0;\r\n\r\n  {\r\n    (void) memcpy((raspberrypi_CAN_transmit_B.CANPack.Data),\r\n                  &raspberrypi_CAN_transmit_B.Add1[0],\r\n                  8 * sizeof(uint8_T));\r\n  }\r\n\r\n  /* MATLABSystem: '<Root>/CAN Transmit1' */\r\n  status = raspberrypi_CAN_transmit_B.CANPack.Extended;\r\n  dataLength = raspberrypi_CAN_transmit_B.CANPack.Length;\r\n  remote = raspberrypi_CAN_transmit_B.CANPack.Remote;\r\n  u0_ID = raspberrypi_CAN_transmit_B.CANPack.ID;\r\n  for (ret = 0; ret < 8; ret++) {\r\n    raspberrypi_CAN_transmit_B.rxData[ret] =\r\n      raspberrypi_CAN_transmit_B.CANPack.Data[ret];\r\n  }\r\n\r\n  obj_0 = &raspberrypi_CAN_transmit_DW.obj_d;\r\n  extended = obj_0->notFirstStep;\r\n  if (obj_0->Initialized) {\r\n    for (ret = 0; ret < 8; ret++) {\r\n      raspberrypi_CAN_transmit_B.txData[ret] = 0U;\r\n    }\r\n\r\n    rxInterface[0] = 'c';\r\n    rxInterface[1] = 'a';\r\n    rxInterface[2] = 'n';\r\n    rxInterface[3] = '0';\r\n    rxInterface[4] = '\\x00';\r\n    if (remote == 0) {\r\n      kstr = dataLength - 1;\r\n      for (ret = 0; ret <= kstr; ret++) {\r\n        error = (uint8_T)((uint32_T)ret + 1U);\r\n        txData_tmp = error - 1;\r\n        raspberrypi_CAN_transmit_B.txData[txData_tmp] =\r\n          raspberrypi_CAN_transmit_B.rxData[txData_tmp];\r\n      }\r\n    }\r\n\r\n    idType = (status == 0);\r\n    ret = (int32_T)idType;\r\n    error = (uint8_T)ret;\r\n    ret = MW_CAN_transmitCANMsg(&rxInterface[0], error, u0_ID, dataLength,\r\n      &raspberrypi_CAN_transmit_B.txData[0], remote, &status, 1, 1.0,\r\n      obj_0->sockHandleDataFrames, obj_0->sockHandleErrorFrames, extended);\r\n    obj_0->notFirstStep = true;\r\n    if (ret != 0) {\r\n      obj_0->Initialized = false;\r\n    }\r\n  }\r\n\r\n  /* End of MATLABSystem: '<Root>/CAN Transmit1' */\r\n\r\n  /* MATLABSystem: '<Root>/LED1' */\r\n  status = raspberrypi_CAN_transmit_B.CANReceive1_o2;\r\n  if ((status == 0) || (status == 1)) {\r\n  } else {\r\n    memcpy(&raspberrypi_CAN_transmit_B.c[0], &tmp_0[0], 69U * sizeof(char_T));\r\n    perror(&raspberrypi_CAN_transmit_B.c[0]);\r\n  }\r\n\r\n  for (ret = 0; ret < 5; ret++) {\r\n    rxInterface[ret] = tmp_1[ret];\r\n  }\r\n\r\n  EXT_LED_setTrigger(0U, &rxInterface[0]);\r\n  EXT_LED_write(0U, status);\r\n\r\n  /* End of MATLABSystem: '<Root>/LED1' */\r\n\r\n  /* SignalConversion generated from: '<Root>/CAN Pack1' incorporates:\r\n   *  Constant: '<Root>/Constant Short5'\r\n   *  Constant: '<Root>/Constant Short6'\r\n   */\r\n  raspberrypi_CAN_transmit_B.TmpSignalConversionAtCANPack1In[0] =\r\n    raspberrypi_CAN_transmit_P.ConstantShort5_Value;\r\n  raspberrypi_CAN_transmit_B.TmpSignalConversionAtCANPack1In[1] =\r\n    raspberrypi_CAN_transmit_P.ConstantShort5_Value;\r\n  raspberrypi_CAN_transmit_B.TmpSignalConversionAtCANPack1In[2] =\r\n    raspberrypi_CAN_transmit_P.ConstantShort5_Value;\r\n  raspberrypi_CAN_transmit_B.TmpSignalConversionAtCANPack1In[3] =\r\n    raspberrypi_CAN_transmit_P.ConstantShort5_Value;\r\n  raspberrypi_CAN_transmit_B.TmpSignalConversionAtCANPack1In[4] =\r\n    raspberrypi_CAN_transmit_P.ConstantShort6_Value;\r\n  raspberrypi_CAN_transmit_B.TmpSignalConversionAtCANPack1In[5] =\r\n    raspberrypi_CAN_transmit_P.ConstantShort6_Value;\r\n  raspberrypi_CAN_transmit_B.TmpSignalConversionAtCANPack1In[6] =\r\n    raspberrypi_CAN_transmit_P.ConstantShort6_Value;\r\n  raspberrypi_CAN_transmit_B.TmpSignalConversionAtCANPack1In[7] =\r\n    raspberrypi_CAN_transmit_P.ConstantShort6_Value;\r\n\r\n  /* S-Function (scanpack): '<Root>/CAN Pack1' */\r\n  /* S-Function (scanpack): '<Root>/CAN Pack1' */\r\n  raspberrypi_CAN_transmit_B.CANPack1.ID = 105U;\r\n  raspberrypi_CAN_transmit_B.CANPack1.Length = 8U;\r\n  raspberrypi_CAN_transmit_B.CANPack1.Extended = 0U;\r\n  raspberrypi_CAN_transmit_B.CANPack1.Remote = 0;\r\n  raspberrypi_CAN_transmit_B.CANPack1.Data[0] = 0;\r\n  raspberrypi_CAN_transmit_B.CANPack1.Data[1] = 0;\r\n  raspberrypi_CAN_transmit_B.CANPack1.Data[2] = 0;\r\n  raspberrypi_CAN_transmit_B.CANPack1.Data[3] = 0;\r\n  raspberrypi_CAN_transmit_B.CANPack1.Data[4] = 0;\r\n  raspberrypi_CAN_transmit_B.CANPack1.Data[5] = 0;\r\n  raspberrypi_CAN_transmit_B.CANPack1.Data[6] = 0;\r\n  raspberrypi_CAN_transmit_B.CANPack1.Data[7] = 0;\r\n\r\n  {\r\n    (void) memcpy((raspberrypi_CAN_transmit_B.CANPack1.Data),\r\n                  &raspberrypi_CAN_transmit_B.TmpSignalConversionAtCANPack1In[0],\r\n                  8 * sizeof(uint8_T));\r\n  }\r\n\r\n  /* MATLABSystem: '<Root>/CAN Transmit2' */\r\n  status = raspberrypi_CAN_transmit_B.CANPack1.Extended;\r\n  dataLength = raspberrypi_CAN_transmit_B.CANPack1.Length;\r\n  remote = raspberrypi_CAN_transmit_B.CANPack1.Remote;\r\n  u0_ID = raspberrypi_CAN_transmit_B.CANPack1.ID;\r\n  for (ret = 0; ret < 8; ret++) {\r\n    raspberrypi_CAN_transmit_B.rxData[ret] =\r\n      raspberrypi_CAN_transmit_B.CANPack1.Data[ret];\r\n  }\r\n\r\n  obj_0 = &raspberrypi_CAN_transmit_DW.obj_h;\r\n  extended = obj_0->notFirstStep;\r\n  if (obj_0->Initialized) {\r\n    for (ret = 0; ret < 8; ret++) {\r\n      raspberrypi_CAN_transmit_B.txData[ret] = 0U;\r\n    }\r\n\r\n    rxInterface[0] = 'c';\r\n    rxInterface[1] = 'a';\r\n    rxInterface[2] = 'n';\r\n    rxInterface[3] = '0';\r\n    rxInterface[4] = '\\x00';\r\n    if (remote == 0) {\r\n      kstr = dataLength - 1;\r\n      for (ret = 0; ret <= kstr; ret++) {\r\n        error = (uint8_T)((uint32_T)ret + 1U);\r\n        txData_tmp = error - 1;\r\n        raspberrypi_CAN_transmit_B.txData[txData_tmp] =\r\n          raspberrypi_CAN_transmit_B.rxData[txData_tmp];\r\n      }\r\n    }\r\n\r\n    idType = (status == 0);\r\n    ret = (int32_T)idType;\r\n    error = (uint8_T)ret;\r\n    ret = MW_CAN_transmitCANMsg(&rxInterface[0], error, u0_ID, dataLength,\r\n      &raspberrypi_CAN_transmit_B.txData[0], remote, &status, 1, 1.0,\r\n      obj_0->sockHandleDataFrames, obj_0->sockHandleErrorFrames, extended);\r\n    obj_0->notFirstStep = true;\r\n    if (ret != 0) {\r\n      obj_0->Initialized = false;\r\n    }\r\n  }\r\n\r\n  /* End of MATLABSystem: '<Root>/CAN Transmit2' */\r\n\r\n  /* MATLABSystem: '<Root>/CAN Receive2' */\r\n  idType = raspberrypi_CAN_transmit_P.CANReceive2_SampleTime;\r\n  if (raspberrypi_CAN_transmit_DW.obj.SampleTime != idType) {\r\n    obj = &raspberrypi_CAN_transmit_DW.obj;\r\n    obj->SampleTime = idType;\r\n  }\r\n\r\n  obj = &raspberrypi_CAN_transmit_DW.obj;\r\n  if (obj->Initialized) {\r\n    rxInterface[0] = 'c';\r\n    rxInterface[1] = 'a';\r\n    rxInterface[2] = 'n';\r\n    rxInterface[3] = '0';\r\n    rxInterface[4] = '\\x00';\r\n    for (ret = 0; ret < 8; ret++) {\r\n      raspberrypi_CAN_transmit_B.rxData[ret] = 0U;\r\n    }\r\n\r\n    extended = 0U;\r\n    for (ret = 0; ret < 28; ret++) {\r\n      raspberrypi_CAN_transmit_B.a[ret] = obj->IdentifierType[ret];\r\n    }\r\n\r\n    for (ret = 0; ret < 28; ret++) {\r\n      raspberrypi_CAN_transmit_B.b[ret] = tmp[ret];\r\n    }\r\n\r\n    ret = memcmp(&raspberrypi_CAN_transmit_B.a[0],\r\n                 &raspberrypi_CAN_transmit_B.b[0], 28);\r\n    idType_0 = (ret == 0);\r\n    if (idType_0) {\r\n      extended = 1U;\r\n    }\r\n\r\n    ret = MW_CAN_receiveRawSimulink(&rxInterface[0], 30U,\r\n      &raspberrypi_CAN_transmit_B.rxData[0], 1, &status, extended, &remote,\r\n      &error, obj->sockHandleDataFrames, obj->sockHandleErrorFrames);\r\n    if (ret != 0) {\r\n      obj->Initialized = false;\r\n    }\r\n\r\n    extended = raspberrypi_CAN_transmit_B.rxData[0];\r\n  } else {\r\n    extended = 0U;\r\n    status = 0U;\r\n  }\r\n\r\n  /* MATLABSystem: '<Root>/CAN Receive2' */\r\n  raspberrypi_CAN_transmit_B.CANReceive2_o1 = extended;\r\n\r\n  /* MATLABSystem: '<Root>/CAN Receive2' */\r\n  raspberrypi_CAN_transmit_B.CANReceive2_o2 = status;\r\n\r\n  /* MATLABSystem: '<Root>/CAN Transmit3' */\r\n  status = raspberrypi_CAN_transmit_B.CANReceive2_o1;\r\n  obj_1 = &raspberrypi_CAN_transmit_DW.obj_n;\r\n  extended = obj_1->notFirstStep;\r\n  if (obj_1->Initialized) {\r\n    for (ret = 0; ret < 8; ret++) {\r\n      raspberrypi_CAN_transmit_B.txData[ret] = 0U;\r\n    }\r\n\r\n    rxInterface[0] = 'c';\r\n    rxInterface[1] = 'a';\r\n    rxInterface[2] = 'n';\r\n    rxInterface[3] = '0';\r\n    rxInterface[4] = '\\x00';\r\n    raspberrypi_CAN_transmit_B.txData[0] = status;\r\n    for (ret = 0; ret < 28; ret++) {\r\n      raspberrypi_CAN_transmit_B.a[ret] = obj_1->IdentifierType[ret];\r\n    }\r\n\r\n    for (ret = 0; ret < 28; ret++) {\r\n      raspberrypi_CAN_transmit_B.b[ret] = tmp_2[ret];\r\n    }\r\n\r\n    ret = memcmp(&raspberrypi_CAN_transmit_B.a[0],\r\n                 &raspberrypi_CAN_transmit_B.b[0], 28);\r\n    idType_0 = (ret == 0);\r\n    ret = MW_CAN_transmitRaw(&rxInterface[0], (uint8_T)idType_0, 30U, 1,\r\n      &raspberrypi_CAN_transmit_B.txData[0], 0, &status, 1, 1.0,\r\n      obj_1->sockHandleDataFrames, obj_1->sockHandleErrorFrames, extended);\r\n    obj_1->notFirstStep = true;\r\n    if (ret != 0) {\r\n      obj_1->Initialized = false;\r\n    }\r\n  }\r\n\r\n  /* End of MATLABSystem: '<Root>/CAN Transmit3' */\r\n\r\n  /* Matfile logging */\r\n  rt_UpdateTXYLogVars(raspberrypi_CAN_transmit_M->rtwLogInfo,\r\n                      (&raspberrypi_CAN_transmit_M->Timing.taskTime0));\r\n\r\n  /* signal main to stop simulation */\r\n  {                                    /* Sample time: [0.1s, 0.0s] */\r\n    if ((rtmGetTFinal(raspberrypi_CAN_transmit_M)!=-1) &&\r\n        !((rtmGetTFinal(raspberrypi_CAN_transmit_M)-\r\n           raspberrypi_CAN_transmit_M->Timing.taskTime0) >\r\n          raspberrypi_CAN_transmit_M->Timing.taskTime0 * (DBL_EPSILON))) {\r\n      rtmSetErrorStatus(raspberrypi_CAN_transmit_M, \"Simulation finished\");\r\n    }\r\n  }\r\n\r\n  /* Update absolute time for base rate */\r\n  /* The \"clockTick0\" counts the number of times the code of this task has\r\n   * been executed. The absolute time is the multiplication of \"clockTick0\"\r\n   * and \"Timing.stepSize0\". Size of \"clockTick0\" ensures timer will not\r\n   * overflow during the application lifespan selected.\r\n   * Timer of this task consists of two 32 bit unsigned integers.\r\n   * The two integers represent the low bits Timing.clockTick0 and the high bits\r\n   * Timing.clockTickH0. When the low bit overflows to 0, the high bits increment.\r\n   */\r\n  if (!(++raspberrypi_CAN_transmit_M->Timing.clockTick0)) {\r\n    ++raspberrypi_CAN_transmit_M->Timing.clockTickH0;\r\n  }\r\n\r\n  raspberrypi_CAN_transmit_M->Timing.taskTime0 =\r\n    raspberrypi_CAN_transmit_M->Timing.clockTick0 *\r\n    raspberrypi_CAN_transmit_M->Timing.stepSize0 +\r\n    raspberrypi_CAN_transmit_M->Timing.clockTickH0 *\r\n    raspberrypi_CAN_transmit_M->Timing.stepSize0 * 4294967296.0;\r\n}\r\n\r\n/* Model initialize function */\r\nvoid raspberrypi_CAN_transmit_initialize(void)\r\n{\r\n  /* Registration code */\r\n\r\n  /* initialize non-finites */\r\n  rt_InitInfAndNaN(sizeof(real_T));\r\n\r\n  /* initialize real-time model */\r\n  (void) memset((void *)raspberrypi_CAN_transmit_M, 0,\r\n                sizeof(RT_MODEL_raspberrypi_CAN_tran_T));\r\n  rtmSetTFinal(raspberrypi_CAN_transmit_M, 10.0);\r\n  raspberrypi_CAN_transmit_M->Timing.stepSize0 = 0.1;\r\n\r\n  /* Setup for data logging */\r\n  {\r\n    static RTWLogInfo rt_DataLoggingInfo;\r\n    rt_DataLoggingInfo.loggingInterval = (NULL);\r\n    raspberrypi_CAN_transmit_M->rtwLogInfo = &rt_DataLoggingInfo;\r\n  }\r\n\r\n  /* Setup for data logging */\r\n  {\r\n    rtliSetLogXSignalInfo(raspberrypi_CAN_transmit_M->rtwLogInfo, (NULL));\r\n    rtliSetLogXSignalPtrs(raspberrypi_CAN_transmit_M->rtwLogInfo, (NULL));\r\n    rtliSetLogT(raspberrypi_CAN_transmit_M->rtwLogInfo, \"tout\");\r\n    rtliSetLogX(raspberrypi_CAN_transmit_M->rtwLogInfo, \"\");\r\n    rtliSetLogXFinal(raspberrypi_CAN_transmit_M->rtwLogInfo, \"\");\r\n    rtliSetLogVarNameModifier(raspberrypi_CAN_transmit_M->rtwLogInfo, \"rt_\");\r\n    rtliSetLogFormat(raspberrypi_CAN_transmit_M->rtwLogInfo, 4);\r\n    rtliSetLogMaxRows(raspberrypi_CAN_transmit_M->rtwLogInfo, 0);\r\n    rtliSetLogDecimation(raspberrypi_CAN_transmit_M->rtwLogInfo, 1);\r\n    rtliSetLogY(raspberrypi_CAN_transmit_M->rtwLogInfo, \"\");\r\n    rtliSetLogYSignalInfo(raspberrypi_CAN_transmit_M->rtwLogInfo, (NULL));\r\n    rtliSetLogYSignalPtrs(raspberrypi_CAN_transmit_M->rtwLogInfo, (NULL));\r\n  }\r\n\r\n  /* block I/O */\r\n  (void) memset(((void *) &raspberrypi_CAN_transmit_B), 0,\r\n                sizeof(B_raspberrypi_CAN_transmit_T));\r\n\r\n  /* states (dwork) */\r\n  (void) memset((void *)&raspberrypi_CAN_transmit_DW, 0,\r\n                sizeof(DW_raspberrypi_CAN_transmit_T));\r\n\r\n  /* Matfile logging */\r\n  rt_StartDataLoggingWithStartTime(raspberrypi_CAN_transmit_M->rtwLogInfo, 0.0,\r\n    rtmGetTFinal(raspberrypi_CAN_transmit_M),\r\n    raspberrypi_CAN_transmit_M->Timing.stepSize0, (&rtmGetErrorStatus\r\n    (raspberrypi_CAN_transmit_M)));\r\n\r\n  /* Start for S-Function (scanunpack): '<Root>/CAN Unpack' */\r\n\r\n  /*-----------S-Function Block: <Root>/CAN Unpack -----------------*/\r\n  {\r\n    codertarget_raspi_internal_CA_T *b_obj_0;\r\n    codertarget_raspi_internal_LE_T *b_obj_1;\r\n    codertarget_raspi_internal__f_T *b_obj;\r\n    codertarget_raspi_internal_f0_T *b_obj_2;\r\n    int32_T i;\r\n    static const char_T tmp[28] = { 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', ' ',\r\n      '(', '1', '1', '-', 'b', 'i', 't', ' ', 'i', 'd', 'e', 'n', 't', 'i', 'f',\r\n      'i', 'e', 'r', ')' };\r\n\r\n    static const char_T tmp_0[5] = \"none\";\r\n\r\n    /* Start for MATLABSystem: '<Root>/CAN Receive1' */\r\n    raspberrypi_CAN_transmit_DW.obj_o.matlabCodegenIsDeleted = true;\r\n    raspberrypi_CAN_transmit_B.SampleTime =\r\n      raspberrypi_CAN_transmit_P.CANReceive1_SampleTime;\r\n    b_obj = &raspberrypi_CAN_transmit_DW.obj_o;\r\n    b_obj->sockHandleDataFrames = 0;\r\n    b_obj->sockHandleErrorFrames = 0;\r\n    b_obj->isInitialized = 0;\r\n    b_obj->SampleTime = -1.0;\r\n    b_obj->matlabCodegenIsDeleted = false;\r\n    raspberrypi_CAN_transmit_DW.objisempty_o = true;\r\n    b_obj = &raspberrypi_CAN_transmit_DW.obj_o;\r\n    for (i = 0; i < 28; i++) {\r\n      raspberrypi_CAN_transmit_B.b_value[i] = tmp[i];\r\n    }\r\n\r\n    for (i = 0; i < 28; i++) {\r\n      b_obj->IdentifierType[i] = raspberrypi_CAN_transmit_B.b_value[i];\r\n    }\r\n\r\n    b_obj->SetIdentifierType = true;\r\n    b_obj = &raspberrypi_CAN_transmit_DW.obj_o;\r\n    b_obj->SampleTime = raspberrypi_CAN_transmit_B.SampleTime;\r\n    raspberrypi_CA_SystemCore_setup(&raspberrypi_CAN_transmit_DW.obj_o);\r\n\r\n    /* End of Start for MATLABSystem: '<Root>/CAN Receive1' */\r\n\r\n    /* Start for MATLABSystem: '<Root>/CAN Transmit1' */\r\n    raspberrypi_CAN_transmit_DW.obj_d.matlabCodegenIsDeleted = true;\r\n    b_obj_0 = &raspberrypi_CAN_transmit_DW.obj_d;\r\n    b_obj_0->sockHandleDataFrames = 0;\r\n    b_obj_0->sockHandleErrorFrames = 0;\r\n    b_obj_0->notFirstStep = false;\r\n    b_obj_0->isInitialized = 0;\r\n    b_obj_0->matlabCodegenIsDeleted = false;\r\n    raspberrypi_CAN_transmit_DW.objisempty_cl = true;\r\n    raspberrypi_SystemCore_setup_f0(&raspberrypi_CAN_transmit_DW.obj_d);\r\n\r\n    /* Start for MATLABSystem: '<Root>/LED1' */\r\n    raspberrypi_CAN_transmit_DW.obj_l.matlabCodegenIsDeleted = true;\r\n    b_obj_1 = &raspberrypi_CAN_transmit_DW.obj_l;\r\n    b_obj_1->isInitialized = 0;\r\n    b_obj_1->matlabCodegenIsDeleted = false;\r\n    raspberrypi_CAN_transmit_DW.objisempty = true;\r\n    b_obj_1 = &raspberrypi_CAN_transmit_DW.obj_l;\r\n    b_obj_1->isSetupComplete = false;\r\n    b_obj_1->isInitialized = 1;\r\n    for (i = 0; i < 5; i++) {\r\n      raspberrypi_CAN_transmit_B.b_m[i] = tmp_0[i];\r\n    }\r\n\r\n    EXT_LED_setTrigger(0U, &raspberrypi_CAN_transmit_B.b_m[0]);\r\n    b_obj_1->isSetupComplete = true;\r\n\r\n    /* End of Start for MATLABSystem: '<Root>/LED1' */\r\n\r\n    /* Start for MATLABSystem: '<Root>/CAN Transmit2' */\r\n    raspberrypi_CAN_transmit_DW.obj_h.matlabCodegenIsDeleted = true;\r\n    b_obj_0 = &raspberrypi_CAN_transmit_DW.obj_h;\r\n    b_obj_0->sockHandleDataFrames = 0;\r\n    b_obj_0->sockHandleErrorFrames = 0;\r\n    b_obj_0->notFirstStep = false;\r\n    b_obj_0->isInitialized = 0;\r\n    b_obj_0->matlabCodegenIsDeleted = false;\r\n    raspberrypi_CAN_transmit_DW.objisempty_c = true;\r\n    raspberrypi_SystemCore_setup_f0(&raspberrypi_CAN_transmit_DW.obj_h);\r\n\r\n    /* Start for MATLABSystem: '<Root>/CAN Receive2' */\r\n    raspberrypi_CAN_transmit_DW.obj.matlabCodegenIsDeleted = true;\r\n    raspberrypi_CAN_transmit_B.SampleTime =\r\n      raspberrypi_CAN_transmit_P.CANReceive2_SampleTime;\r\n    b_obj = &raspberrypi_CAN_transmit_DW.obj;\r\n    b_obj->sockHandleDataFrames = 0;\r\n    b_obj->sockHandleErrorFrames = 0;\r\n    b_obj->isInitialized = 0;\r\n    b_obj->SampleTime = -1.0;\r\n    b_obj->matlabCodegenIsDeleted = false;\r\n    raspberrypi_CAN_transmit_DW.objisempty_p = true;\r\n    b_obj = &raspberrypi_CAN_transmit_DW.obj;\r\n    for (i = 0; i < 28; i++) {\r\n      raspberrypi_CAN_transmit_B.b_value[i] = tmp[i];\r\n    }\r\n\r\n    for (i = 0; i < 28; i++) {\r\n      b_obj->IdentifierType[i] = raspberrypi_CAN_transmit_B.b_value[i];\r\n    }\r\n\r\n    b_obj->SetIdentifierType = true;\r\n    b_obj = &raspberrypi_CAN_transmit_DW.obj;\r\n    b_obj->SampleTime = raspberrypi_CAN_transmit_B.SampleTime;\r\n    raspberrypi_CA_SystemCore_setup(&raspberrypi_CAN_transmit_DW.obj);\r\n\r\n    /* End of Start for MATLABSystem: '<Root>/CAN Receive2' */\r\n\r\n    /* Start for MATLABSystem: '<Root>/CAN Transmit3' */\r\n    raspberrypi_CAN_transmit_DW.obj_n.matlabCodegenIsDeleted = true;\r\n    b_obj_2 = &raspberrypi_CAN_transmit_DW.obj_n;\r\n    b_obj_2->sockHandleDataFrames = 0;\r\n    b_obj_2->sockHandleErrorFrames = 0;\r\n    b_obj_2->notFirstStep = false;\r\n    b_obj_2->isInitialized = 0;\r\n    b_obj_2->matlabCodegenIsDeleted = false;\r\n    raspberrypi_CAN_transmit_DW.objisempty_h = true;\r\n    b_obj_2 = &raspberrypi_CAN_transmit_DW.obj_n;\r\n    for (i = 0; i < 28; i++) {\r\n      raspberrypi_CAN_transmit_B.b_value[i] = tmp[i];\r\n    }\r\n\r\n    for (i = 0; i < 28; i++) {\r\n      b_obj_2->IdentifierType[i] = raspberrypi_CAN_transmit_B.b_value[i];\r\n    }\r\n\r\n    b_obj_2->SetIdentifierType = true;\r\n    raspberry_SystemCore_setup_f0kl(&raspberrypi_CAN_transmit_DW.obj_n);\r\n\r\n    /* End of Start for MATLABSystem: '<Root>/CAN Transmit3' */\r\n  }\r\n}\r\n\r\n/* Model terminate function */\r\nvoid raspberrypi_CAN_transmit_terminate(void)\r\n{\r\n  codertarget_raspi_internal_CA_T *obj_0;\r\n  codertarget_raspi_internal_LE_T *obj_1;\r\n  codertarget_raspi_internal__f_T *obj;\r\n  codertarget_raspi_internal_f0_T *obj_2;\r\n  char_T canInterface[5];\r\n\r\n  /* Terminate for MATLABSystem: '<Root>/CAN Receive1' */\r\n  obj = &raspberrypi_CAN_transmit_DW.obj_o;\r\n  if (!obj->matlabCodegenIsDeleted) {\r\n    obj->matlabCodegenIsDeleted = true;\r\n    if ((obj->isInitialized == 1) && obj->isSetupComplete && obj->Initialized) {\r\n      canInterface[0] = 'c';\r\n      canInterface[1] = 'a';\r\n      canInterface[2] = 'n';\r\n      canInterface[3] = '0';\r\n      canInterface[4] = '\\x00';\r\n      MW_clearSocket(&obj->sockHandleDataFrames, &canInterface[0]);\r\n      MW_clearSocket(&obj->sockHandleErrorFrames, &canInterface[0]);\r\n    }\r\n  }\r\n\r\n  /* End of Terminate for MATLABSystem: '<Root>/CAN Receive1' */\r\n\r\n  /* Terminate for MATLABSystem: '<Root>/CAN Transmit1' */\r\n  obj_0 = &raspberrypi_CAN_transmit_DW.obj_d;\r\n  if (!obj_0->matlabCodegenIsDeleted) {\r\n    obj_0->matlabCodegenIsDeleted = true;\r\n    if ((obj_0->isInitialized == 1) && obj_0->isSetupComplete &&\r\n        obj_0->Initialized) {\r\n      canInterface[0] = 'c';\r\n      canInterface[1] = 'a';\r\n      canInterface[2] = 'n';\r\n      canInterface[3] = '0';\r\n      canInterface[4] = '\\x00';\r\n      MW_clearSocket(&obj_0->sockHandleDataFrames, &canInterface[0]);\r\n      MW_clearSocket(&obj_0->sockHandleErrorFrames, &canInterface[0]);\r\n    }\r\n  }\r\n\r\n  /* End of Terminate for MATLABSystem: '<Root>/CAN Transmit1' */\r\n\r\n  /* Terminate for MATLABSystem: '<Root>/LED1' */\r\n  obj_1 = &raspberrypi_CAN_transmit_DW.obj_l;\r\n  if (!obj_1->matlabCodegenIsDeleted) {\r\n    obj_1->matlabCodegenIsDeleted = true;\r\n  }\r\n\r\n  /* End of Terminate for MATLABSystem: '<Root>/LED1' */\r\n\r\n  /* Terminate for MATLABSystem: '<Root>/CAN Transmit2' */\r\n  obj_0 = &raspberrypi_CAN_transmit_DW.obj_h;\r\n  if (!obj_0->matlabCodegenIsDeleted) {\r\n    obj_0->matlabCodegenIsDeleted = true;\r\n    if ((obj_0->isInitialized == 1) && obj_0->isSetupComplete &&\r\n        obj_0->Initialized) {\r\n      canInterface[0] = 'c';\r\n      canInterface[1] = 'a';\r\n      canInterface[2] = 'n';\r\n      canInterface[3] = '0';\r\n      canInterface[4] = '\\x00';\r\n      MW_clearSocket(&obj_0->sockHandleDataFrames, &canInterface[0]);\r\n      MW_clearSocket(&obj_0->sockHandleErrorFrames, &canInterface[0]);\r\n    }\r\n  }\r\n\r\n  /* End of Terminate for MATLABSystem: '<Root>/CAN Transmit2' */\r\n\r\n  /* Terminate for MATLABSystem: '<Root>/CAN Receive2' */\r\n  obj = &raspberrypi_CAN_transmit_DW.obj;\r\n  if (!obj->matlabCodegenIsDeleted) {\r\n    obj->matlabCodegenIsDeleted = true;\r\n    if ((obj->isInitialized == 1) && obj->isSetupComplete && obj->Initialized) {\r\n      canInterface[0] = 'c';\r\n      canInterface[1] = 'a';\r\n      canInterface[2] = 'n';\r\n      canInterface[3] = '0';\r\n      canInterface[4] = '\\x00';\r\n      MW_clearSocket(&obj->sockHandleDataFrames, &canInterface[0]);\r\n      MW_clearSocket(&obj->sockHandleErrorFrames, &canInterface[0]);\r\n    }\r\n  }\r\n\r\n  /* End of Terminate for MATLABSystem: '<Root>/CAN Receive2' */\r\n\r\n  /* Terminate for MATLABSystem: '<Root>/CAN Transmit3' */\r\n  obj_2 = &raspberrypi_CAN_transmit_DW.obj_n;\r\n  if (!obj_2->matlabCodegenIsDeleted) {\r\n    obj_2->matlabCodegenIsDeleted = true;\r\n    if ((obj_2->isInitialized == 1) && obj_2->isSetupComplete &&\r\n        obj_2->Initialized) {\r\n      canInterface[0] = 'c';\r\n      canInterface[1] = 'a';\r\n      canInterface[2] = 'n';\r\n      canInterface[3] = '0';\r\n      canInterface[4] = '\\x00';\r\n      MW_clearSocket(&obj_2->sockHandleDataFrames, &canInterface[0]);\r\n      MW_clearSocket(&obj_2->sockHandleErrorFrames, &canInterface[0]);\r\n    }\r\n  }\r\n\r\n  /* End of Terminate for MATLABSystem: '<Root>/CAN Transmit3' */\r\n}\r\n"},{"name":"raspberrypi_CAN_transmit.h","type":"header","group":"model","path":"C:\\Users\\yoshi\\hydroplane.us\\Hydroplane Team - Documents\\Engineering\\Demonstration System\\Command, Control, and Comm\\IO Hardware Manuals\\raspberrypi_CAN_transmit_grt_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * raspberrypi_CAN_transmit.h\r\n *\r\n * Code generation for model \"raspberrypi_CAN_transmit\".\r\n *\r\n * Model version              : 7.6\r\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\r\n * C source code generated on : Wed Jul 26 11:17:43 2023\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objective: Debugging\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_raspberrypi_CAN_transmit_h_\r\n#define RTW_HEADER_raspberrypi_CAN_transmit_h_\r\n#ifndef raspberrypi_CAN_transmit_COMMON_INCLUDES_\r\n#define raspberrypi_CAN_transmit_COMMON_INCLUDES_\r\n#include <math.h>\r\n#include <string.h>\r\n#include \"rtwtypes.h\"\r\n#include \"rtw_continuous.h\"\r\n#include \"rtw_solver.h\"\r\n#include \"rt_logging.h\"\r\n#include \"MW_SocketCAN.h\"\r\n#include \"LED.h\"\r\n#endif                           /* raspberrypi_CAN_transmit_COMMON_INCLUDES_ */\r\n\r\n#include \"raspberrypi_CAN_transmit_types.h\"\r\n#include <float.h>\r\n#include <stddef.h>\r\n#include \"rt_nonfinite.h\"\r\n#include \"can_message.h\"\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetFinalTime\r\n#define rtmGetFinalTime(rtm)           ((rtm)->Timing.tFinal)\r\n#endif\r\n\r\n#ifndef rtmGetRTWLogInfo\r\n#define rtmGetRTWLogInfo(rtm)          ((rtm)->rtwLogInfo)\r\n#endif\r\n\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n#ifndef rtmGetStopRequested\r\n#define rtmGetStopRequested(rtm)       ((rtm)->Timing.stopRequestedFlag)\r\n#endif\r\n\r\n#ifndef rtmSetStopRequested\r\n#define rtmSetStopRequested(rtm, val)  ((rtm)->Timing.stopRequestedFlag = (val))\r\n#endif\r\n\r\n#ifndef rtmGetStopRequestedPtr\r\n#define rtmGetStopRequestedPtr(rtm)    (&((rtm)->Timing.stopRequestedFlag))\r\n#endif\r\n\r\n#ifndef rtmGetT\r\n#define rtmGetT(rtm)                   ((rtm)->Timing.taskTime0)\r\n#endif\r\n\r\n#ifndef rtmGetTFinal\r\n#define rtmGetTFinal(rtm)              ((rtm)->Timing.tFinal)\r\n#endif\r\n\r\n#ifndef rtmGetTPtr\r\n#define rtmGetTPtr(rtm)                (&(rtm)->Timing.taskTime0)\r\n#endif\r\n\r\n/* Block signals (default storage) */\r\ntypedef struct {\r\n  char_T c[69];\r\n  char_T errString1[63];\r\n  char_T errString1_m[63];\r\n  char_T errString1_c[63];\r\n  char_T errString1_k[63];\r\n  char_T errString1_cx[63];\r\n  char_T errString2[52];\r\n  char_T errString2_b[52];\r\n  char_T errString2_p[52];\r\n  char_T errString2_c[52];\r\n  char_T errString2_f[52];\r\n  char_T b_value[28];\r\n  char_T b[28];\r\n  char_T a[28];\r\n  CAN_MESSAGE_BUS CANPack;             /* '<Root>/CAN Pack' */\r\n  CAN_MESSAGE_BUS CANPack1;            /* '<Root>/CAN Pack1' */\r\n  char_T errString3[20];\r\n  char_T errString3_g[20];\r\n  char_T errString3_g1[20];\r\n  real_T SampleTime;\r\n  uint8_T CANUnpack[8];                /* '<Root>/CAN Unpack' */\r\n  uint8_T Add1[8];                     /* '<Root>/Add1' */\r\n  uint8_T TmpSignalConversionAtCANPack1In[8];\r\n  uint8_T rxData[8];\r\n  uint8_T txData[8];\r\n  char_T b_m[5];\r\n  uint8_T CANReceive2_o1;              /* '<Root>/CAN Receive2' */\r\n  uint8_T CANReceive2_o2;              /* '<Root>/CAN Receive2' */\r\n  uint8_T CANReceive1_o1;              /* '<Root>/CAN Receive1' */\r\n  uint8_T CANReceive1_o2;              /* '<Root>/CAN Receive1' */\r\n} B_raspberrypi_CAN_transmit_T;\r\n\r\n/* Block states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  codertarget_raspi_internal__f_T obj; /* '<Root>/CAN Receive2' */\r\n  codertarget_raspi_internal__f_T obj_o;/* '<Root>/CAN Receive1' */\r\n  codertarget_raspi_internal_f0_T obj_n;/* '<Root>/CAN Transmit3' */\r\n  codertarget_raspi_internal_CA_T obj_h;/* '<Root>/CAN Transmit2' */\r\n  codertarget_raspi_internal_CA_T obj_d;/* '<Root>/CAN Transmit1' */\r\n  codertarget_raspi_internal_LE_T obj_l;/* '<Root>/LED1' */\r\n  int_T CANUnpack_ModeSignalID;        /* '<Root>/CAN Unpack' */\r\n  int_T CANUnpack_StatusPortID;        /* '<Root>/CAN Unpack' */\r\n  boolean_T objisempty;                /* '<Root>/LED1' */\r\n  boolean_T objisempty_h;              /* '<Root>/CAN Transmit3' */\r\n  boolean_T objisempty_c;              /* '<Root>/CAN Transmit2' */\r\n  boolean_T objisempty_cl;             /* '<Root>/CAN Transmit1' */\r\n  boolean_T objisempty_p;              /* '<Root>/CAN Receive2' */\r\n  boolean_T objisempty_o;              /* '<Root>/CAN Receive1' */\r\n} DW_raspberrypi_CAN_transmit_T;\r\n\r\n/* Parameters (default storage) */\r\nstruct P_raspberrypi_CAN_transmit_T_ {\r\n  real_T CANReceive1_SampleTime;       /* Expression: 0.1\r\n                                        * Referenced by: '<Root>/CAN Receive1'\r\n                                        */\r\n  real_T CANReceive2_SampleTime;       /* Expression: 0.1\r\n                                        * Referenced by: '<Root>/CAN Receive2'\r\n                                        */\r\n  uint8_T ConstantShort9_Value;      /* Computed Parameter: ConstantShort9_Value\r\n                                      * Referenced by: '<Root>/Constant Short9'\r\n                                      */\r\n  uint8_T ConstantShort5_Value;      /* Computed Parameter: ConstantShort5_Value\r\n                                      * Referenced by: '<Root>/Constant Short5'\r\n                                      */\r\n  uint8_T ConstantShort6_Value;      /* Computed Parameter: ConstantShort6_Value\r\n                                      * Referenced by: '<Root>/Constant Short6'\r\n                                      */\r\n};\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM_raspberrypi_CAN_trans_T {\r\n  const char_T *errorStatus;\r\n  RTWLogInfo *rtwLogInfo;\r\n\r\n  /*\r\n   * Timing:\r\n   * The following substructure contains information regarding\r\n   * the timing information for the model.\r\n   */\r\n  struct {\r\n    time_T taskTime0;\r\n    uint32_T clockTick0;\r\n    uint32_T clockTickH0;\r\n    time_T stepSize0;\r\n    time_T tFinal;\r\n    boolean_T stopRequestedFlag;\r\n  } Timing;\r\n};\r\n\r\nextern CAN_DATATYPE CAN_DATATYPE_GROUND;\r\n\r\n/* Block parameters (default storage) */\r\nextern P_raspberrypi_CAN_transmit_T raspberrypi_CAN_transmit_P;\r\n\r\n/* Block signals (default storage) */\r\nextern B_raspberrypi_CAN_transmit_T raspberrypi_CAN_transmit_B;\r\n\r\n/* Block states (default storage) */\r\nextern DW_raspberrypi_CAN_transmit_T raspberrypi_CAN_transmit_DW;\r\n\r\n/* Model entry point functions */\r\nextern void raspberrypi_CAN_transmit_initialize(void);\r\nextern void raspberrypi_CAN_transmit_step(void);\r\nextern void raspberrypi_CAN_transmit_terminate(void);\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL_raspberrypi_CAN_tran_T *const raspberrypi_CAN_transmit_M;\r\n\r\n/*-\r\n * These blocks were eliminated from the model due to optimizations:\r\n *\r\n * Block '<Root>/Conversion1' : Eliminate redundant data type conversion\r\n * Block '<Root>/Zero-Order Hold1' : Eliminated since input and output rates are identical\r\n */\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'raspberrypi_CAN_transmit'\r\n */\r\n#endif                              /* RTW_HEADER_raspberrypi_CAN_transmit_h_ */\r\n"},{"name":"raspberrypi_CAN_transmit_private.h","type":"header","group":"model","path":"C:\\Users\\yoshi\\hydroplane.us\\Hydroplane Team - Documents\\Engineering\\Demonstration System\\Command, Control, and Comm\\IO Hardware Manuals\\raspberrypi_CAN_transmit_grt_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * raspberrypi_CAN_transmit_private.h\r\n *\r\n * Code generation for model \"raspberrypi_CAN_transmit\".\r\n *\r\n * Model version              : 7.6\r\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\r\n * C source code generated on : Wed Jul 26 11:17:43 2023\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objective: Debugging\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_raspberrypi_CAN_transmit_private_h_\r\n#define RTW_HEADER_raspberrypi_CAN_transmit_private_h_\r\n#include \"rtwtypes.h\"\r\n#include \"builtin_typeid_types.h\"\r\n#include \"multiword_types.h\"\r\n#include \"raspberrypi_CAN_transmit_types.h\"\r\n\r\n/* Private macros used by the generated code to access rtModel */\r\n#ifndef rtmSetTFinal\r\n#define rtmSetTFinal(rtm, val)         ((rtm)->Timing.tFinal = (val))\r\n#endif\r\n#endif                      /* RTW_HEADER_raspberrypi_CAN_transmit_private_h_ */\r\n"},{"name":"raspberrypi_CAN_transmit_types.h","type":"header","group":"model","path":"C:\\Users\\yoshi\\hydroplane.us\\Hydroplane Team - Documents\\Engineering\\Demonstration System\\Command, Control, and Comm\\IO Hardware Manuals\\raspberrypi_CAN_transmit_grt_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * raspberrypi_CAN_transmit_types.h\r\n *\r\n * Code generation for model \"raspberrypi_CAN_transmit\".\r\n *\r\n * Model version              : 7.6\r\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\r\n * C source code generated on : Wed Jul 26 11:17:43 2023\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objective: Debugging\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_raspberrypi_CAN_transmit_types_h_\r\n#define RTW_HEADER_raspberrypi_CAN_transmit_types_h_\r\n#include \"rtwtypes.h\"\r\n#ifndef DEFINED_TYPEDEF_FOR_CAN_MESSAGE_BUS_\r\n#define DEFINED_TYPEDEF_FOR_CAN_MESSAGE_BUS_\r\n\r\ntypedef struct {\r\n  uint8_T Extended;\r\n  uint8_T Length;\r\n  uint8_T Remote;\r\n  uint8_T Error;\r\n  uint32_T ID;\r\n  real_T Timestamp;\r\n  uint8_T Data[8];\r\n} CAN_MESSAGE_BUS;\r\n\r\n#endif\r\n\r\n#ifndef struct_tag_VWsHpLnzr3Sj7pOoaPHLtE\r\n#define struct_tag_VWsHpLnzr3Sj7pOoaPHLtE\r\n\r\nstruct tag_VWsHpLnzr3Sj7pOoaPHLtE\r\n{\r\n  boolean_T matlabCodegenIsDeleted;\r\n  int32_T isInitialized;\r\n  boolean_T isSetupComplete;\r\n  int32_T sockHandleDataFrames;\r\n  int32_T sockHandleErrorFrames;\r\n  boolean_T notFirstStep;\r\n  boolean_T Initialized;\r\n};\r\n\r\n#endif                                 /* struct_tag_VWsHpLnzr3Sj7pOoaPHLtE */\r\n\r\n#ifndef typedef_codertarget_raspi_internal_CA_T\r\n#define typedef_codertarget_raspi_internal_CA_T\r\n\r\ntypedef struct tag_VWsHpLnzr3Sj7pOoaPHLtE codertarget_raspi_internal_CA_T;\r\n\r\n#endif                             /* typedef_codertarget_raspi_internal_CA_T */\r\n\r\n#ifndef struct_tag_tqvyq7c4NVcpAKseXMducE\r\n#define struct_tag_tqvyq7c4NVcpAKseXMducE\r\n\r\nstruct tag_tqvyq7c4NVcpAKseXMducE\r\n{\r\n  boolean_T matlabCodegenIsDeleted;\r\n  int32_T isInitialized;\r\n  boolean_T isSetupComplete;\r\n};\r\n\r\n#endif                                 /* struct_tag_tqvyq7c4NVcpAKseXMducE */\r\n\r\n#ifndef typedef_codertarget_raspi_internal_LE_T\r\n#define typedef_codertarget_raspi_internal_LE_T\r\n\r\ntypedef struct tag_tqvyq7c4NVcpAKseXMducE codertarget_raspi_internal_LE_T;\r\n\r\n#endif                             /* typedef_codertarget_raspi_internal_LE_T */\r\n\r\n#ifndef struct_tag_FrILEhnpvhQeAYRucCAgZD\r\n#define struct_tag_FrILEhnpvhQeAYRucCAgZD\r\n\r\nstruct tag_FrILEhnpvhQeAYRucCAgZD\r\n{\r\n  boolean_T matlabCodegenIsDeleted;\r\n  int32_T isInitialized;\r\n  boolean_T isSetupComplete;\r\n  real_T SampleTime;\r\n  char_T IdentifierType[28];\r\n  int32_T sockHandleDataFrames;\r\n  int32_T sockHandleErrorFrames;\r\n  boolean_T Initialized;\r\n  boolean_T SetIdentifierType;\r\n};\r\n\r\n#endif                                 /* struct_tag_FrILEhnpvhQeAYRucCAgZD */\r\n\r\n#ifndef typedef_codertarget_raspi_internal__f_T\r\n#define typedef_codertarget_raspi_internal__f_T\r\n\r\ntypedef struct tag_FrILEhnpvhQeAYRucCAgZD codertarget_raspi_internal__f_T;\r\n\r\n#endif                             /* typedef_codertarget_raspi_internal__f_T */\r\n\r\n#ifndef struct_tag_V0gYsqPUP4whhSGNFcckoF\r\n#define struct_tag_V0gYsqPUP4whhSGNFcckoF\r\n\r\nstruct tag_V0gYsqPUP4whhSGNFcckoF\r\n{\r\n  boolean_T matlabCodegenIsDeleted;\r\n  int32_T isInitialized;\r\n  boolean_T isSetupComplete;\r\n  char_T IdentifierType[28];\r\n  int32_T sockHandleDataFrames;\r\n  int32_T sockHandleErrorFrames;\r\n  boolean_T notFirstStep;\r\n  boolean_T Initialized;\r\n  boolean_T SetIdentifierType;\r\n};\r\n\r\n#endif                                 /* struct_tag_V0gYsqPUP4whhSGNFcckoF */\r\n\r\n#ifndef typedef_codertarget_raspi_internal_f0_T\r\n#define typedef_codertarget_raspi_internal_f0_T\r\n\r\ntypedef struct tag_V0gYsqPUP4whhSGNFcckoF codertarget_raspi_internal_f0_T;\r\n\r\n#endif                             /* typedef_codertarget_raspi_internal_f0_T */\r\n\r\n#ifndef SS_UINT64\r\n#define SS_UINT64                      23\r\n#endif\r\n\r\n#ifndef SS_INT64\r\n#define SS_INT64                       24\r\n#endif\r\n\r\n/* Parameters (default storage) */\r\ntypedef struct P_raspberrypi_CAN_transmit_T_ P_raspberrypi_CAN_transmit_T;\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM_raspberrypi_CAN_trans_T RT_MODEL_raspberrypi_CAN_tran_T;\r\n\r\n#endif                        /* RTW_HEADER_raspberrypi_CAN_transmit_types_h_ */\r\n"},{"name":"raspberrypi_CAN_transmit_data.c","type":"source","group":"data","path":"C:\\Users\\yoshi\\hydroplane.us\\Hydroplane Team - Documents\\Engineering\\Demonstration System\\Command, Control, and Comm\\IO Hardware Manuals\\raspberrypi_CAN_transmit_grt_rtw","tag":"","groupDisplay":"Data files","code":"/*\r\n * raspberrypi_CAN_transmit_data.c\r\n *\r\n * Code generation for model \"raspberrypi_CAN_transmit\".\r\n *\r\n * Model version              : 7.6\r\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\r\n * C source code generated on : Wed Jul 26 11:17:43 2023\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objective: Debugging\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"raspberrypi_CAN_transmit.h\"\r\n\r\n/* Block parameters (default storage) */\r\nP_raspberrypi_CAN_transmit_T raspberrypi_CAN_transmit_P = {\r\n  /* Expression: 0.1\r\n   * Referenced by: '<Root>/CAN Receive1'\r\n   */\r\n  0.1,\r\n\r\n  /* Expression: 0.1\r\n   * Referenced by: '<Root>/CAN Receive2'\r\n   */\r\n  0.1,\r\n\r\n  /* Computed Parameter: ConstantShort9_Value\r\n   * Referenced by: '<Root>/Constant Short9'\r\n   */\r\n  1U,\r\n\r\n  /* Computed Parameter: ConstantShort5_Value\r\n   * Referenced by: '<Root>/Constant Short5'\r\n   */\r\n  2U,\r\n\r\n  /* Computed Parameter: ConstantShort6_Value\r\n   * Referenced by: '<Root>/Constant Short6'\r\n   */\r\n  4U\r\n};\r\n"},{"name":"builtin_typeid_types.h","type":"header","group":"utility","path":"C:\\Users\\yoshi\\hydroplane.us\\Hydroplane Team - Documents\\Engineering\\Demonstration System\\Command, Control, and Comm\\IO Hardware Manuals\\raspberrypi_CAN_transmit_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * builtin_typeid_types.h\r\n *\r\n * Code generation for model \"raspberrypi_CAN_transmit\".\r\n *\r\n * Model version              : 7.6\r\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\r\n * C source code generated on : Wed Jul 26 11:17:43 2023\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objective: Debugging\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef BUILTIN_TYPEID_TYPES_H\r\n#define BUILTIN_TYPEID_TYPES_H\r\n#ifndef BUILTIN_TYPEID_TYPES\r\n#define BUILTIN_TYPEID_TYPES\r\n\r\n/* Enumeration of built-in data types */\r\ntypedef enum {\r\n  SS_DOUBLE = 0,\r\n  SS_SINGLE = 1,\r\n  SS_INT8 = 2,\r\n  SS_UINT8 = 3,\r\n  SS_INT16 = 4,\r\n  SS_UINT16 = 5,\r\n  SS_INT32 = 6,\r\n  SS_UINT32 = 7,\r\n  SS_BOOLEAN = 8\r\n} BuiltInDTypeId;\r\n\r\n#define SS_NUM_BUILT_IN_DTYPE          ((int)SS_BOOLEAN+1)\r\n\r\n/* Enumeration for MAT-file logging code */\r\ntypedef int DTypeId;\r\n\r\n/* Enumeration of pre-defined data types */\r\ntypedef enum {\r\n  SS_FCN_CALL = 9,\r\n  SS_INTEGER = 10,\r\n  SS_POINTER = 11,\r\n  SS_INTERNAL_DTYPE2 = 12,\r\n  SS_TIMER_UINT32_PAIR = 13,\r\n  SS_CONNECTION_TYPE = 14\r\n} PreDefinedDTypeId;\r\n\r\n#endif                                 /* BUILTIN_TYPEID_TYPES */\r\n#endif                                 /* BUILTIN_TYPEID_TYPES_H */\r\n"},{"name":"multiword_types.h","type":"header","group":"utility","path":"C:\\Users\\yoshi\\hydroplane.us\\Hydroplane Team - Documents\\Engineering\\Demonstration System\\Command, Control, and Comm\\IO Hardware Manuals\\raspberrypi_CAN_transmit_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * multiword_types.h\r\n *\r\n * Code generation for model \"raspberrypi_CAN_transmit\".\r\n *\r\n * Model version              : 7.6\r\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\r\n * C source code generated on : Wed Jul 26 11:17:43 2023\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objective: Debugging\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef MULTIWORD_TYPES_H\r\n#define MULTIWORD_TYPES_H\r\n#include \"rtwtypes.h\"\r\n\r\n/*\r\n * Definitions supporting external data access\r\n */\r\ntypedef int64_T chunk_T;\r\ntypedef uint64_T uchunk_T;\r\n\r\n/*\r\n * MultiWord supporting definitions\r\n */\r\ntypedef long long longlong_T;\r\n\r\n/*\r\n * MultiWord types\r\n */\r\ntypedef struct {\r\n  uint64_T chunks[2];\r\n} int128m_T;\r\n\r\ntypedef struct {\r\n  int128m_T re;\r\n  int128m_T im;\r\n} cint128m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[2];\r\n} uint128m_T;\r\n\r\ntypedef struct {\r\n  uint128m_T re;\r\n  uint128m_T im;\r\n} cuint128m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[3];\r\n} int192m_T;\r\n\r\ntypedef struct {\r\n  int192m_T re;\r\n  int192m_T im;\r\n} cint192m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[3];\r\n} uint192m_T;\r\n\r\ntypedef struct {\r\n  uint192m_T re;\r\n  uint192m_T im;\r\n} cuint192m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[4];\r\n} int256m_T;\r\n\r\ntypedef struct {\r\n  int256m_T re;\r\n  int256m_T im;\r\n} cint256m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[4];\r\n} uint256m_T;\r\n\r\ntypedef struct {\r\n  uint256m_T re;\r\n  uint256m_T im;\r\n} cuint256m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[5];\r\n} int320m_T;\r\n\r\ntypedef struct {\r\n  int320m_T re;\r\n  int320m_T im;\r\n} cint320m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[5];\r\n} uint320m_T;\r\n\r\ntypedef struct {\r\n  uint320m_T re;\r\n  uint320m_T im;\r\n} cuint320m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[6];\r\n} int384m_T;\r\n\r\ntypedef struct {\r\n  int384m_T re;\r\n  int384m_T im;\r\n} cint384m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[6];\r\n} uint384m_T;\r\n\r\ntypedef struct {\r\n  uint384m_T re;\r\n  uint384m_T im;\r\n} cuint384m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[7];\r\n} int448m_T;\r\n\r\ntypedef struct {\r\n  int448m_T re;\r\n  int448m_T im;\r\n} cint448m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[7];\r\n} uint448m_T;\r\n\r\ntypedef struct {\r\n  uint448m_T re;\r\n  uint448m_T im;\r\n} cuint448m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[8];\r\n} int512m_T;\r\n\r\ntypedef struct {\r\n  int512m_T re;\r\n  int512m_T im;\r\n} cint512m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[8];\r\n} uint512m_T;\r\n\r\ntypedef struct {\r\n  uint512m_T re;\r\n  uint512m_T im;\r\n} cuint512m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[9];\r\n} int576m_T;\r\n\r\ntypedef struct {\r\n  int576m_T re;\r\n  int576m_T im;\r\n} cint576m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[9];\r\n} uint576m_T;\r\n\r\ntypedef struct {\r\n  uint576m_T re;\r\n  uint576m_T im;\r\n} cuint576m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[10];\r\n} int640m_T;\r\n\r\ntypedef struct {\r\n  int640m_T re;\r\n  int640m_T im;\r\n} cint640m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[10];\r\n} uint640m_T;\r\n\r\ntypedef struct {\r\n  uint640m_T re;\r\n  uint640m_T im;\r\n} cuint640m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[11];\r\n} int704m_T;\r\n\r\ntypedef struct {\r\n  int704m_T re;\r\n  int704m_T im;\r\n} cint704m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[11];\r\n} uint704m_T;\r\n\r\ntypedef struct {\r\n  uint704m_T re;\r\n  uint704m_T im;\r\n} cuint704m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[12];\r\n} int768m_T;\r\n\r\ntypedef struct {\r\n  int768m_T re;\r\n  int768m_T im;\r\n} cint768m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[12];\r\n} uint768m_T;\r\n\r\ntypedef struct {\r\n  uint768m_T re;\r\n  uint768m_T im;\r\n} cuint768m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[13];\r\n} int832m_T;\r\n\r\ntypedef struct {\r\n  int832m_T re;\r\n  int832m_T im;\r\n} cint832m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[13];\r\n} uint832m_T;\r\n\r\ntypedef struct {\r\n  uint832m_T re;\r\n  uint832m_T im;\r\n} cuint832m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[14];\r\n} int896m_T;\r\n\r\ntypedef struct {\r\n  int896m_T re;\r\n  int896m_T im;\r\n} cint896m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[14];\r\n} uint896m_T;\r\n\r\ntypedef struct {\r\n  uint896m_T re;\r\n  uint896m_T im;\r\n} cuint896m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[15];\r\n} int960m_T;\r\n\r\ntypedef struct {\r\n  int960m_T re;\r\n  int960m_T im;\r\n} cint960m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[15];\r\n} uint960m_T;\r\n\r\ntypedef struct {\r\n  uint960m_T re;\r\n  uint960m_T im;\r\n} cuint960m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[16];\r\n} int1024m_T;\r\n\r\ntypedef struct {\r\n  int1024m_T re;\r\n  int1024m_T im;\r\n} cint1024m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[16];\r\n} uint1024m_T;\r\n\r\ntypedef struct {\r\n  uint1024m_T re;\r\n  uint1024m_T im;\r\n} cuint1024m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[17];\r\n} int1088m_T;\r\n\r\ntypedef struct {\r\n  int1088m_T re;\r\n  int1088m_T im;\r\n} cint1088m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[17];\r\n} uint1088m_T;\r\n\r\ntypedef struct {\r\n  uint1088m_T re;\r\n  uint1088m_T im;\r\n} cuint1088m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[18];\r\n} int1152m_T;\r\n\r\ntypedef struct {\r\n  int1152m_T re;\r\n  int1152m_T im;\r\n} cint1152m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[18];\r\n} uint1152m_T;\r\n\r\ntypedef struct {\r\n  uint1152m_T re;\r\n  uint1152m_T im;\r\n} cuint1152m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[19];\r\n} int1216m_T;\r\n\r\ntypedef struct {\r\n  int1216m_T re;\r\n  int1216m_T im;\r\n} cint1216m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[19];\r\n} uint1216m_T;\r\n\r\ntypedef struct {\r\n  uint1216m_T re;\r\n  uint1216m_T im;\r\n} cuint1216m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[20];\r\n} int1280m_T;\r\n\r\ntypedef struct {\r\n  int1280m_T re;\r\n  int1280m_T im;\r\n} cint1280m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[20];\r\n} uint1280m_T;\r\n\r\ntypedef struct {\r\n  uint1280m_T re;\r\n  uint1280m_T im;\r\n} cuint1280m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[21];\r\n} int1344m_T;\r\n\r\ntypedef struct {\r\n  int1344m_T re;\r\n  int1344m_T im;\r\n} cint1344m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[21];\r\n} uint1344m_T;\r\n\r\ntypedef struct {\r\n  uint1344m_T re;\r\n  uint1344m_T im;\r\n} cuint1344m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[22];\r\n} int1408m_T;\r\n\r\ntypedef struct {\r\n  int1408m_T re;\r\n  int1408m_T im;\r\n} cint1408m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[22];\r\n} uint1408m_T;\r\n\r\ntypedef struct {\r\n  uint1408m_T re;\r\n  uint1408m_T im;\r\n} cuint1408m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[23];\r\n} int1472m_T;\r\n\r\ntypedef struct {\r\n  int1472m_T re;\r\n  int1472m_T im;\r\n} cint1472m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[23];\r\n} uint1472m_T;\r\n\r\ntypedef struct {\r\n  uint1472m_T re;\r\n  uint1472m_T im;\r\n} cuint1472m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[24];\r\n} int1536m_T;\r\n\r\ntypedef struct {\r\n  int1536m_T re;\r\n  int1536m_T im;\r\n} cint1536m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[24];\r\n} uint1536m_T;\r\n\r\ntypedef struct {\r\n  uint1536m_T re;\r\n  uint1536m_T im;\r\n} cuint1536m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[25];\r\n} int1600m_T;\r\n\r\ntypedef struct {\r\n  int1600m_T re;\r\n  int1600m_T im;\r\n} cint1600m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[25];\r\n} uint1600m_T;\r\n\r\ntypedef struct {\r\n  uint1600m_T re;\r\n  uint1600m_T im;\r\n} cuint1600m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[26];\r\n} int1664m_T;\r\n\r\ntypedef struct {\r\n  int1664m_T re;\r\n  int1664m_T im;\r\n} cint1664m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[26];\r\n} uint1664m_T;\r\n\r\ntypedef struct {\r\n  uint1664m_T re;\r\n  uint1664m_T im;\r\n} cuint1664m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[27];\r\n} int1728m_T;\r\n\r\ntypedef struct {\r\n  int1728m_T re;\r\n  int1728m_T im;\r\n} cint1728m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[27];\r\n} uint1728m_T;\r\n\r\ntypedef struct {\r\n  uint1728m_T re;\r\n  uint1728m_T im;\r\n} cuint1728m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[28];\r\n} int1792m_T;\r\n\r\ntypedef struct {\r\n  int1792m_T re;\r\n  int1792m_T im;\r\n} cint1792m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[28];\r\n} uint1792m_T;\r\n\r\ntypedef struct {\r\n  uint1792m_T re;\r\n  uint1792m_T im;\r\n} cuint1792m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[29];\r\n} int1856m_T;\r\n\r\ntypedef struct {\r\n  int1856m_T re;\r\n  int1856m_T im;\r\n} cint1856m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[29];\r\n} uint1856m_T;\r\n\r\ntypedef struct {\r\n  uint1856m_T re;\r\n  uint1856m_T im;\r\n} cuint1856m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[30];\r\n} int1920m_T;\r\n\r\ntypedef struct {\r\n  int1920m_T re;\r\n  int1920m_T im;\r\n} cint1920m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[30];\r\n} uint1920m_T;\r\n\r\ntypedef struct {\r\n  uint1920m_T re;\r\n  uint1920m_T im;\r\n} cuint1920m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[31];\r\n} int1984m_T;\r\n\r\ntypedef struct {\r\n  int1984m_T re;\r\n  int1984m_T im;\r\n} cint1984m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[31];\r\n} uint1984m_T;\r\n\r\ntypedef struct {\r\n  uint1984m_T re;\r\n  uint1984m_T im;\r\n} cuint1984m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[32];\r\n} int2048m_T;\r\n\r\ntypedef struct {\r\n  int2048m_T re;\r\n  int2048m_T im;\r\n} cint2048m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[32];\r\n} uint2048m_T;\r\n\r\ntypedef struct {\r\n  uint2048m_T re;\r\n  uint2048m_T im;\r\n} cuint2048m_T;\r\n\r\n#endif                                 /* MULTIWORD_TYPES_H */\r\n"},{"name":"rtGetInf.c","type":"source","group":"utility","path":"C:\\Users\\yoshi\\hydroplane.us\\Hydroplane Team - Documents\\Engineering\\Demonstration System\\Command, Control, and Comm\\IO Hardware Manuals\\raspberrypi_CAN_transmit_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * rtGetInf.c\r\n *\r\n * Code generation for model \"raspberrypi_CAN_transmit\".\r\n *\r\n * Model version              : 7.6\r\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\r\n * C source code generated on : Wed Jul 26 11:17:43 2023\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objective: Debugging\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"rtwtypes.h\"\r\n#include \"rtGetInf.h\"\r\n#include <stddef.h>\r\n#include \"rt_nonfinite.h\"\r\n#define NumBitsPerChar                 8U\r\n\r\n/*\r\n * Initialize rtInf needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal_T rtGetInf(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T inf = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    inf = rtGetInfF();\r\n  } else {\r\n    uint16_T one = 1U;\r\n    enum {\r\n      LittleEndian,\r\n      BigEndian\r\n    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;\r\n    switch (machByteOrder) {\r\n     case LittleEndian:\r\n      {\r\n        union {\r\n          LittleEndianIEEEDouble bitVal;\r\n          real_T fltVal;\r\n        } tmpVal;\r\n\r\n        tmpVal.bitVal.words.wordH = 0x7FF00000U;\r\n        tmpVal.bitVal.words.wordL = 0x00000000U;\r\n        inf = tmpVal.fltVal;\r\n        break;\r\n      }\r\n\r\n     case BigEndian:\r\n      {\r\n        union {\r\n          BigEndianIEEEDouble bitVal;\r\n          real_T fltVal;\r\n        } tmpVal;\r\n\r\n        tmpVal.bitVal.words.wordH = 0x7FF00000U;\r\n        tmpVal.bitVal.words.wordL = 0x00000000U;\r\n        inf = tmpVal.fltVal;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  return inf;\r\n}\r\n\r\n/*\r\n * Initialize rtInfF needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal32_T rtGetInfF(void)\r\n{\r\n  IEEESingle infF;\r\n  infF.wordL.wordLuint = 0x7F800000U;\r\n  return infF.wordL.wordLreal;\r\n}\r\n\r\n/*\r\n * Initialize rtMinusInf needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal_T rtGetMinusInf(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T minf = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    minf = rtGetMinusInfF();\r\n  } else {\r\n    uint16_T one = 1U;\r\n    enum {\r\n      LittleEndian,\r\n      BigEndian\r\n    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;\r\n    switch (machByteOrder) {\r\n     case LittleEndian:\r\n      {\r\n        union {\r\n          LittleEndianIEEEDouble bitVal;\r\n          real_T fltVal;\r\n        } tmpVal;\r\n\r\n        tmpVal.bitVal.words.wordH = 0xFFF00000U;\r\n        tmpVal.bitVal.words.wordL = 0x00000000U;\r\n        minf = tmpVal.fltVal;\r\n        break;\r\n      }\r\n\r\n     case BigEndian:\r\n      {\r\n        union {\r\n          BigEndianIEEEDouble bitVal;\r\n          real_T fltVal;\r\n        } tmpVal;\r\n\r\n        tmpVal.bitVal.words.wordH = 0xFFF00000U;\r\n        tmpVal.bitVal.words.wordL = 0x00000000U;\r\n        minf = tmpVal.fltVal;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  return minf;\r\n}\r\n\r\n/*\r\n * Initialize rtMinusInfF needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal32_T rtGetMinusInfF(void)\r\n{\r\n  IEEESingle minfF;\r\n  minfF.wordL.wordLuint = 0xFF800000U;\r\n  return minfF.wordL.wordLreal;\r\n}\r\n"},{"name":"rtGetInf.h","type":"header","group":"utility","path":"C:\\Users\\yoshi\\hydroplane.us\\Hydroplane Team - Documents\\Engineering\\Demonstration System\\Command, Control, and Comm\\IO Hardware Manuals\\raspberrypi_CAN_transmit_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * rtGetInf.h\r\n *\r\n * Code generation for model \"raspberrypi_CAN_transmit\".\r\n *\r\n * Model version              : 7.6\r\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\r\n * C source code generated on : Wed Jul 26 11:17:43 2023\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objective: Debugging\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_rtGetInf_h_\r\n#define RTW_HEADER_rtGetInf_h_\r\n#include \"rt_nonfinite.h\"\r\n#include \"rtwtypes.h\"\r\n\r\nextern real_T rtGetInf(void);\r\nextern real32_T rtGetInfF(void);\r\nextern real_T rtGetMinusInf(void);\r\nextern real32_T rtGetMinusInfF(void);\r\n\r\n#endif                                 /* RTW_HEADER_rtGetInf_h_ */\r\n"},{"name":"rtGetNaN.c","type":"source","group":"utility","path":"C:\\Users\\yoshi\\hydroplane.us\\Hydroplane Team - Documents\\Engineering\\Demonstration System\\Command, Control, and Comm\\IO Hardware Manuals\\raspberrypi_CAN_transmit_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * rtGetNaN.c\r\n *\r\n * Code generation for model \"raspberrypi_CAN_transmit\".\r\n *\r\n * Model version              : 7.6\r\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\r\n * C source code generated on : Wed Jul 26 11:17:43 2023\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objective: Debugging\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"rtwtypes.h\"\r\n#include \"rtGetNaN.h\"\r\n#include <stddef.h>\r\n#include \"rt_nonfinite.h\"\r\n#define NumBitsPerChar                 8U\r\n\r\n/*\r\n * Initialize rtNaN needed by the generated code.\r\n * NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal_T rtGetNaN(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T nan = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    nan = rtGetNaNF();\r\n  } else {\r\n    uint16_T one = 1U;\r\n    enum {\r\n      LittleEndian,\r\n      BigEndian\r\n    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;\r\n    switch (machByteOrder) {\r\n     case LittleEndian:\r\n      {\r\n        union {\r\n          LittleEndianIEEEDouble bitVal;\r\n          real_T fltVal;\r\n        } tmpVal;\r\n\r\n        tmpVal.bitVal.words.wordH = 0xFFF80000U;\r\n        tmpVal.bitVal.words.wordL = 0x00000000U;\r\n        nan = tmpVal.fltVal;\r\n        break;\r\n      }\r\n\r\n     case BigEndian:\r\n      {\r\n        union {\r\n          BigEndianIEEEDouble bitVal;\r\n          real_T fltVal;\r\n        } tmpVal;\r\n\r\n        tmpVal.bitVal.words.wordH = 0x7FFFFFFFU;\r\n        tmpVal.bitVal.words.wordL = 0xFFFFFFFFU;\r\n        nan = tmpVal.fltVal;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  return nan;\r\n}\r\n\r\n/*\r\n * Initialize rtNaNF needed by the generated code.\r\n * NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal32_T rtGetNaNF(void)\r\n{\r\n  IEEESingle nanF = { { 0.0F } };\r\n\r\n  uint16_T one = 1U;\r\n  enum {\r\n    LittleEndian,\r\n    BigEndian\r\n  } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;\r\n  switch (machByteOrder) {\r\n   case LittleEndian:\r\n    {\r\n      nanF.wordL.wordLuint = 0xFFC00000U;\r\n      break;\r\n    }\r\n\r\n   case BigEndian:\r\n    {\r\n      nanF.wordL.wordLuint = 0x7FFFFFFFU;\r\n      break;\r\n    }\r\n  }\r\n\r\n  return nanF.wordL.wordLreal;\r\n}\r\n"},{"name":"rtGetNaN.h","type":"header","group":"utility","path":"C:\\Users\\yoshi\\hydroplane.us\\Hydroplane Team - Documents\\Engineering\\Demonstration System\\Command, Control, and Comm\\IO Hardware Manuals\\raspberrypi_CAN_transmit_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * rtGetNaN.h\r\n *\r\n * Code generation for model \"raspberrypi_CAN_transmit\".\r\n *\r\n * Model version              : 7.6\r\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\r\n * C source code generated on : Wed Jul 26 11:17:43 2023\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objective: Debugging\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_rtGetNaN_h_\r\n#define RTW_HEADER_rtGetNaN_h_\r\n#include \"rt_nonfinite.h\"\r\n#include \"rtwtypes.h\"\r\n\r\nextern real_T rtGetNaN(void);\r\nextern real32_T rtGetNaNF(void);\r\n\r\n#endif                                 /* RTW_HEADER_rtGetNaN_h_ */\r\n"},{"name":"rt_nonfinite.c","type":"source","group":"utility","path":"C:\\Users\\yoshi\\hydroplane.us\\Hydroplane Team - Documents\\Engineering\\Demonstration System\\Command, Control, and Comm\\IO Hardware Manuals\\raspberrypi_CAN_transmit_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * rt_nonfinite.c\r\n *\r\n * Code generation for model \"raspberrypi_CAN_transmit\".\r\n *\r\n * Model version              : 7.6\r\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\r\n * C source code generated on : Wed Jul 26 11:17:43 2023\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objective: Debugging\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"rtGetNaN.h\"\r\n#include \"rtGetInf.h\"\r\n#include <stddef.h>\r\n#include \"rtwtypes.h\"\r\n#include \"rt_nonfinite.h\"\r\n#define NumBitsPerChar                 8U\r\n\r\nreal_T rtInf;\r\nreal_T rtMinusInf;\r\nreal_T rtNaN;\r\nreal32_T rtInfF;\r\nreal32_T rtMinusInfF;\r\nreal32_T rtNaNF;\r\n\r\n/*\r\n * Initialize the rtInf, rtMinusInf, and rtNaN needed by the\r\n * generated code. NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nvoid rt_InitInfAndNaN(size_t realSize)\r\n{\r\n  (void) (realSize);\r\n  rtNaN = rtGetNaN();\r\n  rtNaNF = rtGetNaNF();\r\n  rtInf = rtGetInf();\r\n  rtInfF = rtGetInfF();\r\n  rtMinusInf = rtGetMinusInf();\r\n  rtMinusInfF = rtGetMinusInfF();\r\n}\r\n\r\n/* Test if value is infinite */\r\nboolean_T rtIsInf(real_T value)\r\n{\r\n  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);\r\n}\r\n\r\n/* Test if single-precision value is infinite */\r\nboolean_T rtIsInfF(real32_T value)\r\n{\r\n  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);\r\n}\r\n\r\n/* Test if value is not a number */\r\nboolean_T rtIsNaN(real_T value)\r\n{\r\n  boolean_T result = (boolean_T) 0;\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  if (bitsPerReal == 32U) {\r\n    result = rtIsNaNF((real32_T)value);\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.fltVal = value;\r\n    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&\r\n                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||\r\n                          (tmpVal.bitVal.words.wordL != 0) ));\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/* Test if single-precision value is not a number */\r\nboolean_T rtIsNaNF(real32_T value)\r\n{\r\n  IEEESingle tmp;\r\n  tmp.wordL.wordLreal = value;\r\n  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&\r\n                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );\r\n}\r\n"},{"name":"rt_nonfinite.h","type":"header","group":"utility","path":"C:\\Users\\yoshi\\hydroplane.us\\Hydroplane Team - Documents\\Engineering\\Demonstration System\\Command, Control, and Comm\\IO Hardware Manuals\\raspberrypi_CAN_transmit_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * rt_nonfinite.h\r\n *\r\n * Code generation for model \"raspberrypi_CAN_transmit\".\r\n *\r\n * Model version              : 7.6\r\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\r\n * C source code generated on : Wed Jul 26 11:17:43 2023\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objective: Debugging\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_rt_nonfinite_h_\r\n#define RTW_HEADER_rt_nonfinite_h_\r\n#include <stddef.h>\r\n#include \"rtwtypes.h\"\r\n#define NOT_USING_NONFINITE_LITERALS   1\r\n\r\nextern real_T rtInf;\r\nextern real_T rtMinusInf;\r\nextern real_T rtNaN;\r\nextern real32_T rtInfF;\r\nextern real32_T rtMinusInfF;\r\nextern real32_T rtNaNF;\r\nextern void rt_InitInfAndNaN(size_t realSize);\r\nextern boolean_T rtIsInf(real_T value);\r\nextern boolean_T rtIsInfF(real32_T value);\r\nextern boolean_T rtIsNaN(real_T value);\r\nextern boolean_T rtIsNaNF(real32_T value);\r\ntypedef struct {\r\n  struct {\r\n    uint32_T wordH;\r\n    uint32_T wordL;\r\n  } words;\r\n} BigEndianIEEEDouble;\r\n\r\ntypedef struct {\r\n  struct {\r\n    uint32_T wordL;\r\n    uint32_T wordH;\r\n  } words;\r\n} LittleEndianIEEEDouble;\r\n\r\ntypedef struct {\r\n  union {\r\n    real32_T wordLreal;\r\n    uint32_T wordLuint;\r\n  } wordL;\r\n} IEEESingle;\r\n\r\n#endif                                 /* RTW_HEADER_rt_nonfinite_h_ */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"C:\\Users\\yoshi\\hydroplane.us\\Hydroplane Team - Documents\\Engineering\\Demonstration System\\Command, Control, and Comm\\IO Hardware Manuals\\raspberrypi_CAN_transmit_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * rtwtypes.h\r\n *\r\n * Code generation for model \"raspberrypi_CAN_transmit\".\r\n *\r\n * Model version              : 7.6\r\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\r\n * C source code generated on : Wed Jul 26 11:17:43 2023\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objective: Debugging\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n#include \"tmwtypes.h\"\r\n#ifndef POINTER_T\r\n#define POINTER_T\r\n\r\ntypedef void * pointer_T;\r\n\r\n#endif\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n#ifndef INT64_T\r\n#define INT64_T\r\n\r\ntypedef long long int64_T;\r\n\r\n#define MAX_int64_T                    ((int64_T)(9223372036854775807LL))\r\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807LL-1LL))\r\n#endif\r\n\r\n#ifndef UINT64_T\r\n#define UINT64_T\r\n\r\ntypedef unsigned long long uint64_T;\r\n\r\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFULL))\r\n#endif\r\n\r\n/*===========================================================================*\r\n * Additional complex number type definitions                                           *\r\n *===========================================================================*/\r\n#ifndef CINT64_T\r\n#define CINT64_T\r\n\r\ntypedef struct {\r\n  int64_T re;\r\n  int64_T im;\r\n} cint64_T;\r\n\r\n#endif\r\n\r\n#ifndef CUINT64_T\r\n#define CUINT64_T\r\n\r\ntypedef struct {\r\n  uint64_T re;\r\n  uint64_T im;\r\n} cuint64_T;\r\n\r\n#endif\r\n#endif                                 /* RTWTYPES_H */\r\n"},{"name":"rtmodel.h","type":"header","group":"interface","path":"C:\\Users\\yoshi\\hydroplane.us\\Hydroplane Team - Documents\\Engineering\\Demonstration System\\Command, Control, and Comm\\IO Hardware Manuals\\raspberrypi_CAN_transmit_grt_rtw","tag":"","groupDisplay":"Interface files","code":"/*\r\n *  rtmodel.h:\r\n *\r\n * Code generation for model \"raspberrypi_CAN_transmit\".\r\n *\r\n * Model version              : 7.6\r\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\r\n * C source code generated on : Wed Jul 26 11:17:43 2023\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objective: Debugging\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_rtmodel_h_\r\n#define RTW_HEADER_rtmodel_h_\r\n#include \"raspberrypi_CAN_transmit.h\"\r\n#define GRTINTERFACE                   0\r\n#endif                                 /* RTW_HEADER_rtmodel_h_ */\r\n"},{"name":"MW_SocketCAN.c","type":"source","group":"legacy","path":"C:\\Users\\yoshi\\hydroplane.us\\Hydroplane Team - Documents\\Engineering\\Demonstration System\\Command, Control, and Comm\\IO Hardware Manuals\\raspberrypi_CAN_transmit_grt_rtw\\..\\..\\..\\..\\..\\..\\..\\..\\..\\ProgramData\\MATLAB\\SupportPackages\\R2023a\\toolbox\\realtime\\targets\\linux\\src","tag":"","groupDisplay":"Other files","code":"/* Copyright 2021 The MathWorks, Inc. */\n/* MW_SocketCAN.c*/\n\n#include \"MW_SocketCAN.h\"\n\n#if !( defined(MATLAB_MEX_FILE) || defined(RSIM_PARAMETER_LOADING) ||  defined(RSIM_WITH_SL_SOLVER) )\n// Code generation\n\n#define MW_STR_EXPAND(tok) #tok\n#define MW_STR(tok) MW_STR_EXPAND(tok)\n#define MW_MAX_SIZE 1000\n#define INT(x) (x)\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h> // For read/write data using Berkeley Sockets\n#include <sys/ioctl.h>\n#include <net/if.h> // For ifreq, ifname, etc\n#include <linux/socket.h> // For PF_CAN Sockets\n#include <linux/can.h> // For CAN structures\n#include <linux/can/error.h> // CAN Error Handling\n#include <linux/can/raw.h> // CAN Raw Sockets\n#include <assert.h> // For asserting error\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n#include <ifaddrs.h>\n#include <sys/types.h>\n\n/*Setup IP Link Functions*/\nvoid MW_executeCommand(char_T* cmd){\n    system(cmd);\n}\n\nvoid MW_printError(char_T* errString){\n    fprintf(stderr,errString);\n}\n\nint32_T MW_bitrate(char_T* bitRate){\n    #ifdef MW_CAN_BITRATE\n    sprintf(bitRate,MW_STR(MW_CAN_BITRATE));\n    return strlen(bitRate);\n    #else\n    return 0;\n    #endif\n}\n\nvoid MW_setupCANLink(char_T* cmd,const uint8_T isRealCAN){\n    MW_executeCommand(cmd);\n}\n\nint32_T MW_checkIFStatus(char_T* canInterface){\n    struct ifaddrs *ifaddr, *ifa;\n    int n,ifExists=0,isUP=0;\n    if (getifaddrs(&ifaddr) == -1) {\n        perror(\"getifaddrs\");\n        exit(EXIT_FAILURE);\n    }\n\n    for (ifa = ifaddr, n = 0; ifa != NULL; ifa = ifa->ifa_next, n++) \n    {\n        int isCAN = !strcmp(ifa->ifa_name,canInterface);\n        if(isCAN)\n        {\n            ifExists=1;\n            isUP = ifa->ifa_flags & IFF_UP;\n            break;\n        }\n    }\n\n    freeifaddrs(ifaddr);\n\n    if(!ifExists)\n    {\n        return (int32_T)MW_CAN_NOIF;\n    }\n    else if(!isUP)\n    {\n        return (int32_T)MW_CAN_NOTUP;\n    }\n    return (int32_T)MW_CAN_UP;\n}\n\n/* Setup Socket Functions */\nint32_T MW_createSocket(char_T* canInterface, int32_T* sockHandle){\n    struct ifreq ifr;\n    struct sockaddr_can addr;\n\n    if((*sockHandle = socket(PF_CAN, SOCK_RAW, CAN_RAW)) < 0)\n    {\n        fprintf(stderr,\"Error creating socket for %s.\\n\",canInterface);\n        return (int32_T)MW_SOCK_CREATE_ERROR;\n    }\n\n\n    // Set the CAN Interface\n    assert(strlen(canInterface) < IFNAMSIZ); // To avoid Buffer-Overflow\n    strcpy(ifr.ifr_name, canInterface);\n\n    if((ioctl(*sockHandle, SIOCGIFINDEX, &ifr))!=0)\n    {\n        fprintf(stderr,\"Error setting socket interface for %s.\\n\",canInterface);\n        return (int32_T)MW_SOCK_IOCTL_ERROR;\n    }\n\n    // CAN Interface\n    addr.can_family  = AF_CAN;\n    addr.can_ifindex = ifr.ifr_ifindex;\n\n    if((bind(*sockHandle, (struct sockaddr *)&addr, sizeof(addr))) < 0)\n    {\n        fprintf(stderr,\"Error binding the socket for %s.\\n\",canInterface);\n        return (int32_T)MW_SOCK_BIND_ERROR;\n    }\n\n    return (int32_T)MW_SOCK_STATUS_OK;\n}\n\n/* Cleanup Functions */\nint32_T MW_clearSocket(int32_T* sockHandle, char_T* canInterface)\n{\n    if(close(*sockHandle) < 0)\n    {\n        fprintf(stderr,\"Error closing the socket for %s.\\n\",canInterface);\n        return (int32_T)MW_SOCK_CLOSE_ERROR;\n    }\n\n    return (int32_T)MW_SOCK_STATUS_OK;\n}\n\n\n/* Blocking mode */\ndouble MW_getTimeNow()\n{\n    struct timeval timeNow;\n    double timeInSeconds;\n\n    if(gettimeofday(&timeNow,NULL)==-1)\n    {\n        fprintf(stderr,\"Error in gettimeofday\\n\");\n        return -1;\n    }\n    else\n    {\n        timeInSeconds = timeNow.tv_sec + (timeNow.tv_usec/1000000.0);\n\n        return timeInSeconds;\n    }\n}\n\n/*Transmit Raw Data MATLAB I/O workflow*/\nint32_T MW_CAN_transmitRaw_MATLABIO(const uint32_T identifier,\n                                    const uint8_T idType,\n                                    const uint8_T length,\n                                    const uint8_T* data,\n                                    const char* canInterface)\n{\n    /*----------------------- Initializations -------------------------------*/\n    // Common Variables\n    int s,i;\n    struct sockaddr_can addr;\n    struct can_frame frame;\n    struct ifreq ifr;\n    ssize_t nbytes;\n\n    /*---------------------  Transmit data Frames ---------------------------*/\n    // Create transmit socket\n    if((s = socket(PF_CAN, SOCK_RAW, CAN_RAW)) < 0) {\n        return -1;\n    }\n\n    // Set CAN Interface\n    assert(strlen(canInterface) < IFNAMSIZ); // To avoid Buffer-Overflow\n    strcpy(ifr.ifr_name, canInterface);\n    if(ioctl(s, SIOCGIFINDEX, &ifr))\n        return -1;\n    addr.can_family  = AF_CAN;\n    addr.can_ifindex = ifr.ifr_ifindex;\n    if(bind(s, (struct sockaddr *)&addr, sizeof(addr)) < 0) {\n        return -1;\n    }\n\n    // Set the CAN ID, Length and data of the message\n    if(!idType)\n    {\n        // Extended Frame Format\n        frame.can_id  = identifier + CAN_EFF_FLAG;\n    }\n    else\n    {\n        // Standard Frame Format\n        frame.can_id  = identifier;\n    }\n    frame.can_dlc = length;\n    memcpy(frame.data, data, frame.can_dlc * sizeof(uint8_T));\n\n    // Perform write operation and check for issues\n    nbytes = write(s, &frame, sizeof(struct can_frame));\n    if(nbytes==-1)\n        return -1;\n\n    /*---------------------------- Cleanup ------------------------------*/\n    if (close(s) < 0) {\n        return -1;\n    }\n    return 0;\n}\n\n\n/*Transmit Raw Data as a CAN Frame into CAN Bus*/\nint32_T MW_CAN_transmitRaw(const char* canInterface,\n                           const uint8_T idType,\n                           const uint32_T ID,\n                           const uint8_T Length,\n                           uint8_T* data,\n                           const uint8_T rtr,\n                           uint8_T *status,\n                           const uint8_T isblocking,\n                           const double blockTimeout, \n                           int32_T sockHandleDataFrames, \n                           int32_T sockHandleErrorFrames, \n                           const uint8_T notFirstStep)\n{\n    /*----------------------- Initializations -------------------------------*/\n    // Common Variables\n    int i,s_recvErrors=0,recv_own_msgs,iMode=1;\n    struct can_frame frame,frdup,frame_recv;\n    int errCode = 0;\n    struct can_filter rfilter_errorFrames[1];\n    ssize_t nbytes;\n    struct timeval timeout;\n    timeout.tv_sec = 0;\n    timeout.tv_usec = 1;\n    \n    double startTime,endTime;\n    struct iovec iov;\n    struct msghdr msg;\n    char ctrlmsg[CMSG_SPACE(sizeof(struct timeval) + 3 * sizeof(struct timespec) + sizeof(__u32))];\n\n    struct sockaddr_can addr1;\n    struct ifreq ifr1;\n    strcpy(ifr1.ifr_name, canInterface);\n\n    memset(&addr1, 0, sizeof(addr1));\n    addr1.can_family = AF_CAN;\n    addr1.can_ifindex = ifr1.ifr_ifindex;\n\n    /*---------------------  Transmit data Frames ---------------------------*/\n\n    // Set the CAN ID, Length and data of the message\n    if(!idType)\n    {\n        // Extended Frame Format\n        if(rtr==0) // data Frame Request\n        {\n            frame.can_id  = ID + CAN_EFF_FLAG;\n        }\n        else // Remote Frame Request\n        {\n            frame.can_id  = ID + CAN_EFF_FLAG + CAN_RTR_FLAG;\n        }\n    }\n    else\n    {\n        // Standard Frame Format\n        if(rtr==0) // data Frame Request\n        {\n            frame.can_id  = ID;\n        }\n        else // Remote Frame Request\n        {\n            frame.can_id  = ID + CAN_RTR_FLAG;\n        }\n    }\n    frame.can_dlc = Length;\n    memcpy(frame.data, data, frame.can_dlc * sizeof(uint8_T));\n\n    recv_own_msgs = 1;\n    setsockopt(sockHandleDataFrames, SOL_CAN_RAW, CAN_RAW_RECV_OWN_MSGS,\n               &recv_own_msgs, sizeof(recv_own_msgs));\n    iov.iov_base = &frame_recv;\n    msg.msg_name = &addr1;\n    msg.msg_iov = &iov;\n    msg.msg_iovlen = 1;\n    msg.msg_control = &ctrlmsg;\n\n    iov.iov_len = sizeof(frame_recv);\n    msg.msg_namelen = sizeof(addr1);\n    msg.msg_controllen = sizeof(ctrlmsg);\n    msg.msg_flags = 0;\n\n\n    *status = 0;\n    \n    // Set Non-blocking Mode in Socket\n    ioctl(sockHandleDataFrames, FIONBIO, &iMode);\n\n    if(isblocking==1 && notFirstStep==1) // Only block from second time step\n    {\n        // Wait Until Data Sent\n        startTime = MW_getTimeNow();\n        endTime = MW_getTimeNow();\n        while(endTime-startTime < blockTimeout)\n        {\n            nbytes = recvmsg(sockHandleDataFrames, &msg, 0);\n            if ((msg.msg_flags & MSG_CONFIRM)==MSG_CONFIRM)\n            {\n                break;\n            }\n            endTime = MW_getTimeNow();\n        }\n        nbytes = write(sockHandleDataFrames, &frame, sizeof(struct can_frame));\n    }\n    else\n    {\n        // Transmit irrespective of the status of previous transmission\n        nbytes = write(sockHandleDataFrames, &frame, sizeof(struct can_frame));\n    }\n\n    /*---------------------  Output Status of the Transmission --------------*/\n\n\n    // Allow only error frames and filter out the data frames\n    rfilter_errorFrames[0].can_id = CAN_ERR_FLAG;\n    rfilter_errorFrames[0].can_mask = ~CAN_ERR_MASK;\n    if(setsockopt(sockHandleErrorFrames, SOL_CAN_RAW, CAN_RAW_FILTER, &rfilter_errorFrames, sizeof(rfilter_errorFrames))==-1)\n    {\n        fprintf(stderr,\"Error setting the socket filter for %s.\\n\",canInterface);\n        return MW_SOCK_SETSOCKOPT_FILTER_ERROR;\n    }\n\n\n    // Error Mask for fetching error frames\n    can_err_mask_t err_mask = CAN_ERR_MASK;\n    if(setsockopt(sockHandleErrorFrames, SOL_CAN_RAW, CAN_RAW_ERR_FILTER, &err_mask, sizeof(err_mask))==-1)\n    {\n        fprintf(stderr,\"Error setting the socket error mask for %s.\\n\",canInterface);\n        return MW_SOCK_SETSOCKOPT_ERRMASK_ERROR;\n    }\n\n    // Set Non-blocking Mode in Socket\n    ioctl(sockHandleErrorFrames, FIONBIO, &iMode);\n\n    // Read Error Frames\n    if(read(sockHandleErrorFrames, &frdup, sizeof(frdup)) != -1)\n    {\n        if (frdup.data[1] & CAN_ERR_CRTL_TX_WARNING == CAN_ERR_CRTL_TX_WARNING)\n        {\n            *status += 1<<TXWAR; // TXWAR bit\n        }\n        if (frdup.data[1] & CAN_ERR_CRTL_TX_PASSIVE == CAN_ERR_CRTL_TX_PASSIVE)\n        {\n            *status += 1<<TXEP; // TXEP bit\n        }\n        if (frdup.can_id & CAN_ERR_BUSOFF == CAN_ERR_BUSOFF) {\n            *status += 1<<TXBO; // TXBO bit\n        }\n        if (frdup.data[1] & CAN_ERR_PROT_TX == CAN_ERR_PROT_TX)\n        {\n            *status += 1<<TXERR; // TXERR bit\n        }\n        if (frdup.can_id & CAN_ERR_LOSTARB == CAN_ERR_LOSTARB) {\n            *status += 1<<MLOA; // MLOA bit\n        }\n    }\n    return MW_SOCK_STATUS_OK;\n}\n\n/*Transmit CAN Msg structure as a CAN Frame into CAN Bus*/\nint32_T MW_CAN_transmitCANMsg(const char* canInterface,\n                              uint8_T idType,\n                              uint32_T ID,\n                              uint8_T Length,\n                              uint8_T* data,\n                              const uint8_T rtr,\n                              uint8_T* status,\n                              const uint8_T isblocking,\n                              const double blockTimeout,\n                              int32_T sockHandleDataFrames, \n                              int32_T sockHandleErrorFrames, \n                              const uint8_T notFirstStep)\n{\n    /*----------------------- Initializations ---------------------------*/\n    // Common Variables\n    int i,recv_own_msgs=0,iMode=1;\n    struct can_frame frame,frdup,frame_recv;\n    struct can_filter rfilter_errorFrames[1];\n    ssize_t nbytes;\n    struct timeval timeout;\n    timeout.tv_sec = 0;\n    timeout.tv_usec = 100;\n\n    double startTime,endTime;\n    struct iovec iov;\n    struct msghdr msg;\n    char ctrlmsg[CMSG_SPACE(sizeof(struct timeval) + 3 * sizeof(struct timespec) + sizeof(__u32))];\n\n    struct sockaddr_can addr1;\n    struct ifreq ifr1;\n    strcpy(ifr1.ifr_name, canInterface);\n\n    memset(&addr1, 0, sizeof(addr1));\n    addr1.can_family = AF_CAN;\n    addr1.can_ifindex = ifr1.ifr_ifindex;\n\n    /*---------------------  Transmit Data Frames ---------------------------*/\n\n    // Set the CAN ID, Length and Data of the message\n    if(!idType)\n    {\n        // Extended Frame Format\n        if(rtr==0) // Data Frame Request\n        {\n            frame.can_id  = ID + CAN_EFF_FLAG;\n        }\n        else // Remote Frame Request\n        {\n            frame.can_id  = ID + CAN_EFF_FLAG + CAN_RTR_FLAG;\n        }\n    }\n    else\n    {\n        // Standard Frame Format\n        if(rtr==0) // Data Frame Request\n        {\n            frame.can_id  = ID;\n        }\n        else // Remote Frame Request\n        {\n            frame.can_id  = ID + CAN_RTR_FLAG;\n        }\n    }\n    frame.can_dlc = Length;\n    memcpy(frame.data, data, frame.can_dlc*sizeof(uint8_T));\n\n    recv_own_msgs = 1;\n    setsockopt(sockHandleDataFrames, SOL_CAN_RAW, CAN_RAW_RECV_OWN_MSGS,\n               &recv_own_msgs, sizeof(recv_own_msgs));\n    iov.iov_base = &frame_recv;\n    msg.msg_name = &addr1;\n    msg.msg_iov = &iov;\n    msg.msg_iovlen = 1;\n    msg.msg_control = &ctrlmsg;\n\n    iov.iov_len = sizeof(frame_recv);\n    msg.msg_namelen = sizeof(addr1);\n    msg.msg_controllen = sizeof(ctrlmsg);\n    msg.msg_flags = 0;\n    \n    // Set Non-blocking Mode in Socket\n    ioctl(sockHandleDataFrames, FIONBIO, &iMode);\n\n    *status = 0;\n    if(isblocking==1 && notFirstStep==1) // Only block from second time step\n    {\n        // Wait Until Data Sent\n        startTime = MW_getTimeNow();\n        endTime = MW_getTimeNow();\n        while(endTime-startTime < blockTimeout)\n        {\n            nbytes = recvmsg(sockHandleDataFrames, &msg, 0);\n            if ((msg.msg_flags & MSG_CONFIRM)==MSG_CONFIRM)\n            {\n                break;\n            }\n            endTime = MW_getTimeNow();\n        }\n        nbytes = write(sockHandleDataFrames, &frame, sizeof(struct can_frame));\n    }\n    else\n    {\n        // Transmit irrespective of the status of previous transmission\n        nbytes = write(sockHandleDataFrames, &frame, sizeof(struct can_frame));\n    }\n\n    /*----------------------- Output Status of the Transmission -------------*/\n\n\n    // Filter out the data frames\n    rfilter_errorFrames[0].can_id = CAN_ERR_FLAG;\n    rfilter_errorFrames[0].can_mask = ~CAN_ERR_MASK;\n    if(setsockopt(sockHandleErrorFrames, SOL_CAN_RAW, CAN_RAW_FILTER, &rfilter_errorFrames, sizeof(rfilter_errorFrames))==-1)\n    {\n        fprintf(stderr,\"Error setting the socket filter for %s.\\n\",canInterface);\n        return MW_SOCK_SETSOCKOPT_FILTER_ERROR;\n    }\n\n    // Set Error Mask\n    can_err_mask_t err_mask = CAN_ERR_MASK;\n    if(setsockopt(sockHandleErrorFrames, SOL_CAN_RAW, CAN_RAW_ERR_FILTER, &err_mask, sizeof(err_mask))==-1)\n    {\n        fprintf(stderr,\"Error setting the socket error mask for %s.\\n\",canInterface);\n        return MW_SOCK_SETSOCKOPT_ERRMASK_ERROR;\n    }\n\n    // Set Non-blocking Mode in Socket\n    ioctl(sockHandleErrorFrames, FIONBIO, &iMode);\n\n    // Read Error Frames\n    if(read(sockHandleErrorFrames, &frdup, sizeof(frdup))!=-1)\n    {\n        if (frdup.data[1] & CAN_ERR_CRTL_TX_WARNING == CAN_ERR_CRTL_TX_WARNING)\n        {\n            *status += 1<<TXWAR; // TXWAR bit\n        }\n        if (frdup.data[1] & CAN_ERR_CRTL_TX_PASSIVE == CAN_ERR_CRTL_TX_PASSIVE)\n        {\n            *status += 1<<TXEP; // TXEP bit\n        }\n        if (frdup.can_id & CAN_ERR_BUSOFF == CAN_ERR_BUSOFF) {\n            *status += 1<<TXBO; // TXBO bit\n        }\n        if (frdup.data[1] & CAN_ERR_PROT_TX == CAN_ERR_PROT_TX)\n        {\n            *status += 1<<TXERR; // TXERR bit\n        }\n        if (frdup.can_id & CAN_ERR_LOSTARB == CAN_ERR_LOSTARB) {\n            *status += 1<<MLOA; // MLOA bit\n        }\n    }\n\n    return MW_SOCK_STATUS_OK;\n}\n\n/*Receive for MATLAB I/O*/\nint32_T MW_CAN_receiveRawMATLAB(const uint32_T numMessages,\n                                const char_T* canInterface, uint8_T* data)\n{\n    // Initialization\n    int s,i;\n    ssize_t nbytes;\n    int status;\n    struct sockaddr_can addr;\n    struct ifreq ifr;\n    struct can_frame frame[numMessages];\n    uint8_T index;\n    struct can_filter rfilter_allowAllExceptRemoteFrames[1];\n\n    // CAN Filter for MATLAB I/O allows all Messages except Remote Frames\n    rfilter_allowAllExceptRemoteFrames[0].can_id = CAN_RTR_FLAG + CAN_INV_FILTER;\n    rfilter_allowAllExceptRemoteFrames[0].can_mask = CAN_RTR_FLAG;\n\n    // Create Socket\n    if((s = socket(PF_CAN, SOCK_RAW, CAN_RAW)) < 0) {\n        perror(\"socket\");\n        return 1;\n    }\n\n    strcpy(ifr.ifr_name, canInterface);\n\n    if (ioctl(s, SIOCGIFINDEX, &ifr) < 0)\n    {\n        perror(\"SIOCGIFINDEX\");\n        return 1;\n    }\n\n    memset(&addr, 0, sizeof(addr));\n    addr.can_family  = AF_CAN;\n    addr.can_ifindex = ifr.ifr_ifindex;\n\n    if(bind(s, (struct sockaddr *)&addr, sizeof(addr)) < 0) {\n        perror(\"bind error\");\n        return 1;\n    }\n\n    setsockopt(s, SOL_CAN_RAW, CAN_RAW_FILTER, &rfilter_allowAllExceptRemoteFrames, sizeof(rfilter_allowAllExceptRemoteFrames));\n\n    // Fetch Error message\n    can_err_mask_t err_mask = CAN_ERR_MASK;\n    if(setsockopt(s, SOL_CAN_RAW, CAN_RAW_ERR_FILTER, &err_mask, sizeof(err_mask))==-1)\n        return -1;\n\n    // Set timeout to read between successive CAN frames\n    struct timeval timeout;\n    timeout.tv_sec = 1;\n    timeout.tv_usec = 0;\n    if(setsockopt(s, SOL_SOCKET, SO_RCVTIMEO, (char *)&timeout, sizeof(timeout))==-1)\n        return -1;\n\n    for(index=0;index<numMessages;index++)\n    {\n        nbytes = read(s, &frame[index], sizeof(struct can_frame));\n\n        if ((nbytes < 0) || (nbytes < sizeof(struct can_frame)))\n        {\n            perror(\"Read error: either no frame or incomplete frame\");\n            return -1;\n        }\n\n        *(uint32_T *)data = frame[index].can_id;\n        data = data+sizeof(uint32_T);\n\n        *data = (uint8_T)frame[index].can_dlc;\n        data++;\n\n        for (uint8_T i = 0; i < frame[index].can_dlc; i++)\n        {\n            *data = frame[index].data[i];\n            data++;\n        }\n    }\n\n    if (close(s) < 0) {\n        perror(\"SocketClose\");\n        return -1;\n    }\n\n    return 0;\n}\n\n/*Receive a CAN Frame as Raw Data from CAN Bus*/\nint32_T MW_CAN_receiveRawSimulink(const char* canInterface,\n                                  const uint32_T id,\n                                  uint8_T* data,\n                                  const uint8_T dataLength,\n                                  uint8_T* status,\n                                  const uint8_T extended,\n                                  uint8_T* remote, uint8_T* error,\n                                  int32_T sockHandleDataFrames, \n                                  int32_T sockHandleErrorFrames)\n{\n    /*----------------------- Initializations -------------------------------*/\n    // Common Variables\n    int i,recvCriteria1=0,recvCriteria2=0,iMode = 1;\n    ssize_t nbytes;\n    struct sockaddr_can addr1;\n    struct can_frame frame,frameError;\n    struct ifreq ifr1;\n    struct timeval timeout_data;\n    timeout_data.tv_sec = 0;\n    timeout_data.tv_usec = 1;\n\n    struct timeval timeout_error;\n    timeout_error.tv_sec = 0;\n    timeout_error.tv_usec = 1;\n\n    /*----------------------- Output Data Frames ----------------------------*/\n\n    // Set up the filtering environment for the Socket\n    #ifdef MW_CAN_ALLOWALLMSGS\n    if(MW_CAN_ALLOWALLMSGS==1)\n    {\n        // Allow all messages\n        struct can_filter rfilter_allowAll[1];\n        if(extended)\n        {\n            //Extended Frame Format Filter\n            rfilter_allowAll[0].can_id   = id | CAN_EFF_FLAG;\n            rfilter_allowAll[0].can_mask = (CAN_EFF_FLAG |CAN_EFF_MASK);\n        }\n        else\n        {\n            //Standard Frame Format Filter\n            rfilter_allowAll[0].can_id   = id;\n            rfilter_allowAll[0].can_mask = (CAN_EFF_FLAG | CAN_SFF_MASK);\n        }\n        if(setsockopt(sockHandleDataFrames, SOL_CAN_RAW, CAN_RAW_FILTER, &rfilter_allowAll, sizeof(rfilter_allowAll))==-1)\n        {\n            fprintf(stderr,\"Error setting the socket filter for %s.\\n\",canInterface);\n            return MW_SOCK_SETSOCKOPT_FILTER_ERROR;\n        }\n    }\n    else\n    {\n        // Allow Only some Messages\n        struct can_filter rfilter_notAll[4];\n\n        // CAN Filter 1\n        #ifdef MW_CAN_IDTYPE0\n        if(MW_CAN_IDTYPE0==0)\n        {\n            if(MW_CAN_INVFILTER0==1)\n                rfilter_notAll[0].can_id = MW_CAN_ACCEPTANCEFILTER0 + CAN_INV_FILTER;\n            else\n                rfilter_notAll[0].can_id = MW_CAN_ACCEPTANCEFILTER0;\n            rfilter_notAll[0].can_mask = MW_CAN_ACCEPTANCEMASK0 | CAN_EFF_FLAG; \n        }\n        else\n        {\n            if(MW_CAN_INVFILTER0==1)\n                rfilter_notAll[0].can_id   = MW_CAN_ACCEPTANCEFILTER0 | CAN_EFF_FLAG + CAN_INV_FILTER;\n            else\n                rfilter_notAll[0].can_id   = MW_CAN_ACCEPTANCEFILTER0 | CAN_EFF_FLAG;\n            rfilter_notAll[0].can_mask = MW_CAN_ACCEPTANCEMASK0 | CAN_EFF_FLAG; \n        }\n        #endif\n\n        // CAN Filter 2\n        #ifdef MW_CAN_IDTYPE1\n        if(MW_CAN_IDTYPE1==0)\n        {\n            if(MW_CAN_INVFILTER1==1)\n                rfilter_notAll[1].can_id = MW_CAN_ACCEPTANCEFILTER1 + CAN_INV_FILTER;\n            else\n                rfilter_notAll[1].can_id = MW_CAN_ACCEPTANCEFILTER1;\n            rfilter_notAll[1].can_mask = MW_CAN_ACCEPTANCEMASK1 | CAN_EFF_FLAG; \n        }\n        else\n        {\n            if(MW_CAN_INVFILTER1==1)\n                rfilter_notAll[1].can_id   = MW_CAN_ACCEPTANCEFILTER1 | CAN_EFF_FLAG + CAN_INV_FILTER;\n            else\n                rfilter_notAll[1].can_id   = MW_CAN_ACCEPTANCEFILTER1 | CAN_EFF_FLAG;\n            rfilter_notAll[1].can_mask = MW_CAN_ACCEPTANCEMASK1 | CAN_EFF_FLAG; \n        }\n        #endif\n\n        // CAN Filter 3\n        #ifdef MW_CAN_IDTYPE2\n        if(MW_CAN_IDTYPE2==0)\n        {\n            if(MW_CAN_INVFILTER2==1)\n            {\n                rfilter_notAll[2].can_id = MW_CAN_ACCEPTANCEFILTER2 + CAN_INV_FILTER;\n            }\n            else\n                rfilter_notAll[2].can_id = MW_CAN_ACCEPTANCEFILTER2;\n            rfilter_notAll[2].can_mask = MW_CAN_ACCEPTANCEMASK2 | CAN_EFF_FLAG; \n        }\n        else\n        {\n            if(MW_CAN_INVFILTER2==1)\n            {\n                rfilter_notAll[2].can_id   = MW_CAN_ACCEPTANCEFILTER2 | CAN_EFF_FLAG + CAN_INV_FILTER;\n            }\n            else\n                rfilter_notAll[2].can_id   = MW_CAN_ACCEPTANCEFILTER2 | CAN_EFF_FLAG;\n            rfilter_notAll[2].can_mask = MW_CAN_ACCEPTANCEMASK2 | CAN_EFF_FLAG; \n        }\n        #endif\n\n        // CAN Filter 4\n        #ifdef MW_CAN_IDTYPE3\n        if(MW_CAN_IDTYPE3==0)\n        {\n            if(MW_CAN_INVFILTER3==1)\n                rfilter_notAll[3].can_id = MW_CAN_ACCEPTANCEFILTER3 + CAN_INV_FILTER;\n            else\n                rfilter_notAll[3].can_id = MW_CAN_ACCEPTANCEFILTER3;\n            rfilter_notAll[3].can_mask = MW_CAN_ACCEPTANCEMASK3 | CAN_EFF_FLAG; \n        }\n        else\n        {\n            if(MW_CAN_INVFILTER3==1)\n                rfilter_notAll[3].can_id   = MW_CAN_ACCEPTANCEFILTER3 | CAN_EFF_FLAG + CAN_INV_FILTER;\n            else\n                rfilter_notAll[3].can_id   = MW_CAN_ACCEPTANCEFILTER3 | CAN_EFF_FLAG;\n            rfilter_notAll[3].can_mask = MW_CAN_ACCEPTANCEMASK3 | CAN_EFF_FLAG; \n        }\n        #endif\n\n        if(setsockopt(sockHandleDataFrames, SOL_CAN_RAW, CAN_RAW_FILTER, &rfilter_notAll, sizeof(rfilter_notAll))==-1)\n        {\n            fprintf(stderr,\"Error setting the socket filter for %s.\\n\",canInterface);\n            return MW_SOCK_SETSOCKOPT_FILTER_ERROR;\n        }\n    }\n    #endif\n    \n    // Set Non-blocking Mode in Socket\n    ioctl(sockHandleDataFrames, FIONBIO, &iMode);\n\n    // Read a data frame\n    nbytes = read(sockHandleDataFrames, &frame, sizeof(struct can_frame));\n    if(nbytes==-1 || nbytes<sizeof(struct can_frame))\n    {\n        *status = 0;\n        for(i=0;i<8;i++)\n            data[i] = 0;\n    }\n    else\n    {\n        recvCriteria1 = (extended==1) && ((frame.can_id==id+CAN_EFF_FLAG) || (frame.can_id==id+CAN_EFF_FLAG+CAN_RTR_FLAG));\n        recvCriteria2 = (extended==0) && ((frame.can_id==id) || (frame.can_id==id+CAN_RTR_FLAG));\n        if(recvCriteria1==1 || recvCriteria2==1)\n        {\n            *status = 1;\n            memcpy(data, frame.data, sizeof(frame.data));\n        }\n        else\n        {\n            *status = 0;\n            for(i=0;i<8;i++)\n                data[i] = 0;\n        }\n    }\n\n    /*----------------------- Output Remote ---------------------------------*/\n\n    // Output Remote\n    if(*status==1)\n        remote[0] = (uint8_T)((frame.can_id & ( 1 << 30 )) >> 30);\n    else\n        remote[0] = 0;\n\n    /*----------------------- Output Error ----------------------------------*/\n\n    // Error Frames\n    struct can_filter rfilter_errorFrames[1];\n\n    rfilter_errorFrames[0].can_id   = CAN_ERR_FLAG;\n    rfilter_errorFrames[0].can_mask = ~CAN_ERR_MASK;\n\n    if(setsockopt(sockHandleErrorFrames, SOL_CAN_RAW, CAN_RAW_FILTER, &rfilter_errorFrames, sizeof(rfilter_errorFrames))==-1)\n    {\n        fprintf(stderr,\"Error setting socket filter for %s.\\n\",canInterface);\n        return MW_SOCK_SETSOCKOPT_FILTER_ERROR;\n    }\n\n    // Fetch Error message\n    can_err_mask_t err_mask = CAN_ERR_MASK;\n    if(setsockopt(sockHandleErrorFrames, SOL_CAN_RAW, CAN_RAW_ERR_FILTER, &err_mask, sizeof(err_mask))==-1)\n    {\n        fprintf(stderr,\"Error setting socket error mask for %s.\\n\",canInterface);\n        return MW_SOCK_SETSOCKOPT_ERRMASK_ERROR;\n    }\n\n    // Set Non-blocking Mode in Socket\n    ioctl(sockHandleErrorFrames, FIONBIO, &iMode);\n\n    nbytes = read(sockHandleErrorFrames, &frameError,sizeof(struct can_frame));\n\n    *error = 0;\n    if(nbytes==-1 || nbytes<sizeof(struct can_frame))\n    {\n        *error = 0;\n    }\n    else\n    {\n        // Error bit check\n        if(frameError.data[1] & CAN_ERR_CRTL_RX_OVERFLOW )\n        {\n            *error += 1<<0;\n        }\n        if(frameError.data[1] & CAN_ERR_CRTL_RX_PASSIVE )\n        {\n            *error += 1<<1;\n        }\n        if(frameError.data[1] & CAN_ERR_CRTL_RX_WARNING )\n        {\n            *error += 1<<2;\n        }\n    }\n\n    return MW_SOCK_STATUS_OK;\n}\n\n/*Receive a CAN Frame as CAN Msg structure from CAN Bus*/\nint32_T MW_CAN_receiveCANMsg(const char* canInterface, uint32_T* id, \n                             uint8_T* data, uint8_T* dataLength, \n                             uint8_T* status, uint8_T* extended, \n                             uint8_T* remote, uint8_T* error, \n                             int32_T sockHandleDataFrames,\n                             int32_T sockHandleErrorFrames)\n{\n        /*----------------------- Initializations -------------------------------*/\n    int i,iMode=1;\n    ssize_t nbytes;\n    struct sockaddr_can addr1;\n    struct can_frame frame,frameError;\n    frame.can_dlc = 8;\n    struct ifreq ifr1;\n\n    // Time out for no message state, non-blocking mode\n    assert(strlen(canInterface) < IFNAMSIZ); // To avoid Buffer-Overflow\n    struct timeval timeout_data;\n    timeout_data.tv_sec = 0;\n    timeout_data.tv_usec = 190000;\n\n    struct timeval timeout_error;\n    timeout_error.tv_sec = 0;\n    timeout_error.tv_usec = 100;\n\n    /*----------------------- Output Data Frames ----------------------------*/\n    \n    // SFF and EFF, CAN Filters\n    #ifdef MW_CAN_ALLOWALLMSGS\n    if(MW_CAN_ALLOWALLMSGS==0)\n    {\n        // Allow Only some Messages\n        struct can_filter rfilter_notAll[4];\n        #ifdef MW_CAN_IDTYPE0\n        if(MW_CAN_IDTYPE0==0)\n        {\n            #ifdef MW_CAN_INVFILTER0\n            if(MW_CAN_INVFILTER0==1)\n                rfilter_notAll[0].can_id = MW_CAN_ACCEPTANCEFILTER0 + CAN_INV_FILTER;\n            else\n                rfilter_notAll[0].can_id = MW_CAN_ACCEPTANCEFILTER0;\n            #endif\n            rfilter_notAll[0].can_mask = MW_CAN_ACCEPTANCEMASK0 | CAN_EFF_FLAG;\n        }\n        else\n        {\n            #ifdef MW_CAN_INVFILTER0\n            if(MW_CAN_INVFILTER0==1)\n                rfilter_notAll[0].can_id   = MW_CAN_ACCEPTANCEFILTER0 | CAN_EFF_FLAG + CAN_INV_FILTER;\n            else\n                rfilter_notAll[0].can_id   = MW_CAN_ACCEPTANCEFILTER0 | CAN_EFF_FLAG;\n            #endif\n            rfilter_notAll[0].can_mask = (MW_CAN_ACCEPTANCEMASK0 | CAN_EFF_FLAG);\n        }\n        #endif\n\n        #ifdef MW_CAN_IDTYPE1\n        if(MW_CAN_IDTYPE1==0)\n        {\n            #ifdef MW_CAN_INVFILTER1\n            if(MW_CAN_INVFILTER1==1)\n                rfilter_notAll[1].can_id = MW_CAN_ACCEPTANCEFILTER1 + CAN_INV_FILTER;\n            else\n                rfilter_notAll[1].can_id = MW_CAN_ACCEPTANCEFILTER1;\n            #endif\n            rfilter_notAll[1].can_mask = MW_CAN_ACCEPTANCEMASK1 | CAN_EFF_FLAG;\n        }\n        else\n        {\n            #ifdef MW_CAN_INVFILTER1\n            if(MW_CAN_INVFILTER1==1)\n                rfilter_notAll[1].can_id   = MW_CAN_ACCEPTANCEFILTER1 | CAN_EFF_FLAG + CAN_INV_FILTER;\n            else\n                rfilter_notAll[1].can_id   = MW_CAN_ACCEPTANCEFILTER1 | CAN_EFF_FLAG;\n            #endif\n            rfilter_notAll[1].can_mask = (MW_CAN_ACCEPTANCEMASK1 | CAN_EFF_FLAG);\n        }\n        #endif\n\n        #ifdef MW_CAN_IDTYPE2\n        if(MW_CAN_IDTYPE2==0)\n        {\n            #ifdef MW_CAN_INVFILTER2\n            if(MW_CAN_INVFILTER2==1)\n            {\n                rfilter_notAll[2].can_id = MW_CAN_ACCEPTANCEFILTER2 + CAN_INV_FILTER;\n            }\n            else\n                rfilter_notAll[2].can_id = MW_CAN_ACCEPTANCEFILTER2;\n            #endif\n            rfilter_notAll[2].can_mask = MW_CAN_ACCEPTANCEMASK2 | CAN_EFF_FLAG;\n        }\n        else\n        {\n            #ifdef MW_CAN_INVFILTER2\n            if(MW_CAN_INVFILTER2==1)\n            {\n                rfilter_notAll[2].can_id   = MW_CAN_ACCEPTANCEFILTER2 | CAN_EFF_FLAG + CAN_INV_FILTER;\n            }\n            else\n                rfilter_notAll[2].can_id   = MW_CAN_ACCEPTANCEFILTER2 | CAN_EFF_FLAG;\n            #endif\n            rfilter_notAll[2].can_mask = (MW_CAN_ACCEPTANCEMASK2 | CAN_EFF_FLAG);// |CAN_EFF_MASK);\n        }\n        #endif\n\n        #ifdef MW_CAN_IDTYPE3\n        if(MW_CAN_IDTYPE3==0)\n        {\n            #ifdef MW_CAN_INVFILTER3\n            if(MW_CAN_INVFILTER3==1)\n                rfilter_notAll[3].can_id = MW_CAN_ACCEPTANCEFILTER3 + CAN_INV_FILTER;\n            else\n                rfilter_notAll[3].can_id = MW_CAN_ACCEPTANCEFILTER3;\n            #endif\n            rfilter_notAll[3].can_mask = MW_CAN_ACCEPTANCEMASK3 | CAN_EFF_FLAG;\n        }\n        else\n        {\n            #ifdef MW_CAN_INVFILTER3\n            if(MW_CAN_INVFILTER3==1)\n                rfilter_notAll[3].can_id   = MW_CAN_ACCEPTANCEFILTER3 | CAN_EFF_FLAG + CAN_INV_FILTER;\n            else\n                rfilter_notAll[3].can_id   = MW_CAN_ACCEPTANCEFILTER3 | CAN_EFF_FLAG;\n            #endif\n            rfilter_notAll[3].can_mask = (MW_CAN_ACCEPTANCEMASK3 | CAN_EFF_FLAG);// |CAN_EFF_MASK);\n        }\n        #endif\n        if(setsockopt(sockHandleDataFrames, SOL_CAN_RAW, CAN_RAW_FILTER, &rfilter_notAll, sizeof(rfilter_notAll))==-1)\n        {\n            fprintf(stderr,\"Error setting the socket filter for %s.\\n\",canInterface);\n            return MW_SOCK_SETSOCKOPT_FILTER_ERROR;\n        }\n    }\n    #endif\n\n\n    // Set Non-blocking Mode in Socket\n    ioctl(sockHandleDataFrames, FIONBIO, &iMode);\n\n    // Perform read for a CAN Frame\n    nbytes = read(sockHandleDataFrames, &frame, sizeof(struct can_frame));\n    if (nbytes == -1 || nbytes<sizeof(struct can_frame)) {\n        // No CAN Frame Received\n        *status = 0;\n    }\n    else\n    {\n        // CAN Frame Received\n        memcpy(data, frame.data, sizeof(frame.data));\n        *status = 1;\n    }\n\n    // Get the CAN ID, Data length, Remote Flag and Extended Flag of the CAN Frame\n    id[0] = frame.can_id;\n    dataLength[0] = frame.can_dlc;\n    remote[0] = (uint8_T)((id[0] & ( 1 << 30 )) >> 30);\n    if(remote[0]==1)\n    {\n        // If it is a remote frame, force the data to be all zeros\n        for(i=0;i<8;i++)\n            data[i]=0;\n    }\n    extended[0] = (uint8_T)((id[0] & ( 1 << 31 )) >> 31);\n    if(extended[0]==1)\n        id[0] = id[0] - CAN_EFF_FLAG;\n\n    /*----------------------- Output Error ---------------------------------*/\n    // Error Frames\n    struct can_filter rfilter_errorFrames[1];\n\n    rfilter_errorFrames[0].can_id   = CAN_ERR_FLAG;\n    rfilter_errorFrames[0].can_mask = ~CAN_ERR_MASK;\n\n    if(setsockopt(sockHandleErrorFrames, SOL_CAN_RAW, CAN_RAW_FILTER, &rfilter_errorFrames, sizeof(rfilter_errorFrames))==-1)\n    {\n        fprintf(stderr,\"Error setting the socket filter for %s.\\n\",canInterface);\n        return MW_SOCK_SETSOCKOPT_FILTER_ERROR;\n    }\n\n    // Fetch Error message\n    can_err_mask_t err_mask = CAN_ERR_MASK;\n    if(setsockopt(sockHandleErrorFrames, SOL_CAN_RAW, CAN_RAW_ERR_FILTER, &err_mask, sizeof(err_mask))==-1)\n    {\n        fprintf(stderr,\"Error setting the socket error mask for %s.\\n\",canInterface);\n        return MW_SOCK_SETSOCKOPT_ERRMASK_ERROR;\n    }\n\n    // Set Non-blocking Mode in Socket\n    ioctl(sockHandleErrorFrames, FIONBIO, &iMode);\n\n    nbytes = read(sockHandleErrorFrames, &frameError,sizeof(struct can_frame));\n\n    *error = 0;\n    if(nbytes==-1 || nbytes<sizeof(struct can_frame))\n    {\n        *error = 0;\n    }\n    else\n    {\n        // Error bit check\n        if(frameError.data[1] & CAN_ERR_CRTL_RX_OVERFLOW )\n        {\n            *error += 1<<0;\n        }\n        if(frameError.data[1] & CAN_ERR_CRTL_RX_PASSIVE )\n        {\n            *error += 1<<1;\n        }\n        if(frameError.data[1] & CAN_ERR_CRTL_RX_WARNING )\n        {\n            *error += 1<<2;\n        }\n    }\n\n    return MW_SOCK_STATUS_OK;\n}\n\n\n#endif\n/* [EOF] */"},{"name":"MW_SocketCAN_raspi.c","type":"source","group":"legacy","path":"C:\\Users\\yoshi\\hydroplane.us\\Hydroplane Team - Documents\\Engineering\\Demonstration System\\Command, Control, and Comm\\IO Hardware Manuals\\raspberrypi_CAN_transmit_grt_rtw\\..\\..\\..\\..\\..\\..\\..\\..\\..\\ProgramData\\MATLAB\\SupportPackages\\R2023a\\toolbox\\target\\supportpackages\\raspberrypi\\src","tag":"","groupDisplay":"Other files","code":"/* MW_SocketCAN_raspi.c*/\n\n#include \"MW_SocketCAN.h\"\n\n#if !( defined(MATLAB_MEX_FILE) || defined(RSIM_PARAMETER_LOADING) ||  defined(RSIM_WITH_SL_SOLVER) )\n// Code generation\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h> // For read/write data using Berkeley Sockets\n#include <net/if.h> // For ifreq, ifname, etc\n#include <linux/socket.h> // For PF_CAN Sockets\n#include <linux/can.h> // For CAN structures\n#include <linux/can/error.h> // CAN Error Handling\n#include <linux/can/raw.h> // CAN Raw Sockets\n#include <assert.h> // For asserting error\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n\nvoid MW_loadCANModules(const uint8_T isRealCAN)\n{\n    FILE *pLoadModules;\n    if(isRealCAN==1)\n    {\n        pLoadModules = popen(\"sudo modprobe can\",\"r\");\n        close(pLoadModules);\n        pLoadModules = popen(\"sudo modprobe can_raw\",\"r\");\n        close(pLoadModules);\n    }\n    else\n    {\n        pLoadModules = popen(\"sudo modprobe vcan\",\"r\");\n        close(pLoadModules);\n    }\n    \n}\n#endif"},{"name":"can_datatype_ground.c","type":"source","group":"legacy","path":"C:\\Users\\yoshi\\hydroplane.us\\Hydroplane Team - Documents\\Engineering\\Demonstration System\\Command, Control, and Comm\\IO Hardware Manuals\\raspberrypi_CAN_transmit_grt_rtw","tag":"","groupDisplay":"Other files","code":"#include \"can_message.h\"\r\n\r\nconst CAN_DATATYPE CAN_DATATYPE_GROUND = { 0, 0, 0, 0, 0, 0.0, { 0, 0, 0, 0, 0,\r\n    0, 0, 0 } };\r\n"},{"name":"rt_logging.c","type":"source","group":"other","path":"C:\\Program Files\\MATLAB\\R2023a\\rtw\\c\\src","tag":"","groupDisplay":"Other files","code":"/* \n *\n * Copyright 1994-2022 The MathWorks, Inc.\n *\n * File: rt_logging.c\n *\n * Abstract:\n *\tReal-Time Workshop data logging routines using circular buffers of\n *      fixed size.  The buffers are allocated at start, filled in at each\n *      major time step and finally written to a MAT-file at the end of the\n *      simulation.\n *\n *      This file handles redefining the following standard MathWorks types\n *      (see tmwtypes.h):\n *         [u]int8_T     to be int32_T (logged as Matlab [u]int32)\n *         [u]int16_T    to be int32_T (logged as Matlab [u]int32)\n *         real_T        to be real32_T (logged as Matlab single)\n *\n */\n\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <limits.h>\n#include <math.h>\n\n\n#if !defined(MAT_FILE) || (defined(MAT_FILE) && MAT_FILE == 1)\n\n#include <stddef.h>                     /* size_t */\n#include \"rt_logging.h\"\n#ifndef IS_RAPID_ACCEL\n#include \"rt_mxclassid.h\"\n#endif\n#include \"rtw_matlogging.h\"\n\n#include \"rtwtypes.h\"\n\n#ifndef TMW_NAME_LENGTH_MAX\n#define TMW_NAME_LENGTH_MAX 64\n#endif\n#define mxMAXNAM  TMW_NAME_LENGTH_MAX\t/* maximum name length */\n#define matUNKNOWN                  0\n#define\tmatINT8                     1\n#define\tmatUINT8                    2\n#define\tmatINT16                    3\n#define\tmatUINT16                   4\n#define\tmatINT32                    5\n#define\tmatUINT32                   6\n#define\tmatFLOAT                    7\n#define\tmatDOUBLE                   9\n#define matINT64                   12\n#define matUINT64                  13\n#define\tmatMATRIX                  14\n\n#define matLOGICAL_BIT          0x200\n#define matCOMPLEX_BIT          0x800\n\n#define matKEY                 0x4D49\n#define matVERSION             0x0100\n#define matVERSION_INFO_OFFSET   124L\n\n#define matINT64_ALIGN(e)      ( ( ((unsigned)(e))+7 ) & (~7) )\n#define matTAG_SIZE            (sizeof(int32_T) << 1)\n\n#ifndef DEFAULT_BUFFER_SIZE\n#define DEFAULT_BUFFER_SIZE      1024  /* used if maxRows=0 and Tfinal=0.0    */\n#endif\n\n#define FREE(m) if (m != NULL) free(m)\n\n/* Logical definitions */\n#if (!defined(__cplusplus))\n#  ifndef false\n#   define false                       (0U)\n#  endif\n#  ifndef true\n#   define true                        (1U)\n#  endif\n#endif\n\n/*==========*\n * typedefs *\n *==========*/\n\ntypedef struct LogInfo_Tag {\n    LogVar       *t;                   /* Time log variable                   */\n    void         *x;                   /* State log variable                  */\n    int_T        ny;                   /* Length of \"y\" log variables         */\n    void         **y;                  /* Output log vars                     */\n    void         *xFinal;              /* Final state log variable            */\n\n    LogVar       *logVarsList;         /* Linked list of all LogVars          */\n    StructLogVar *structLogVarsList;   /* Linked list of all StructLogVars    */\n\n    boolean_T   haveLogVars;           /* Are logging one or more vars?       */\n} LogInfo;\n\ntypedef struct MatItem_tag {\n  int32_T    type;\n  uint32_T    nbytes;\n  const void *data;\n} MatItem;\n\ntypedef enum {\n    DATA_ITEM,\n    MATRIX_ITEM,\n    STRUCT_LOG_VAR_ITEM,\n    SIGNALS_STRUCT_ITEM\n} ItemDataKind;\n\n/*===========*\n * Constants *\n *===========*/\n\nstatic const char_T rtMemAllocError[] = \"Memory allocation error\";\n\n#define ZEROS32 \"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\"\n\n#if mxMAXNAM==32\n\n#define ZERO_PAD\n\n#elif mxMAXNAM==64\n\n#define ZERO_PAD ZEROS32\n\n#elif mxMAXNAM==128\n\n#define ZERO_PAD   ZEROS32  ZEROS32  ZEROS32\n\n#else\n\n#error \"Cannot Handle mxMAXNAM other than 32,64, and 128\"\n\n#endif\n/* field names: for variable-size signal logging */\nstatic const char_T rtStructLogVarFieldNames[] =\n                  \"time\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"signals\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"blockName\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD;\n\nstatic const char_T rtLocalLoggingSignalsStructFieldNames[] =\n                  \"values\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"valueDimensions\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"dimensions\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"label\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"title\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"plotStyle\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD;\n\nstatic const char_T rtGlobalLoggingSignalsStructFieldNames[] =\n                  \"values\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"valueDimensions\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"dimensions\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"label\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"blockName\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"stateName\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"inReferencedModel\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD;\n                  \n\n#define TIME_FIELD_NAME      (rtStructLogVarFieldNames[0*mxMAXNAM])\n#define SIGNALS_FIELD_NAME   (rtStructLogVarFieldNames[1*mxMAXNAM])\n#define BLOCKNAME_FIELD_NAME (rtStructLogVarFieldNames[2*mxMAXNAM])\n\n#define VALUES_FIELD_NAME    (rtLocalLoggingSignalsStructFieldNames[0*mxMAXNAM])\n#define VALUEDIMENSIONS_FIELD_NAME (rtLocalLoggingSignalsStructFieldNames[1*mxMAXNAM])\n#define DIMENSION_FIELD_NAME (rtLocalLoggingSignalsStructFieldNames[2*mxMAXNAM])\n#define LABEL_FIELD_NAME     (rtLocalLoggingSignalsStructFieldNames[3*mxMAXNAM])\n#define TITLE_FIELD_NAME     (rtLocalLoggingSignalsStructFieldNames[4*mxMAXNAM])\n#define PLOTSTYLE_FIELD_NAME (rtLocalLoggingSignalsStructFieldNames[5*mxMAXNAM])\n\n#define STATENAME_FIELD_NAME (rtGlobalLoggingSignalsStructFieldNames[5*mxMAXNAM])\n#define CROSS_MDL_REF_FIELD_NAME (rtGlobalLoggingSignalsStructFieldNames[6*mxMAXNAM])\n\n/* field names: for fixed-size signal logging */\nstatic const char_T rtLocalLoggingSignalsStructFieldNames_noValDims[] =\n                  \"values\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"dimensions\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"label\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"title\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"plotStyle\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD;\nstatic const char_T rtGlobalLoggingSignalsStructFieldNames_noValDims[] =\n                  \"values\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"dimensions\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"label\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"blockName\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"stateName\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"inReferencedModel\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD;\n\nextern real_T rtInf; /* declared by rt_nonfinite.c */\nextern real_T rtNaN;\nextern real32_T rtNaNF;\n\n/*================*\n * Local routines *\n *================*/\n\n/* Function: rt_GetSizeofDataType ==============================================\n * Abstract:\n *      Get the element size in bytes given the data type id.\n */\nstatic size_t rt_GetSizeofDataType(BuiltInDTypeId dTypeID)\n{\n    size_t elSz = 0; /* unknown */\n\n    switch (dTypeID) {\n      case SS_DOUBLE:\n        elSz = sizeof(real_T);\n        break;\n      case SS_SINGLE:\n        elSz = sizeof(real32_T);\n        break;\n      case SS_INT8:\n        elSz = sizeof(int8_T);\n        break;\n      case SS_UINT8:\n        elSz = sizeof(uint8_T);\n        break;\n      case SS_INT16:\n        elSz = sizeof(int16_T);\n        break;\n      case SS_UINT16:\n        elSz = sizeof(uint16_T);\n        break;\n      case SS_INT32:\n        elSz = sizeof(int32_T);\n        break;\n      case SS_UINT32:\n        elSz = sizeof(uint32_T);\n        break;\n      case SS_BOOLEAN:\n        elSz = sizeof(boolean_T);\n        break;\n    }\n    return(elSz);\n\n} /* end rt_GetSizeofDataType */\n\n\n/* Function: rt_GetSizeofComplexType ===========================================\n * Abstract:\n *      Get the element size in bytes given the data type id.\n */\nstatic size_t rt_GetSizeofComplexType(BuiltInDTypeId dTypeID)\n{\n    size_t elSz = 2*rt_GetSizeofDataType(dTypeID);\n\n    switch (dTypeID) {\n      case SS_DOUBLE:\n      #ifdef CREAL_T\n        elSz = sizeof(creal_T);\n      #endif\n        break;\n      case SS_SINGLE:\n      #ifdef CREAL_T\n        elSz = sizeof(creal32_T);\n      #endif\n        break;\n      case SS_INT8:\n      #ifdef CINT8_T\n        elSz = sizeof(cint8_T);\n      #endif\n        break;\n      case SS_UINT8:\n      #ifdef CUINT8_T\n        elSz = sizeof(cuint8_T);\n      #endif\n        break;\n      case SS_INT16:\n      #ifdef CINT16_T\n        elSz = sizeof(cint16_T);\n      #endif\n        break;\n      case SS_UINT16:\n      #ifdef CUINT16_T\n        elSz = sizeof(cuint16_T);\n      #endif\n        break;\n      case SS_INT32:\n      #ifdef CINT32_T\n        elSz = sizeof(cint32_T);\n      #endif\n        break;\n      case SS_UINT32:\n      #ifdef CUINT32_T\n        elSz = sizeof(cuint32_T);\n      #endif\n        break;\n      case SS_BOOLEAN:\n        elSz = sizeof(boolean_T);\n        break;\n    }\n\n    return(elSz);\n\n} /* end rt_GetSizeofComplexType */\n\n\n/* Function: rt_GetDataTypeConvertInfo =========================================\n * Abstract:\n *      Directly copy if pointer to structure is non-NULL, otherwise set to\n *      default.\n */\nstatic RTWLogDataTypeConvert rt_GetDataTypeConvertInfo(\n    const RTWLogDataTypeConvert *pDataTypeConvertInfo,\n    BuiltInDTypeId dTypeID\n    )\n{\n    RTWLogDataTypeConvert dataTypeConvertInfoCopy;\n\n    if (pDataTypeConvertInfo == NULL) {\n        dataTypeConvertInfoCopy.conversionNeeded = 0;\n        dataTypeConvertInfoCopy.dataTypeIdLoggingTo = dTypeID;\n        dataTypeConvertInfoCopy.dataTypeIdOriginal  = (DTypeId)dTypeID;\n        dataTypeConvertInfoCopy.bitsPerChunk = 0;\n        dataTypeConvertInfoCopy.numOfChunk = 0;\n        dataTypeConvertInfoCopy.isSigned = 0;\n        dataTypeConvertInfoCopy.fracSlope = 1.0;\n        dataTypeConvertInfoCopy.fixedExp = 0;\n        dataTypeConvertInfoCopy.bias = 0.0;\n    } else {\n        dataTypeConvertInfoCopy = *pDataTypeConvertInfo;\n    }\n\n    return dataTypeConvertInfoCopy;\n\n} /* end rt_GetDataTypeConvertInfo */\n\n\n/* Function: rt_GetDblValueFromOverSizedData ===================================\n * Abstract:\n */\nstatic double rt_GetDblValueFromOverSizedData(\n    const void *pVoid, \n    int bitsPerChunk, \n    int numOfChunk,\n    unsigned int isSigned, \n    double fracSlope, \n    int fixedExp, \n    double bias)\n{\n    double retValue = 0;\n\n    double *dblValue = (double *) calloc(numOfChunk, sizeof(double));\n\n    int i;    \n    double isSignedNeg;\n\n    if(isSigned) {\n        const chunk_T *pData = (const chunk_T *) (pVoid);\n        for (i = 0; i <numOfChunk; i++) {\n            dblValue[i] = (double)(pData[i]);\n        }\n    } else  {\n        const uchunk_T *pData = (const uchunk_T *) (pVoid);\n        for (i = 0; i <numOfChunk; i++) {\n            dblValue[i] = (double)(pData[i]);\n        }\n    }\n\n    /* \n       Assuming multi chunks b_n ... b_2 b_1 b_0, and the length of each chunk is N.\n       Suppose b_i is the i-th chunk's value.\n       Then for unsigned data or data with one chunk: we have\n       retValue = b_n * 2^(n*N) + ... + b_1 * 2^N + b_0 * 2^0;\n       But for signed data, we have\n       retValue = b_n * 2^(n*N) + ... + b_1 * 2^N + b_0 * 2^0+ (b_0<0) * 2^N + \n       ... (b_(n-1) <0) * 2^(n*N) \n       = (b_n + (b_(n-1)<0)) * 2^(n*N) +... + (b_1 + (b_0<0)) * 2^N + b_0 * 2^0;\n       Together:\n       retValue = \n       (b_n + isSigned * (b_(n-1)<0)) * 2^(n*N) +... + (b_1 + isSigned * (b_0<0)) * 2^N + b_0 * 2^0;\n    */\n\n    retValue = dblValue[numOfChunk - 1];\n    \n    for(i = numOfChunk - 1; i > 0; i--) {\n        isSignedNeg = dblValue[i - 1] < 0 ? (double)isSigned : 0;\n        retValue = retValue + isSignedNeg;\n\n        retValue = ldexp(retValue, bitsPerChunk)+ dblValue[i-1];\n    }\n    retValue = ldexp( fracSlope * retValue, fixedExp ) + bias;\n\n    FREE(dblValue);\n    return (retValue);\n\n} /* end rt_GetDblValueFromOverSizedData */\n\n\n/* Function: rt_GetNonBoolMxIdFromDTypeId ======================================\n * Abstract:\n *      Get the mx???_CLASS given the simulink builtin data type id.\n */\nstatic mxClassID rt_GetNonBoolMxIdFromDTypeId(BuiltInDTypeId dTypeID)\n{\n    mxClassID mxID;\n\n    switch (dTypeID) {\n      case SS_DOUBLE:\n        mxID = (sizeof(real_T)==4? mxSINGLE_CLASS: mxDOUBLE_CLASS);\n        break;\n      case SS_SINGLE:\n        mxID = mxSINGLE_CLASS;\n        break;\n      case SS_INT8:\n        switch (sizeof(int8_T)) {\n          case 4: /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                     \"Needed for when PWS maps int8_T into 32-bits\" */\n            mxID = mxINT32_CLASS;\n            break;\n          case 2: /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                     \"Needed for when PWS maps int8_T into 16-bits\" */\n            mxID = mxINT16_CLASS;\n            break;\n          case 1:\n            mxID = mxINT8_CLASS;\n            break;\n          default: /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                      \"Needed to handle an unknown data type ID\" */\n            mxID = mxUNKNOWN_CLASS;\n            break;\n        }\n        break;\n      case SS_UINT8:\n        switch (sizeof(uint8_T)) {\n          case 4: /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                     \"Needed for when PWS maps uint8_T into 32-bits\" */\n            mxID = mxUINT32_CLASS;\n            break;\n          case 2: /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                     \"Needed for when PWS maps uint8_T into 16-bits\" */\n            mxID = mxUINT16_CLASS;\n            break;\n          case 1:\n            mxID = mxUINT8_CLASS;\n            break;\n          default: /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                      \"Needed to handle an unknown data type ID\" */\n            mxID = mxUNKNOWN_CLASS;\n            break;\n        }\n        break;\n      case SS_INT16:\n        mxID = (sizeof(int16_T)==4? mxINT32_CLASS: mxINT16_CLASS);\n        break;\n      case SS_UINT16:\n        mxID = (sizeof(uint16_T)==4? mxUINT32_CLASS: mxUINT16_CLASS);\n        break;\n      case SS_INT32:\n        mxID = mxINT32_CLASS;\n        break;\n      case SS_UINT32:\n        mxID = mxUINT32_CLASS;\n        break;\n        /*case SS_BOOLEAN:\n          mxID = (sizeof(boolean_T)==4? mxUINT32_CLASS: mxLOGICAL_CLASS);\n          break;*/\n      default:\n        mxID = mxUNKNOWN_CLASS;\n        break;\n    }\n\n    return(mxID);\n\n} /* end rt_GetNonBoolMxIdFromDTypeId */\n\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\n/* Function: rt_GetMxIdFromDTypeIdForRSim ======================================\n * Abstract:\n *      Get the mx???_CLASS given the simulink builtin data type id.\n */\nmxClassID rt_GetMxIdFromDTypeIdForRSim(BuiltInDTypeId dTypeID)\n{\n    mxClassID mxID;\n\n    if (dTypeID == SS_BOOLEAN) {\n        switch (sizeof(boolean_T)) {\n          case 4: /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                     \"Needed for when PWS maps boolean_T into 32-bits\" */\n            mxID = mxUINT32_CLASS;\n            break;\n          case 2: /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                     \"Needed for when PWS maps boolean_T into 16-bits\" */\n            mxID = mxUINT16_CLASS;\n            break;\n          default:\n            mxID = mxLOGICAL_CLASS;\n            break;\n        }\n    } else {\n        mxID = rt_GetNonBoolMxIdFromDTypeId(dTypeID);\n    }\n\n    return(mxID);\n\n} /* end rt_GetMxIdFromDTypeIdForRSim */\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\n/* Function: rt_GetMxIdFromDTypeId =============================================\n * Abstract:\n *      Get the mx???_CLASS given the simulink builtin data type id.\n */\nmxClassID rt_GetMxIdFromDTypeId(BuiltInDTypeId dTypeID)\n{\n    mxClassID mxID;\n\n    if (dTypeID == SS_BOOLEAN) {\n        switch (sizeof(boolean_T)) {\n          case 4: /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                     \"Needed for when PWS maps boolean_T into 32-bits\" */\n            mxID = mxUINT32_CLASS;\n            break;\n          case 2: /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                     \"Needed for when PWS maps boolean_T into 16-bits\" */\n            mxID = mxUINT16_CLASS;\n            break;\n          default:\n            mxID = mxUINT8_CLASS;\n            break;\n        }\n    } else {\n        mxID = rt_GetNonBoolMxIdFromDTypeId(dTypeID);\n    }\n    return(mxID);\n\n} /* end rt_GetMxIdFromDTypeId */\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n\n/* Function: rt_GetMatIdFromMxId ===============================================\n * Abstract:\n *      Get the MatId given the mxClassID.\n */\nstatic int_T rt_GetMatIdFromMxId(mxClassID mxID)\n{\n    int_T matID;\n\n    switch (mxID) {\n      case mxCELL_CLASS:\n      case mxSTRUCT_CLASS:\n      case mxOBJECT_CLASS:\n        matID = -1;\n        break;\n      case mxCHAR_CLASS:\n        matID = matUINT16;\n        break;\n      case mxDOUBLE_CLASS:\n        matID = matDOUBLE;\n        break;\n      case mxSINGLE_CLASS:\n        matID = matFLOAT;\n        break;\n      case mxINT8_CLASS:\n        matID = matINT8;\n        break;\n      case mxUINT8_CLASS:\n        matID = matUINT8;\n        break;\n      case mxINT16_CLASS:\n        matID = matINT16;\n        break;\n      case mxUINT16_CLASS:\n        matID = matUINT16;\n        break;\n      case mxINT32_CLASS:\n        matID = matINT32;\n        break;\n      case mxUINT32_CLASS:\n        matID = matUINT32;\n        break;\n      case mxINT64_CLASS:\n        matID = matINT64;\n        break;\n      case mxUINT64_CLASS:\n        matID = matUINT64;\n        break;\n      default:\n        matID = matUNKNOWN;\n        break;\n    }\n    return(matID);\n\n} /* end rt_GetMatIdFromMxId */\n\n\n/* Forward declaration */\nstatic int_T rt_WriteItemToMatFile(FILE         *fp,\n                                   MatItem      *pItem,\n                                   ItemDataKind dataKind);\n\n\n/* Function: rt_ProcessMatItem =================================================\n * Abstract:\n *      This routine along with rt_WriteItemToMatFile() write out a specified\n *      mat-item the .mat file. Note that if the input argument\n *          cmd == 0, then this function just calculates the size of the item.\n *          cmd <> 0, this function writes the mat-item to the file.\n *      Return values is\n *           -1 : coding/logic error\n *            0 : upon success\n *          > 0 : upon write failure (1)\n */\nstatic int_T rt_ProcessMatItem(FILE         *fp,\n                               MatItem      *pItem,\n                               ItemDataKind itemKind,\n                               int_T        cmd)\n{\n    mxClassID    mxID          = mxUNKNOWN_CLASS;\n    uint32_T     arrayFlags[2] = {0, 0};\n    int32_T      *dims         = NULL;\n    int32_T      _dims[3]      = {0, 0, 0};\n    int32_T      nDims         = 2;\n    int32_T      nBytesInItem  = 0;\n    const char_T *itemName;\n    MatItem      item;\n    int_T        retStat       = 0;\n\n    switch (itemKind) {\n      case DATA_ITEM: {\n          (void)fprintf(stderr,\"Unexpected itemKind = DATA_ITEM in \"\n                               \"rt_ProcessMatItem @A\\n\");\n          retStat = -1;\n          goto EXIT_POINT;\n      }\n      case MATRIX_ITEM: {\n          const MatrixData *var = (const MatrixData *) pItem->data;\n\n          mxID           = var->mxID;\n          arrayFlags[0]  = mxID;\n          arrayFlags[0] |= var->logical;\n          arrayFlags[0] |= var->complex;\n          if (var->nDims < 2) {\n              dims         = _dims;\n              dims[0]      = var->nRows;\n              dims[1]      = var->nCols;\n              nDims        = 2;\n          } else {\n              int32_T k;\n              dims = (int32_T*)malloc(sizeof(int32_T)*(var->nDims+1));\n              for (k = 0; k < var->nDims; k++) {\n                  dims[k] = var->dims[k];\n              }\n              dims[var->nDims] = var->nRows;\n              nDims = var->nDims + 1;\n          }\n          itemName = var->name;\n          break;\n      }\n      case STRUCT_LOG_VAR_ITEM: {\n          const StructLogVar *var = (const StructLogVar *) pItem->data;\n\n          mxID          = mxSTRUCT_CLASS;\n          arrayFlags[0] = mxID;\n          dims          = _dims;\n          dims[0]       = 1;\n          dims[1]       = 1;\n          itemName      = var->name;\n          break;\n      }\n      case SIGNALS_STRUCT_ITEM: {\n          const SignalsStruct *var = (const SignalsStruct *) pItem->data;\n\n          mxID          = mxSTRUCT_CLASS;\n          arrayFlags[0] = mxID;\n          dims          = _dims;\n          dims[0]       = 1;\n          dims[1]       = var->numSignals;\n          itemName      = &SIGNALS_FIELD_NAME;\n          break;\n      }\n      default:\n        (void)fprintf(stderr,\"Unexpected itemKind=%d in rt_ProcessMatItem @B\\n\",\n                      itemKind);\n        retStat = -1;\n        goto EXIT_POINT;\n    }\n\n    /* array flags */\n    item.nbytes = 2*sizeof(uint32_T);\n    if (cmd) {\n        item.type = matUINT32;\n        item.data = arrayFlags;\n        if (rt_WriteItemToMatFile(fp,&item, DATA_ITEM)) {\n            retStat = 1;\n            goto EXIT_POINT;\n        }\n    } else {\n        /*LINTED E_CAST_INT_TO_SMALL_INT*/\n        nBytesInItem += matINT64_ALIGN(matTAG_SIZE + item.nbytes);\n    }\n    /* dimensions */\n    /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n    item.nbytes = nDims*sizeof(int32_T);\n    if (cmd) {\n        item.type = matINT32;\n        item.data = dims;\n        if (rt_WriteItemToMatFile(fp,&item, DATA_ITEM)) {\n            retStat = 1;\n            goto EXIT_POINT;            \n        }\n    } else {\n        /*LINTED E_CAST_INT_TO_SMALL_INT*/\n        nBytesInItem += matINT64_ALIGN(matTAG_SIZE + item.nbytes);\n    }\n    /* name */\n    item.nbytes = (int32_T)strlen(itemName);\n    if (cmd) {\n        item.type = matINT8;\n        item.data = (const char_T*) itemName;\n        if (rt_WriteItemToMatFile(fp,&item, DATA_ITEM)) {\n            retStat = 1;\n            goto EXIT_POINT;\n        }\n    } else {\n        nBytesInItem += (item.nbytes <= 4) ? /*LINTED E_CAST_INT_TO_SMALL_INT*/\n                        matTAG_SIZE : matINT64_ALIGN(matTAG_SIZE + item.nbytes);\n    }\n\n    if (itemKind == MATRIX_ITEM) {\n        const MatrixData *var   = (const MatrixData*) pItem->data;\n        int_T            matID  = rt_GetMatIdFromMxId(mxID);\n        size_t           elSize = var->elSize;\n\n        /* data */\n        item.nbytes = (int32_T)(var->nRows * var->nCols * elSize);\n        if (cmd) {\n            item.type = matID;\n            item.data = var->re;\n            if (rt_WriteItemToMatFile(fp, &item, DATA_ITEM)) {\n                retStat = 1;\n                goto EXIT_POINT;\n            }\n        } else {\n            nBytesInItem += (item.nbytes <= 4) ? /*LINTED*/\n                        matTAG_SIZE : matINT64_ALIGN(matTAG_SIZE + item.nbytes);\n        }\n        /* imaginary part */\n        if (var->complex) {\n            item.nbytes = (int32_T)(var->nRows * var->nCols * elSize);\n            if (cmd) {\n                item.type = matID;\n                item.data = var->im;\n                if (rt_WriteItemToMatFile(fp, &item, DATA_ITEM)) {\n                    retStat = 1;\n                    goto EXIT_POINT;\n                }\n            } else {\n                nBytesInItem += (item.nbytes <= 4) ? /*LINTED*/\n                        matTAG_SIZE : matINT64_ALIGN(matTAG_SIZE + item.nbytes);\n            }\n        }\n    } else {  /* some type of structure item */\n        const char_T *fieldNames;\n        int_T        sizeofFieldNames;\n\n        /* field names */\n        switch (itemKind) {\n          case STRUCT_LOG_VAR_ITEM: {\n              const StructLogVar *var = (const StructLogVar *) pItem->data;\n              fieldNames        = rtStructLogVarFieldNames;\n              sizeofFieldNames  = var->numActiveFields * mxMAXNAM;\n              break;\n          }\n          case SIGNALS_STRUCT_ITEM: {\n              const SignalsStruct *var = (const SignalsStruct *) pItem->data;\n              fieldNames        = var->fieldNames;\n              sizeofFieldNames  = var->numActiveFields * mxMAXNAM;\n              break;\n          }\n          default: /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                      \"Needed to handle an unknown itemKind\" */\n            (void)fprintf(stderr, \"Unexpected itemKind=%d in \"\n                          \"rt_ProcessMatItem @C\\n\", itemKind);\n            retStat = -1;\n            goto EXIT_POINT;\n        }\n\n        /* write field names */\n        if (cmd) {\n            int32_T tmpInt = mxMAXNAM;\n\n            item.nbytes = sizeof(int32_T);\n            item.type   = matINT32;\n            item.data   = &tmpInt;\n            if (rt_WriteItemToMatFile(fp,&item, DATA_ITEM)) {\n                retStat = 1;\n                goto EXIT_POINT;\n            }\n\n            item.nbytes = sizeofFieldNames;\n            item.type   = matINT8;\n            item.data   = (const char_T*) fieldNames;\n            if (rt_WriteItemToMatFile(fp,&item, DATA_ITEM)) {\n                retStat = 1;\n                goto EXIT_POINT;\n            }\n        } else {\n            /*LINTED E_CAST_INT_TO_SMALL_INT*/\n            nBytesInItem += matINT64_ALIGN( matTAG_SIZE + matTAG_SIZE +\n                                            sizeofFieldNames );\n        }\n\n        /* process each field of the structure */\n        switch (itemKind) {\n          case STRUCT_LOG_VAR_ITEM: {\n              const StructLogVar *var = pItem->data;\n\n              /* time */\n              {\n                  const void *data = var->time;\n\n                  if (var->logTime) { /* time is a LogVar, get the MatrixData */\n                      data = &(((const LogVar*) (var->time))->data);\n                  }\n\n                  item.type = matMATRIX;\n                  item.data = data;\n                  if (cmd) {\n                      if (rt_WriteItemToMatFile(fp,&item,MATRIX_ITEM)){\n                          retStat = 1;\n                          goto EXIT_POINT;\n                      }\n                  } else {\n                      if (rt_ProcessMatItem(fp, &item, MATRIX_ITEM,0)){\n                          retStat = 1;\n                          goto EXIT_POINT;\n                      }\n                      nBytesInItem += item.nbytes + matTAG_SIZE;\n                  }\n              }\n\n              /* signals */\n              item.type = matMATRIX;\n              item.data = &(var->signals);\n              if (cmd) {\n                  if (rt_WriteItemToMatFile(fp,&item,SIGNALS_STRUCT_ITEM)) {\n                      retStat = 1;\n                      goto EXIT_POINT;\n                  }\n              } else {\n                  if (rt_ProcessMatItem(fp, &item, SIGNALS_STRUCT_ITEM,0)) {\n                      retStat = 1;\n                      goto EXIT_POINT;\n                  }\n                  nBytesInItem += item.nbytes + matTAG_SIZE;\n              }\n\n              /* block name */\n              if (var->blockName != NULL) {\n                  item.type = matMATRIX;\n                  item.data = var->blockName;\n                  if (cmd) {\n                      if (rt_WriteItemToMatFile(fp, &item, MATRIX_ITEM)) {\n                          retStat = 1;\n                          goto EXIT_POINT;\n                      }\n                  } else {\n                      if (rt_ProcessMatItem(fp, &item, MATRIX_ITEM, 0)) {\n                          retStat = 1;\n                          goto EXIT_POINT;\n                      }\n                      nBytesInItem += item.nbytes + matTAG_SIZE;\n                  }\n              }\n              break;\n          }\n          case SIGNALS_STRUCT_ITEM: {\n              const SignalsStruct *var        = pItem->data;\n              const LogVar        *values     = var->values;\n              const MatrixData    *dimensions = var->dimensions;\n              const MatrixData    *labels     = var->labels;\n              const MatrixData    *plotStyles = var->plotStyles;\n              const MatrixData    *titles     = var->titles;\n              const MatrixData    *blockNames = var->blockNames;\n              const MatrixData    *stateNames = var->stateNames;\n              const MatrixData    *crossMdlRef = var->crossMdlRef;\n              const boolean_T logValueDimensions = var->logValueDimensions;\n              int_T               i;\n\n              for (i = 0; i < var->numSignals; i++) {\n                  /* values */\n                  item.type = matMATRIX;\n                  item.data = &(values->data);\n                  if (cmd) {\n                      if (rt_WriteItemToMatFile(fp, &item,MATRIX_ITEM)) {\n                          retStat = 1;\n                          goto EXIT_POINT;\n                      }\n                  } else {\n                      if (rt_ProcessMatItem(fp, &item, MATRIX_ITEM, 0)) {\n                          retStat = 1;\n                          goto EXIT_POINT;\n                      }\n                      nBytesInItem += item.nbytes + matTAG_SIZE;\n                  }\n\n                  if(logValueDimensions)\n                  {\n                      /* valueDimensions */\n                      /* Since the functions rt_WriteItemToMatFile and \n                         rt_ProcessMatItem deal with MatrixData, \n                         convert valDims to tempData, and fill up the\n                         necessary fields.\n                      */\n                      MatrixData  tempData;\n                      (void)memcpy(tempData.name, &VALUEDIMENSIONS_FIELD_NAME, mxMAXNAM);\n                      tempData.nRows = values->valDims->nRows;\n                      tempData.nCols = values->valDims->nCols;\n                      tempData.nDims = 1;\n                      tempData._dims[0] = values->valDims->nCols;\n                      tempData.re = values->valDims->dimsData;\n                      tempData.im = NULL;\n                      tempData.dTypeID = SS_DOUBLE;\n                      tempData.elSize =  sizeof(real_T);\n                      tempData.mxID = mxDOUBLE_CLASS;\n                      tempData.logical = 0;\n                      tempData.complex = 0;\n                      tempData.frameData = 0;\n                      tempData.frameSize = 1;\n\n                      item.type = matMATRIX;                    \n                      item.data = &tempData; /*values->valDims;*/\n\n                      if (cmd) {\n                          if (rt_WriteItemToMatFile(fp, &item,MATRIX_ITEM)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                      } else {\n                          if (rt_ProcessMatItem(fp, &item, MATRIX_ITEM, 0)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                          nBytesInItem += item.nbytes + matTAG_SIZE;\n                      }\n                  }\n                  values = values->next;\n\n                  /* dimensions */\n                  if (dimensions != NULL) {\n                      item.type = matMATRIX;\n                      item.data = &(dimensions[i]);\n                      if (cmd) {\n                          if (rt_WriteItemToMatFile(fp,&item, MATRIX_ITEM)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                      } else {\n                          if (rt_ProcessMatItem(fp, &item, MATRIX_ITEM, 0)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                          nBytesInItem += item.nbytes + matTAG_SIZE;\n                      }\n                  }\n\n                  /* label */\n                  item.type = matMATRIX;\n                  item.data = &(labels[i]);\n                  if (cmd) {\n                      if (rt_WriteItemToMatFile(fp, &item,MATRIX_ITEM)) {\n                          retStat = 1;\n                          goto EXIT_POINT;\n                      }\n                  } else {\n                      if (rt_ProcessMatItem(fp, &item, MATRIX_ITEM, 0)) {\n                          retStat = 1;\n                          goto EXIT_POINT;\n                      }\n                      nBytesInItem += item.nbytes + matTAG_SIZE;\n                  }\n                  /* title */\n                  if (titles != NULL) {\n                      item.type = matMATRIX;\n                      item.data = &(titles[i]);\n                      if (cmd) {\n                          if (rt_WriteItemToMatFile(fp, &item, MATRIX_ITEM)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                      } else {\n                          if (rt_ProcessMatItem(fp, &item, MATRIX_ITEM, 0)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                          nBytesInItem += item.nbytes + matTAG_SIZE;\n                      }\n                  }\n                  /* plot style */\n                  if (plotStyles != NULL) {\n                      item.type = matMATRIX;\n                      item.data = &(plotStyles[i]);\n                      if (cmd) {\n                          if (rt_WriteItemToMatFile(fp,&item, MATRIX_ITEM)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                      } else {\n                          if (rt_ProcessMatItem(fp, &item, MATRIX_ITEM, 0)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                          nBytesInItem += item.nbytes + matTAG_SIZE;\n                      }\n                  }\n                  /* block name */\n                  if (blockNames != NULL) {\n                      item.type = matMATRIX;\n                      item.data = &(blockNames[i]);\n                      if (cmd) {\n                          if (rt_WriteItemToMatFile(fp, &item, MATRIX_ITEM)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                      } else {\n                          if (rt_ProcessMatItem(fp, &item, MATRIX_ITEM, 0)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                          nBytesInItem += item.nbytes + matTAG_SIZE;\n                      }\n                  }\n                  /* state name */\n                  if (stateNames != NULL) {\n                      item.type = matMATRIX;\n                      item.data = &(stateNames[i]);\n                      if (cmd) {\n                          if (rt_WriteItemToMatFile(fp, &item, MATRIX_ITEM)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                      } else {\n                          if (rt_ProcessMatItem(fp, &item, MATRIX_ITEM, 0)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                          nBytesInItem += item.nbytes + matTAG_SIZE;\n                      }\n                  }\n                  /* crossMdlRef */\n                  if (crossMdlRef != NULL) {\n                      item.type = matMATRIX;\n                      item.data = &(crossMdlRef[i]);\n                      if (cmd) {\n                          if (rt_WriteItemToMatFile(fp, &item, MATRIX_ITEM)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                      } else {\n                          if (rt_ProcessMatItem(fp, &item, MATRIX_ITEM, 0)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                          nBytesInItem += item.nbytes + matTAG_SIZE;\n                      }\n                  }\n              } /* for i=1:numSignals */\n              break;\n          }\n          default: /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                      \"Needed to handle an unknown itemKind\" */\n            (void)fprintf(stderr, \"Unexpected itemKind=%d in \"\n                          \"rt_ProcessMatItem @D\\n\", itemKind);\n            retStat = -1;\n            goto EXIT_POINT;\n        }\n    } /* end struct item */\n\n    if (!cmd) {\n        pItem->nbytes = nBytesInItem;\n    }\n\n  EXIT_POINT:\n    if (dims != _dims) {\n        FREE(dims);\n    }\n    return(retStat);\n\n} /* end rt_ProcessMatItem */\n\n\n/* Function: rt_WriteItemToMatFile =============================================\n * Abstract:\n *      Entry function for writing out a mat item to the mat file.\n *\n *      Return values is\n *          == 0 : upon success\n *          <> 0 : upon failure\n */\nstatic int_T rt_WriteItemToMatFile(FILE         *fp,\n                                   MatItem      *pItem,\n                                   ItemDataKind itemKind)\n{\n    /* Determine the item size */\n    if (pItem->type == matMATRIX) {\n        if (rt_ProcessMatItem(fp, pItem, itemKind, 0)) return(1);\n    }\n\n    /* Write the item tag and data */\n    if (pItem->nbytes > 4) {\n        int32_T nAlignBytes;\n\n        if (fwrite(pItem, 1, matTAG_SIZE, fp) != matTAG_SIZE) return(1);\n\n        if (pItem->type == matMATRIX) {\n            if (rt_ProcessMatItem(fp, pItem, itemKind, 1)) return(1);\n        } else {\n            if ( fwrite(pItem->data, 1, pItem->nbytes, fp) !=\n                                                    ((size_t) pItem->nbytes) ) {\n                return(1);\n            }\n        }\n\n        /* Add offset for 8-byte alignment */\n        nAlignBytes = matINT64_ALIGN(pItem->nbytes) - pItem->nbytes;\n        if (nAlignBytes > 0) {\n            int pad[2] = {0, 0};\n            if ( fwrite(pad,1,nAlignBytes,fp) != ((size_t) nAlignBytes) ) {\n                return(1);\n            }\n        }\n    } else {\n        MatItem item = {0, 0, NULL};\n        item.type = ((uint32_T)(pItem->type))|(((uint32_T)(pItem->nbytes))<<16);\n        (void)memcpy(&item.nbytes, pItem->data, pItem->nbytes);\n        if (fwrite(&item, 1, matTAG_SIZE, fp) != matTAG_SIZE) return(1);\n    }\n\n    return(0);\n\n} /* end rt_WriteItemToMatFile */\n\n\n/* Function: rt_WriteMat5FileHeader ============================================\n * Abstract:\n *      Function to write the mat file header.\n *      Return values is\n *          == 0 : upon success\n *          <> 0 : upon failure\n */\nstatic int_T rt_WriteMat5FileHeader(FILE *fp)\n{\n    int_T        nbytes;\n    int_T        nspaces;\n    int_T        i, n;\n    unsigned short ver[2];\n    char_T       spaces[16];\n    const char_T *matversion = \"MATLAB 5.0 MAT-file\";\n\n    (void)memset(spaces, ' ', sizeof(spaces));\n\n    n = (int_T)strlen(matversion);\n    nbytes = (int_T)fwrite(matversion, 1, n, fp);\n    /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n    nspaces = matVERSION_INFO_OFFSET - nbytes;\n    /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n    n = nspaces % sizeof(spaces);\n    nbytes += (int_T)fwrite(spaces, 1, n, fp);\n    /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n    n = nspaces / sizeof(spaces);\n    for (i = 0; i < n; ++i) {\n        nbytes += (int_T)fwrite(spaces, 1, sizeof(spaces), fp);\n    }\n    if (nbytes == matVERSION_INFO_OFFSET) {\n        ver[0] = matVERSION;\n        ver[1] = matKEY;\n        nbytes += (int_T)fwrite(ver, 1, sizeof(ver), fp);\n    }\n    return(nbytes != matVERSION_INFO_OFFSET + sizeof(ver));\n\n} /* end rt_WriteMat5FileHeader */\n\n\n/* Function: rt_FixupLogVar ====================================================\n * Abstract:\n *\tMake the logged variable suitable for MATLAB.\n */\nstatic const char_T *rt_FixupLogVar(LogVar *var,int verbose)\n{\n    int_T  nCols   = var->data.nCols;\n    int_T  maxRows = var->data.nRows;\n    int_T  nDims   = var->data.nDims;\n    size_t elSize  = var->data.elSize;\n    int_T  nRows   = (var->wrapped ?  maxRows : var->rowIdx);\n\n    var->nDataPoints = var->rowIdx + var->wrapped * maxRows;\n\n    if (var->wrapped > 1 || (var->wrapped == 1 && var->rowIdx != 0)) {\n        /*\n         * Warn the user the circular buffer has wrapped, implying that\n         * some data has been lost.\n         */\n        if( verbose) {\n            (void)fprintf(stdout,\n                          \"*** Log variable %s has wrapped %d times\\n\"\n                          \"    using a circular buffer of size %d\\n\",\n                          var->data.name, var->wrapped, var->data.nRows);\n        }\n        if (var->usingDefaultBufSize) {\n            /*\n             * If wrapping occurred using the default buffer size,\n             * let the user know what size buffer to use in the\n             * future to avoid wrapping.  If the default buffer\n             * size was not used, the user has no control to specify\n             * the correct value.  Wrapping may occur when not using\n             * the default buffer if we allocated too small a buffer\n             * size for this logvar.  One common case is a toWorkspace\n             * block inside of an iterative subsystem - we can not take\n             * the number of iterations into account (they may be\n             * variable) when allocating the buffer.  In this case,\n             * just warn the buffer wrapped and don't tell user they\n             * can override the buffer size.\n             */\n            if( verbose ) {\n                (void)fprintf(stdout,\n                              \"*** To avoid wrapping, explicitly specify a\\n\"\n                              \"    buffer size of %d in your Simulink model\\n\"\n                              \"    by adding OPTS=\\\"-DDEFAULT_BUFFER_SIZE=%d\\\"\\n\"\n                              \"    as an argument to the ConfigSet MakeCommand\\n\"\n                              \"    parameter\\n\",\n                              var->nDataPoints, var->nDataPoints);\n            }\n        }\n    }\n\n    if (nDims < 2 && nCols > 1) {  /* Transpose? */\n        /* Don't need to transpose valueDimensions */\n        int_T  nEl    = nRows*nCols;\n        char   *src   = var->data.re;\n        char   *pmT;\n        int_T  k;\n\n        /**********************************\n         * If memory cannot be allocated, *\n         * write to a temporary buffer    *\n         **********************************/\n        if ((pmT = malloc(nEl*elSize)) == NULL) {\n            FILE  *fptr;\n            char  fName[mxMAXNAM+13];\n\n            (void)sprintf(fName, \"%s%s\", var->data.name, \"_rtw_tmw.tmw\");\n            if ((fptr=fopen(fName,\"w+b\")) == NULL) {\n                (void)fprintf(stderr,\"*** Error opening %s\",fName);\n                return(\"unable to open data file\\n\");\n            }\n\n            /****************************\n             * Write the data to a file *\n             ****************************/\n            for (k=0; k<nEl; k++) {\n                int_T kT   = nCols*(k%nRows) + (k/nRows);\n                char  *dst = src + kT*elSize;\n                (void)fwrite(dst, elSize, 1, fptr);\n            }\n            if (var->data.complex) {\n                char *pmiT = var->data.re;\n                src  = var->data.im;\n                for (k=0; k<nEl; k++) {\n                    int_T kT   = nRows*(k%nCols) + (k/nCols);\n                    char  *dst = pmiT + kT*elSize;\n                    (void)memcpy(dst, src, elSize);\n                    src += elSize;\n                }\n                var->data.re = var->data.im;\n                var->data.im = pmiT;\n            }\n\n            /*******************************\n             * Read the data from the file *\n             *******************************/\n            (void)rewind(fptr);\n            (void)fread(var->data.re, elSize, nEl, fptr);\n            (void)fclose(fptr);\n            (void)remove(fName);\n        } else {\n            for (k=0; k<nEl; k++) {\n                int_T kT   = nRows*(k%nCols) + (k/nCols);\n                char  *dst = pmT + kT*elSize;\n                (void)memcpy(dst, src, elSize);\n                src += elSize;\n            }\n            if (var->data.complex) {\n                char *pmiT = var->data.re;\n                src  = var->data.im;\n                for (k=0; k<nEl; k++) {\n                    int_T kT   = nRows*(k%nCols) + (k/nCols);\n                    char  *dst = pmiT + kT*elSize;\n                    (void)memcpy(dst, src, elSize);\n                    src += elSize;\n                }\n                var->data.re = var->data.im;\n                var->data.im = pmiT;\n            }\n            FREE(var->data.re);\n            var->data.re = pmT;\n        }\n    } /* Transpose? */\n\n    if (var->wrapped > 0 && var->rowIdx != 0 ) {  /* Rotate? */\n        char_T *buffer    = var->data.re;\n        int_T  done       = 0; /* done: 0 (1) rotate real (imag) part. */\n\n        do {\n            char_T *col       = buffer;\n            int_T  rowOffset  = (int_T)((nDims == 1) ? (elSize) : (elSize * nCols));\n            int_T  colOffset  = (int_T)((nDims == 1)?  (nRows*elSize) : elSize);\n            int_T  zeroIdx    = var->rowIdx;\n            int_T  j;\n\n            for (j = 0 ; j < nCols; ++j, col += colOffset) {\n                int_T   swapCount;\n                int_T   srcIdx;\n                int_T   dstIdx;\n                int_T   tmpIdx;\n                MatReal tmp;\n\n                for (tmpIdx=0, swapCount=0; swapCount < nRows; tmpIdx++) {\n                    (void)memcpy(&tmp, col + tmpIdx*rowOffset, elSize);\n\n                    dstIdx=tmpIdx; \n                    srcIdx = ((dstIdx + zeroIdx) % nRows);\n                    while (srcIdx != tmpIdx) {\n                        (void)memcpy(col + dstIdx*rowOffset,\n                                     col + srcIdx*rowOffset,\n                                     elSize);\n                        ++swapCount;\n                        dstIdx = srcIdx;\n                        srcIdx = ((dstIdx + zeroIdx) % nRows);\n                        \n                    }\n                    (void)memcpy(col + dstIdx*rowOffset, &tmp, elSize);\n                    ++swapCount;\n                }\n            }\n            done ++;\n            /* need to rotate the imaginary part */\n        } while ((done == 1) && ((buffer = var->data.im) != NULL));\n\n        var->rowIdx = 0;\n    } /* Rotate? */\n\n    /*\n     * We might have allocated more number of rows than the number of data\n     * points that have been logged, in which case set nRows to nDataPoints\n     * so that only these values get saved.\n     */\n    if (var->nDataPoints < var->data.nRows) {\n        var->data.nRows = var->nDataPoints;\n        if(var->valDims != NULL){\n            size_t elSizeValDims = sizeof(real_T);\n            int_T  k;\n            real_T *dimsData = var->valDims->dimsData + nRows;\n            /* \n               Keep nRows of values and that of valueDimensions consistent \n               for variable-size signals.\n            */\n            var->valDims->nRows = var->data.nRows;\n            /*\n               Also need to move data when shrinking the array size,\n               because valueDimensions data is stored in array format. \n               e.g. maxRows = 4; nRows = 2; nDims = 3;\n               Before fixing up the logVar, the locations of data are as below:\n               (x, y, z -- useful data / o -- junk)\n               a[0] = x    a[4] = y    a[8] = z\n               a[1] = x    a[5] = y    a[9] = z\n               a[2] = o    a[6] = o    a[10]= o\n               a[3] = o    a[7] = o    a[11]= o\n               After fixing up the logVar, we want the data to be stored as:\n               a[0] = x    a[4] = z    a[8] = o\n               a[1] = x    a[5] = z    a[9] = o\n               a[2] = y    a[6] = o    a[10]= o\n               a[3] = y    a[7] = o    a[11]= o\n            */\n            for(k = 1; k < nDims; k++){\n                (void) memmove(dimsData, \n                              var->valDims->dimsData + k*maxRows,\n                              elSizeValDims * nRows);\n                dimsData += nRows;\n            }\n        }\n    }\n    return(NULL);\n\n} /* end rt_FixupLogVar */\n\n\n/* Function: rt_LoadModifiedLogVarName =========================================\n * Abstract:\n *      The name of the logged variable is obtained from the input argument\n *      varName and the nameModifier which is obtained from the simstruct. If\n *      the nameModifier begins with an '_', then nameModifier is post-pended to\n *      varName to obtain the name of the logged variable. If the first\n *      character does not begin with an '_', then the nameModifier is\n *      pre-pended to varName.\n *\n * Examples:\n *     a)  varName = \"tout\" & nameModifier = \"_rt\"  => logVarName = \"tout_rt\"\n *     b)  varName = \"tout\" & nameModifier = \"rt_\"  => logVarName = \"rt_tout\"\n *     c)  varName = \"tout\" & nameModifier = \"none\" => logVarName = \"tout\"\n */\nstatic void rt_LoadModifiedLogVarName(const RTWLogInfo *li,         /* in  */\n                                      const char       *varName,    /* in  */\n                                      char             *logVarName) /* out */\n{\n    int_T        nameLen;\n    const char_T *nameModifier = rtliGetLogVarNameModifier(li);\n\n    if (nameModifier != NULL && strcmp(nameModifier,\"none\")==0) {\n        nameModifier = NULL;\n    }\n\n    logVarName[mxMAXNAM-1] = '\\0';\n    if (nameModifier == NULL) {\n        (void)strncpy(logVarName, varName, mxMAXNAM-1);\n    } else if (nameModifier[0] == '_') {\n        (void)strncpy(logVarName, varName, mxMAXNAM-1);\n        nameLen = (int_T)strlen(logVarName);\n        (void)strncat(logVarName, nameModifier, (size_t)mxMAXNAM-1-nameLen);\n    } else {\n        (void)strncpy(logVarName, nameModifier, mxMAXNAM-1);\n        nameLen = (int_T)strlen(logVarName);\n        (void)strncat(logVarName, varName, (size_t)mxMAXNAM-1-nameLen);\n    }\n\n} /* end rt_LoadModifiedLogVarName */\n\n\n/* Function: rt_GetActualDTypeID ===============================================\n * Abstract:\n *\tGiven a built-in data type id, return the actual data type id.\n *\tThe only time these are different is when real_T has been mapped\n *\tto a single.\n */\n#if defined(_MSC_VER)\n #pragma warning(push)\n #pragma warning(disable: 4127)\n#endif\nstatic BuiltInDTypeId rt_GetActualDTypeID(BuiltInDTypeId dTypeID)\n{\n    /*LINTED E_FALSE_LOGICAL_EXPR*/\n    if (dTypeID == SS_DOUBLE && sizeof(real_T) != 8) {     /* polyspace DEFECT:DEAD_CODE \n                                                              [Not a defect:Unset] \n                                                              \"Needed for when real_T has been \n                                                              mapped to a single\" */\n        return(SS_SINGLE);\n    } else {\n        return(dTypeID);\n    }\n\n} /* end rt_GetActualDTypeID */\n#if defined(_MSC_VER)\n #pragma warning(pop)\n#endif\n\n\n/* Function: rt_DestroyLogVar ==================================================\n * Abstract:\n *      Destroy the log var linked list.\n */\nstatic void rt_DestroyLogVar(LogVar *head)\n{\n    while(head) {\n        LogVar *var = head;\n        head = var->next;\n        FREE(var->data.re);\n        FREE(var->data.im);\n        if (var->data.dims != var->data._dims) {\n            FREE(var->data.dims);\n        }\n        /* free valDims if necessary */\n        if(var->valDims != NULL) {\n            FREE(var->valDims->dimsData);\n            FREE(var->valDims);\n        }\n        /* free coords, strides and currStrides if necessary */\n        FREE(var->coords);\n        FREE(var->strides);\n        FREE(var->currStrides);\n\n        FREE(var);\n    }\n\n} /* end rt_DestroyLogVar */\n\n\n/* Function: rt_DestroyStructLogVar ============================================\n * Abstract:\n *      Destroy the struct log var linked list.\n */\nstatic void rt_DestroyStructLogVar(StructLogVar *head)\n{\n    while(head) {\n        StructLogVar *var = head;\n\n        head = var->next;\n\n        if (var->logTime) { /* time is LogVar */\n            rt_DestroyLogVar(var->time);\n        } else {        /* time is MatrixData */\n            FREE(var->time);\n        }\n        rt_DestroyLogVar(var->signals.values);\n        FREE(var->signals.labels);\n        FREE(var->signals.plotStyles);\n        FREE(var->signals.dimensions);\n        FREE(var->signals.titles);\n        FREE(var->signals.blockNames);\n        FREE(var->signals.stateNames);\n        FREE(var->signals.crossMdlRef);\n        FREE(var->blockName);\n        FREE(var);\n    }\n\n} /* end rt_DestroyStructLogVar */\n\n\n/* Function: rt_InitSignalsStruct ==============================================\n * Abstract:\n *      Initialize the signals structure in the struct log variable.\n *\n * Returns:\n *\t== NULL  => success.\n *\t~= NULL  => failure, the return value is a pointer to the error\n *                           message, which is also set in the simstruct.\n */\nstatic const char_T *rt_InitSignalsStruct(RTWLogInfo             *li,\n                                          const real_T           startTime,\n                                          const real_T           finalTime,\n                                          const real_T           inStepSize,\n                                          const char_T           **errStatus,\n                                          StructLogVar           *var,\n                                          int_T                  maxRows,\n                                          int_T                  decimation,\n                                          real_T                 sampleTime,\n                                          const RTWLogSignalInfo *sigInfo)\n{\n    int_T                i, sigIdx;\n    SignalsStruct        *sig          = &(var->signals);\n    int_T                nSignals      = sigInfo->numSignals;\n    const int_T          *numCols      = sigInfo->numCols;\n    const int_T          *numDims      = sigInfo->numDims;\n    const int_T          *dims         = sigInfo->dims;\n    const BuiltInDTypeId *dTypes       = sigInfo->dataTypes;\n    const int_T          *cSgnls       = sigInfo->complexSignals;\n    const int_T          *fData        = sigInfo->frameData;\n    const char_T         **labels      = sigInfo->labels.cptr;\n    const int_T          *plotStyles   = sigInfo->plotStyles;\n    const char_T         *titles       = sigInfo->titles;\n    const int_T          *titleLen     = sigInfo->titleLengths;\n    const char_T         **blockNames  = sigInfo->blockNames.cptr;\n    const char_T         **stateNames  = sigInfo->stateNames.cptr;\n    const boolean_T      *crossMdlRef  = sigInfo->crossMdlRef;\n    void                 **currSigDims = sigInfo->currSigDims;\n    int_T                *currSigDimsSize = sigInfo->currSigDimsSize;\n    LogVar               *prevValues   = NULL;\n    int_T                dimsOffset    = 0;\n    boolean_T            *isVarDims    = sigInfo->isVarDims;\n    /* if any signal is variable-size, the field 'valueDimensions' is needed */\n    boolean_T            logValueDimensions = false;\n    const RTWLogDataTypeConvert *pDTConvInfo = sigInfo->dataTypeConvert;\n\n    /* reset error status */\n    *errStatus = NULL;\n\n    sig->numActiveFields = 1;\n    sig->numSignals      = nSignals;\n\n    sig->isVarDims = isVarDims;\n    /* check whether we need valueDimensions field*/\n    for (i=0; i<nSignals; i++){\n        if(isVarDims[i]){\n            logValueDimensions = true;\n            break;\n        }\n    }\n\n    /* values */\n    dimsOffset = 0;\n    for (i = 0; i < nSignals; i++) {\n        BuiltInDTypeId dt = (dTypes) ? dTypes[i] : SS_DOUBLE;\n        int_T          cs = (cSgnls) ? cSgnls[i] : 0;\n        int_T          fd = (fData)  ? fData[i]  : 0;\n        int_T          nd = (numDims) ? numDims[i] : 1;\n\n        const RTWLogDataTypeConvert *pDTConvInfoCur =\n                       (pDTConvInfo)  ? (pDTConvInfo+i)  : 0;\n\n        LogVar *values = NULL;\n        LogValDimsStat logValDimsStat;\n\n        if(!logValueDimensions){\n            logValDimsStat = NO_LOGVALDIMS;\n        }\n        else{\n            logValDimsStat = isVarDims[i] ? LOGVALDIMS_VARDIMS :  \n                                            LOGVALDIMS_EMPTYMX;\n        }\n\n        values = rt_CreateLogVarWithConvert(li, startTime, finalTime,\n                                            inStepSize, errStatus,\n                                            &VALUES_FIELD_NAME,\n                                            dt, \n                                            pDTConvInfoCur,\n                                            0, cs, fd,\n                                            numCols[i],nd,\n                                            dims + dimsOffset,\n                                            logValDimsStat,\n                                            currSigDims + dimsOffset,\n                                            currSigDimsSize + dimsOffset,\n                                            maxRows,decimation,sampleTime, 0);\n\n        if (values == NULL) goto ERROR_EXIT;\n\n        if (sig->values == NULL) {\n            sig->values = values;\n        } else {\n            if (prevValues == NULL) goto ERROR_EXIT;\n            prevValues->next = values;\n        }\n        prevValues = values;\n        dimsOffset += nd;\n    }\n\n    if(logValueDimensions){\n        ++sig->numActiveFields;\n        sig->logValueDimensions = true;\n    }\n    else{\n        sig->logValueDimensions = false;\n    }\n\n    /* Dimensions */\n    {\n        real_T         *data;\n        size_t\t       nbytes;\n        int_T          dataLen    = 0;\n        BuiltInDTypeId dTypeId    = rt_GetActualDTypeID(SS_DOUBLE);\n        size_t         dataOffset = nSignals*sizeof(MatrixData);\n        uint_T         overhang   = (uint_T)(dataOffset % sizeof(real_T));\n\n        if (overhang) {                           /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                                                    \"Needed for possible padding determination. */\n            dataOffset += (sizeof(real_T) - overhang);\n        }\n        for (i=0; i< nSignals; i++) {\n            int_T nd = (numDims) ? numDims[i] : 1;\n            dataLen += nd;\n        }\n        nbytes = dataOffset + dataLen*sizeof(real_T);\n\n        if ( (sig->dimensions = calloc(nbytes, 1)) == NULL ) goto ERROR_EXIT;\n\n        data = (real_T*) (((char_T*) (sig->dimensions)) + dataOffset);\n\n        for (i = 0; i < dataLen; i++) {\n          data[i] = dims[i]; /* cannot memcpy double <- int */\n        }\n\n        for (i = 0; i < nSignals; i++) {\n            MatrixData *mtxData = &(sig->dimensions[i]);\n            int_T nd = (numDims) ? numDims[i] : 1;\n\n            (void)memcpy(mtxData->name, &DIMENSION_FIELD_NAME, mxMAXNAM);\n\n            mtxData->nRows   = 1;\n            mtxData->nCols   = nd;\n\n            mtxData->nDims   = 1; /* assume */\n            mtxData->dims    = mtxData->_dims;\n            mtxData->dims[0] = mtxData->nCols;\n\n            mtxData->re      = data;\n            mtxData->im      = NULL;\n            mtxData->dTypeID = dTypeId;\n            mtxData->mxID    = rt_GetMxIdFromDTypeId(dTypeId);\n            mtxData->elSize  = rt_GetSizeofDataType(dTypeId);\n            mtxData->logical = 0U;\n            mtxData->complex = 0U;\n\n            data += nd;\n        }\n        ++sig->numActiveFields;\n    }\n\n    /* labels */\n    if (labels != NULL) {\n        unsigned short   *data;\n        size_t  nbytes;\n        int_T   dataLen    = 0;\n        size_t  dataOffset = nSignals * sizeof(MatrixData);\n        uint_T  overhang   = (uint_T)(dataOffset % sizeof(short));\n        int_T dataIdx = 0;\n\n        for (i=0;i<nSignals;i++) {\n            if (labels[i] != NULL){\n                dataLen = dataLen + (int_T)strlen(labels[i]);\n            }\n        }\n\n        if (overhang) {                           /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                                                    \"Needed for possible padding determination. */\n            dataOffset += (sizeof(short) - overhang);\n        }\n        nbytes = dataOffset + dataLen*sizeof(short);\n\n        if ( (sig->labels = calloc(nbytes, 1)) == NULL ) goto ERROR_EXIT;\n\n        data = (unsigned short*) (((char_T*) (sig->labels)) + dataOffset);\n        for(sigIdx=0;sigIdx<nSignals;sigIdx++) {\n            int_T labelLen = (labels[sigIdx]==NULL) ? 0 : (int_T)strlen(labels[sigIdx]);\n            for (i = 0; i < labelLen; i++) {\n                data[dataIdx++] = (uint8_T)labels[sigIdx][i];\n            }\n        }\n\n        for (i = 0; i < nSignals; i++) {\n            MatrixData *mtxData = &(sig->labels[i]);\n            int_T labelLen = (int_T)strlen(labels[i]);\n\n            (void)memcpy(mtxData->name, &LABEL_FIELD_NAME, mxMAXNAM);\n            mtxData->nRows   = (labelLen) ? 1 : 0;\n            mtxData->nCols   = labelLen;\n\n            mtxData->re      = data;\n            mtxData->im      = NULL;\n\n            mtxData->nDims   = 1; /* assume */\n            mtxData->dims    = mtxData->_dims;\n            mtxData->dims[0] = mtxData->nCols;\n\n            mtxData->dTypeID = SS_INT16;\n            mtxData->mxID    = mxCHAR_CLASS;\n            mtxData->elSize  = sizeof(short);\n            mtxData->logical = 0U;\n            mtxData->complex = 0U;\n\n            data += labelLen;\n        }\n        ++sig->numActiveFields;\n    }\n\n    /* plot styles */\n    if (plotStyles != NULL) {\n        real_T         *data;\n        size_t\t       nbytes;\n        int_T          dataLen    = 0;\n        BuiltInDTypeId dTypeId    = rt_GetActualDTypeID(SS_DOUBLE);\n        /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n        size_t         dataOffset = nSignals*sizeof(MatrixData);\n        /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n        uint_T         overhang   = (uint_T)(dataOffset % sizeof(real_T));\n\n        if (overhang) {                           /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                                                    \"Needed for possible padding determination. */\n            dataOffset += (sizeof(real_T) - overhang);\n        }\n        for (i=0; i< nSignals; i++) {\n            dataLen += numCols[i];\n        }\n        /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n        nbytes = dataOffset + dataLen*sizeof(real_T);\n\n        if ( (sig->plotStyles = calloc(nbytes, 1)) == NULL ) goto ERROR_EXIT;\n\n        /*LINTED E_BAD_PTR_CAST_ALIGN*/\n        data = (real_T*) (((char_T*) (sig->plotStyles)) + dataOffset);\n\n        for (i = 0; i < dataLen; i++) {\n            data[i] = plotStyles[i];\n        }\n\n        dimsOffset = 0;\n        for (i = 0; i < nSignals; i++) {\n            MatrixData *mtxData = &(sig->plotStyles[i]);\n            \n            (void)memcpy(mtxData->name, &PLOTSTYLE_FIELD_NAME, mxMAXNAM);\n\n            mtxData->nRows   = (numCols[i]) ? 1 : 0;\n            mtxData->nCols   = numCols[i];\n\n            mtxData->nDims   = numDims[i];\n            \n            if(mtxData->nDims > 2) {\n                if ((mtxData->dims = calloc(mtxData->nDims, sizeof(int_T))) == NULL) goto ERROR_EXIT;\n            } else {\n                mtxData->dims    = mtxData->_dims;\n            }\n            \n            mtxData->dims[0] = *(dims + dimsOffset);\n            if(mtxData->nDims >= 2) {\n                int32_T j;\n                for (j=1; j<mtxData->nDims; j++) {\n                    mtxData->dims[j] = *(dims + dimsOffset + j);\n                }\n            }\n\n            mtxData->re      = data;\n            mtxData->im      = NULL;\n            mtxData->dTypeID = dTypeId;\n            mtxData->mxID    = rt_GetMxIdFromDTypeId(dTypeId);\n            mtxData->elSize  = rt_GetSizeofDataType(dTypeId);\n            mtxData->logical = 0U;\n            mtxData->complex = 0U;\n\n            data       += numCols[i];\n            dimsOffset += numDims[i];\n        }\n        ++sig->numActiveFields;\n    }\n\n    /* titles */\n    if (titles != NULL) {\n        unsigned short  *data;\n        size_t nbytes;\n        int_T  dataLen    = (int_T)strlen(titles);\n        /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n        size_t  dataOffset = nSignals * sizeof(MatrixData);\n        /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n        uint_T  overhang   = (uint_T)(dataOffset % sizeof(short));\n\n        if (overhang) {                           /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                                                    \"Needed for possible padding determination. */\n            dataOffset += (sizeof(short) - overhang);\n        }\n        /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n        nbytes = dataOffset + dataLen*sizeof(short);\n\n        if ( (sig->titles = calloc(nbytes, 1)) == NULL ) goto ERROR_EXIT;\n\n        /*LINTED E_BAD_PTR_CAST_ALIGN*/\n        data = (unsigned short*) (((char_T*) (sig->titles)) + dataOffset);\n        for (i = 0; i < dataLen; i++) {\n            data[i] = titles[i];\n        }\n\n        for (i = 0; i < nSignals; i++) {\n            MatrixData *mtxData = &(sig->titles[i]);\n\n            (void)memcpy(mtxData->name, &TITLE_FIELD_NAME, mxMAXNAM);\n            if (titleLen) {\n                mtxData->nRows   = (titleLen[i]) ? 1 : 0;\n                mtxData->nCols   = titleLen[i];\n            } else {\n                mtxData->nRows   = (dataLen) ? 1 : 0;\n                mtxData->nCols   = dataLen;\n            }\n\n            mtxData->nDims   = 1; /* assume */\n            mtxData->dims    = mtxData->_dims;\n            mtxData->dims[0] = mtxData->nCols;\n\n            mtxData->re      = data;\n            mtxData->im      = NULL;\n            mtxData->dTypeID = SS_INT16;\n            mtxData->mxID    = mxCHAR_CLASS;\n            mtxData->elSize  = sizeof(short);\n            mtxData->logical = 0U;\n            mtxData->complex = 0U;\n\n            data += ((titleLen) ? titleLen[i] : dataLen);\n        }\n        ++sig->numActiveFields;\n    }\n\n    /* block names */\n    if (blockNames != NULL)     {\n        unsigned short  *data;\n        size_t nbytes;\n        int_T  dataLen = 0;\n        size_t dataOffset = nSignals * sizeof(MatrixData);\n        uint_T overhang   = (uint_T)(dataOffset % sizeof(short));\n        int_T  dataIdx = 0;\n\n        for (i=0;i<nSignals;i++) {\n            if (blockNames[i] != NULL) {\n                dataLen = dataLen + (int_T)strlen(blockNames[i]);\n            }\n        }\n\n        if (overhang) {                           /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                                                    \"Needed for possible padding determination. */\n            dataOffset += (sizeof(short) - overhang);\n        }\n\n        nbytes = dataOffset + dataLen*sizeof(short);\n\n        if ( (sig->blockNames = calloc(nbytes, 1)) == NULL ) goto ERROR_EXIT;\n\n        data = (unsigned short*) (((char_T*) (sig->blockNames)) + dataOffset);\n\n        for(sigIdx=0;sigIdx<nSignals;sigIdx++) {\n            int_T nameLen = (blockNames[sigIdx]==NULL) ? 0 : \n                (int_T)strlen(blockNames[sigIdx]);\n            for (i = 0; i < nameLen; i++) {\n                data[dataIdx++] = (uint8_T)blockNames[sigIdx][i];\n            }\n        }\n\n        for (i = 0; i < nSignals; i++) {\n            MatrixData *mtxData = &(sig->blockNames[i]);\n            int_T blockNameLen = (int_T)strlen(blockNames[i]);\n\n            (void)memcpy(mtxData->name, &BLOCKNAME_FIELD_NAME, mxMAXNAM);\n            mtxData->nRows   = (blockNameLen) ? 1 : 0;\n            mtxData->nCols   = blockNameLen;\n\n            mtxData->nDims   = 1; /* assume */\n            mtxData->dims    = mtxData->_dims;\n            mtxData->dims[0] = mtxData->nCols;\n\n            mtxData->re      = data;\n            mtxData->im      = NULL;\n            mtxData->dTypeID = SS_INT16;\n            mtxData->mxID    = mxCHAR_CLASS;\n            mtxData->elSize  = sizeof(short);\n            mtxData->logical = 0U;\n            mtxData->complex = 0U;\n\n            data += blockNameLen;\n        }\n        ++sig->numActiveFields;\n        if(logValueDimensions){\n            sig->fieldNames = rtGlobalLoggingSignalsStructFieldNames;\n        }\n        else{\n            sig->fieldNames = rtGlobalLoggingSignalsStructFieldNames_noValDims;\n        }\n\n    } else {\n        if(logValueDimensions){\n            sig->fieldNames = rtLocalLoggingSignalsStructFieldNames;\n        }\n        else{\n            sig->fieldNames = rtLocalLoggingSignalsStructFieldNames_noValDims;\n        }\n\n    }\n\n    /* state names */\n    if (stateNames != NULL) {\n        unsigned short  *data;\n        size_t nbytes;\n        int_T  dataLen = 0;\n        size_t dataOffset = nSignals * sizeof(MatrixData);\n        uint_T overhang   = (uint_T)(dataOffset % sizeof(short));\n        int_T  dataIdx = 0;\n\n        for (i=0;i<nSignals;i++) {\n            if (stateNames[i] != NULL) {\n                dataLen = dataLen + (int_T)strlen(stateNames[i]);\n            }\n        }\n\n        if (overhang) {                           /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                                                    \"Needed for possible padding determination. */\n            dataOffset += (sizeof(short) - overhang);\n        }\n\n        nbytes = dataOffset + dataLen*sizeof(short);\n\n        if ( (sig->stateNames = calloc(nbytes, 1)) == NULL ) goto ERROR_EXIT;\n\n        data = (unsigned short*) (((char_T*) (sig->stateNames)) + dataOffset);\n\n        for(sigIdx=0;sigIdx<nSignals;sigIdx++) {\n            int_T nameLen = (stateNames[sigIdx]==NULL) ? 0 : \n                (int_T)strlen(stateNames[sigIdx]);\n            for (i = 0; i < nameLen; i++) {\n                data[dataIdx++] = (uint8_T)stateNames[sigIdx][i];\n            }\n        }\n\n        for (i = 0; i < nSignals; i++) {\n            MatrixData *mtxData = &(sig->stateNames[i]);\n            int_T stateNameLen = (int_T)strlen(stateNames[i]);\n\n            (void)memcpy(mtxData->name, &STATENAME_FIELD_NAME, mxMAXNAM);\n            mtxData->nRows   = (stateNameLen) ? 1 : 0;\n            mtxData->nCols   = stateNameLen;\n\n            mtxData->nDims   = 1; /* assume */\n            mtxData->dims    = mtxData->_dims;\n            mtxData->dims[0] = mtxData->nCols;\n\n            mtxData->re      = data;\n            mtxData->im      = NULL;\n            mtxData->dTypeID = SS_INT16;\n            mtxData->mxID    = mxCHAR_CLASS;\n            mtxData->elSize  = sizeof(short);\n            mtxData->logical = 0U;\n            mtxData->complex = 0U;\n\n            data += stateNameLen;\n        }\n        ++sig->numActiveFields;\n\n        if(logValueDimensions){\n            sig->fieldNames = rtGlobalLoggingSignalsStructFieldNames;\n        }\n        else{\n            sig->fieldNames = rtGlobalLoggingSignalsStructFieldNames_noValDims;\n        }\n\n    }\n\n    /* CrossMdlRef */\n    if (crossMdlRef != NULL) {\n        real_T  *data;\n        size_t nbytes;\n        size_t dataOffset = nSignals * sizeof(MatrixData);\n        uint_T overhang   = (uint_T)(dataOffset % sizeof(real_T));\n\n        if (overhang) {                           /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                                                    \"Needed for possible padding determination. */\n            dataOffset += (sizeof(real_T) - overhang);\n        }\n\n        nbytes = dataOffset + nSignals*sizeof(real_T);\n\n        if ( (sig->crossMdlRef = calloc(nbytes, 1)) == NULL ) goto ERROR_EXIT;\n\n        data = (real_T*) (((char_T*) (sig->crossMdlRef)) + dataOffset);\n\n        for(sigIdx=0;sigIdx<nSignals;sigIdx++) {\n            data[sigIdx] = crossMdlRef[sigIdx];\n        }\n\n        for (i = 0; i < nSignals; i++) {\n            MatrixData *mtxData = &(sig->crossMdlRef[i]);\n\n            (void)memcpy(mtxData->name, &CROSS_MDL_REF_FIELD_NAME, mxMAXNAM);\n            mtxData->nRows   = 1;\n            mtxData->nCols   = 1;\n            mtxData->nDims   = 1; /* => matlab scalar */\n\n            mtxData->re      = &data[i];\n            mtxData->im      = NULL;\n            mtxData->dTypeID = SS_DOUBLE;\n            mtxData->mxID    = rt_GetMxIdFromDTypeId(SS_DOUBLE);\n            mtxData->elSize  = sizeof(real_T);\n            mtxData->logical = matLOGICAL_BIT;\n            mtxData->complex = 0U;\n            mtxData->frameData = 0;\n            mtxData->frameSize = 1;\n        }\n        ++sig->numActiveFields;\n    }\n    \n    return(NULL); /* NORMAL_EXIT */\n\n  ERROR_EXIT:\n\n    (void)fprintf(stderr, \"*** Error creating signals structure \"\n                  \"in the struct log variable %s\\n\", var->name);\n    if (*errStatus == NULL) {\n        *errStatus = rtMemAllocError;\n    }\n    rt_DestroyLogVar(sig->values);\n    FREE(sig->labels);\n    FREE(sig->plotStyles);\n    FREE(sig->dimensions);\n    FREE(sig->titles);\n    FREE(sig->blockNames);\n    FREE(sig->stateNames);\n    FREE(sig->crossMdlRef);\n    return(*errStatus);\n\n} /* end rt_InitSignalsStruct */\n\n\n/* Function: local_CreateStructLogVar ==========================================\n * Abstract:\n *      Create a logging variable in the structure format.\n *\n * Returns:\n *      ~= NULL  => success, returns the log variable created.\n *      == NULL  => failure, error message set in the simstruct.\n */\nstatic StructLogVar *local_CreateStructLogVar(\n    RTWLogInfo              *li,\n    const real_T            startTime,\n    const real_T            finalTime,\n    const real_T            inStepSize,\n    const char_T            **errStatus,\n    const char_T            *varName,\n    boolean_T               logTime,\n    int_T                   maxRows,\n    int_T                   decimation,\n    real_T                  sampleTime,\n    const RTWLogSignalInfo  *sigInfo,\n    const char_T            *blockName)\n{\n    StructLogVar *var;\n    LogInfo      *logInfo = rtliGetLogInfo(li);\n\n    /* reset error status */\n    *errStatus = NULL;\n\n    if ( (var = calloc(1, sizeof(StructLogVar))) == NULL ) goto ERROR_EXIT;\n\n    var->numActiveFields = 2;\n\n    /* Setup the structure name using varName and nameModifier */\n    rt_LoadModifiedLogVarName(li,varName,var->name);\n\n    /* time field */\n    if (logTime) {\n        /* need to create a LogVar to log time */\n        int_T dims = 1;\n        var->time = rt_CreateLogVarWithConvert(li, startTime, finalTime,\n                                               inStepSize, errStatus,\n                                               &TIME_FIELD_NAME, SS_DOUBLE, \n                                               NULL,\n                                               0, 0, 0, 1,\n                                               1, &dims, NO_LOGVALDIMS, \n                                               NULL, NULL, maxRows,\n                                               decimation, sampleTime, 0);\n        if (var->time == NULL) goto ERROR_EXIT;\n    } else {\n        /* create a dummy MatrixData to write out time as an empty matrix */\n        BuiltInDTypeId dt     = rt_GetActualDTypeID(SS_DOUBLE);\n        size_t         nbytes = sizeof(MatrixData);\n        MatrixData     *time;\n\n        if ( (var->time = calloc(nbytes, 1)) == NULL ) goto ERROR_EXIT;\n        time = var->time;\n\n        (void)memcpy(time->name, &TIME_FIELD_NAME, mxMAXNAM);\n        time->nRows   = 0;\n        time->nCols   = 0;\n        time->nDims   = 0;\n        time->re      = NULL;\n        time->im      = NULL;\n        time->dTypeID = dt;\n        time->mxID    = rt_GetMxIdFromDTypeId(dt);\n        time->elSize  = rt_GetSizeofDataType(dt);\n        time->logical = 0U;\n        time->complex = 0U;\n    }\n    var->logTime = logTime;\n\n    /* signals field */\n    if (sigInfo) {\n        if (rt_InitSignalsStruct(li,startTime,finalTime,inStepSize,errStatus,\n                                 var,maxRows,decimation,sampleTime,sigInfo)) {\n            goto ERROR_EXIT;\n        }\n    }\n\n    /* blockName Field */\n    if (blockName != NULL) {\n        int_T  dataLen = (int_T)strlen(blockName);\n        size_t nbytes;\n        size_t dataOffset = sizeof(MatrixData);\n        /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n        uint_T overhang   = (uint_T)(dataOffset % sizeof(short));\n\n        if (overhang) {                           /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                                                    \"Needed for possible padding determination. */\n            dataOffset += (sizeof(short) - overhang);\n        }\n        /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n        nbytes = dataOffset + dataLen*sizeof(short);\n\n        if ( (var->blockName = calloc(nbytes, 1)) == NULL ) goto ERROR_EXIT;\n\n        (void)memcpy(var->blockName->name, &BLOCKNAME_FIELD_NAME, mxMAXNAM);\n        var->blockName->nRows   = (dataLen) ? 1 : 0;\n        var->blockName->nCols   = dataLen;\n\n        var->blockName->nDims   = 1;\n        var->blockName->dims    = var->blockName->_dims;\n        var->blockName->dims[0] = dataLen;\n        {\n            /*LINTED E_BAD_PTR_CAST_ALIGN*/\n            unsigned short *data = (unsigned short*)(((char_T*) (var->blockName))+dataOffset);\n            int_T   i;\n\n            for (i=0; i<dataLen; i++) {\n                data[i] = (uint8_T)blockName[i];\n            }\n            var->blockName->re  = data;\n        }\n        var->blockName->im      = NULL;\n        var->blockName->dTypeID = SS_INT16;\n        var->blockName->mxID    = mxCHAR_CLASS;\n        var->blockName->elSize  = sizeof(short);\n        var->blockName->logical = 0U;\n        var->blockName->complex = 0U;\n\n        ++var->numActiveFields;\n    }\n\n    /* Add this struct log var to the linked list in log info */\n    {\n        StructLogVar *list = logInfo->structLogVarsList;\n\n        if (list != NULL) {\n            while (list->next != NULL) {\n                list = list->next;\n            }\n            list->next = var;\n        } else {\n            logInfo->structLogVarsList = var;\n        }\n    }\n\n    return(var); /* NORMAL_EXIT */\n\n ERROR_EXIT:\n    (void)fprintf(stderr, \"*** Error creating log variable %s\\n\", varName);\n    if (*errStatus == NULL) {\n        *errStatus = rtMemAllocError;\n    }\n    rt_DestroyStructLogVar(var);\n    return(NULL);\n\n} /* end local_CreateStructLogVar */\n\n\n/* Function: rt_StartDataLoggingForOutput ======================================\n * Abstract:\n */\nstatic const char_T *rt_StartDataLoggingForOutput(RTWLogInfo   *li,\n                                                  const real_T startTime,\n                                                  const real_T finalTime,\n                                                  const real_T stepSize,\n                                                  const char_T **errStatus)\n{\n    const char_T   *varName;\n    real_T         sampleTime = stepSize;\n    int_T          maxRows    = rtliGetLogMaxRows(li);\n    int_T          decimation = rtliGetLogDecimation(li);\n    int_T          logFormat  = rtliGetLogFormat(li);\n    boolean_T      logTime    = (logFormat==2) ? 1 : 0;\n\n    LogInfo *       logInfo;\n    logInfo = rtliGetLogInfo(li);\n\n    /* reset error status */\n    *errStatus = NULL;\n\n    /* outputs */\n    varName = rtliGetLogY(li);\n    if (varName[0] != '\\0') {\n        int_T                  i;\n        int_T                  ny;\n        int_T                  yIdx;\n        char_T                 name[mxMAXNAM];\n        const char_T           *cp        = strchr(varName,',');\n        LogSignalPtrsType      ySigPtrs   = rtliGetLogYSignalPtrs(li);\n        const RTWLogSignalInfo *yInfo     = rtliGetLogYSignalInfo(li);\n\n        /* count the number of variables (matrices or structures) to create */\n        for (ny=1; cp != NULL; ny++) {\n            cp = strchr(cp+1,',');\n        }\n        logInfo->ny = ny;\n\n        if (logFormat==0) {\n            if ( (logInfo->y = calloc(ny,sizeof(LogVar*))) == NULL ) {\n                *errStatus = rtMemAllocError;\n                goto ERROR_EXIT;\n            }\n        } else {\n            if ( (logInfo->y = calloc(ny,sizeof(StructLogVar*))) == NULL ) {\n                *errStatus = rtMemAllocError;\n                goto ERROR_EXIT;\n            }\n        }\n\n        for (i = yIdx = 0, cp = varName; i < ny; i++) {\n            int_T        len;\n            const char_T *cp1 = strchr(cp+1,',');\n\n            if (cp1 != NULL) {\n                /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n                len = (int_T)(cp1 - cp);\n                if (len >= mxMAXNAM) len = mxMAXNAM - 1;\n            } else {\n                len = mxMAXNAM - 1;\n            }\n            (void)strncpy(name, cp, len);\n            name[len] = '\\0';\n\n            if (ny > 1 && ySigPtrs[i] == NULL) {\n                goto NEXT_NAME;\n            }\n\n            if (logFormat == 0) {\n                int            numCols;\n                int            nDims;\n                const int      *dims;\n                BuiltInDTypeId dataType;\n                int            isComplex;\n\n                if (ny == 1) {\n                    int_T op;\n\n                    numCols = yInfo[0].numCols[0];\n                    for (op = 1; op < yInfo[0].numSignals; op++) {\n                        numCols += yInfo[0].numCols[op];\n                    }\n                    /*\n                     * If we have only one \"matrix\" outport,\n                     * we can still log it as a matrix\n                     */\n                    if (yInfo[0].numSignals == 1) {\n                        nDims = yInfo[0].numDims ? yInfo[0].numDims[0] : 1;\n                        dims  = yInfo[0].dims;\n                    } else {\n                        nDims = 1;\n                        dims  = &numCols;\n                    }\n\n                    dataType  = yInfo[0].dataTypes[0];\n                    isComplex = yInfo[0].complexSignals[0];\n                } else {\n                    numCols   = yInfo[yIdx].numCols[0];\n                    nDims     = yInfo[yIdx].numDims ? yInfo[yIdx].numDims[0] : 1;\n                    dims      = yInfo[yIdx].dims;\n                    dataType  = yInfo[yIdx].dataTypes[0];\n                    isComplex = yInfo[yIdx].complexSignals[0];\n                }\n\n                logInfo->y[yIdx] = rt_CreateLogVarWithConvert(\n                    li, startTime, finalTime,\n                    stepSize, errStatus,\n                    name,\n                    dataType,\n                    yInfo[yIdx].dataTypeConvert,\n                    0,isComplex,\n                    0,numCols,nDims,dims,\n                    NO_LOGVALDIMS, NULL, NULL,\n                    maxRows,decimation,\n                    sampleTime,1);\n                if (logInfo->y[yIdx] == NULL)  goto ERROR_EXIT;\n            } else {\n                logInfo->y[yIdx] = local_CreateStructLogVar(li, startTime,\n                                                            finalTime, stepSize,\n                                                            errStatus, name,\n                                                            logTime, maxRows,\n                                                            decimation, sampleTime,\n                                                            &yInfo[yIdx], NULL);\n                if (logInfo->y[yIdx] == NULL) goto ERROR_EXIT;\n            }\n            ++yIdx;\n        NEXT_NAME:\n            cp = cp1;\n            if (cp != NULL && *cp == ',') cp++;\n        }\n    }\n\n    return(NULL); /* NORMAL_EXIT */\n\n ERROR_EXIT:\n    (void)fprintf(stderr, \"*** Errors occurred when starting data logging.\\n\");\n    if (*errStatus == NULL) {\n        *errStatus = rtMemAllocError;\n    }\n    if (logInfo) { /* polyspace DEFECT:USELESS_IF [No action planned:Unset] \n                     \"Defense coding.\" */\n        rt_DestroyLogVar(logInfo->logVarsList);\n        logInfo->logVarsList = NULL;\n        rt_DestroyStructLogVar(logInfo->structLogVarsList);\n        logInfo->structLogVarsList = NULL;\n        FREE(logInfo->y);\n        logInfo->y = NULL;\n    }\n    return(*errStatus);\n\n} /* end rt_StartDataLoggingForOutput */\n\n\n/* Function: rt_ReallocLogVar ==================================================\n * Abstract:\n *   Allocate more memory for the data buffers in the log variable.\n *   Exit if unable to allocate more memory.\n */\nstatic void rt_ReallocLogVar(LogVar *var, boolean_T isVarDims)\n{\n    void *tmp;\n    int_T nCols = var->data.nCols;\n    int_T nRows;\n    size_t elSize = var->data.elSize;\n\n    if (isVarDims)\n    {\n        nRows = var->data.nRows + DEFAULT_BUFFER_SIZE;\n    }\n    else\n    {\n        nRows = var->data.nRows == 0 ? 1 : 2*var->data.nRows;\n    }\n    \n    tmp = realloc(var->data.re, nRows*nCols*elSize);\n    if (tmp == NULL) {\n        (void)fprintf(stderr,\n                      \"*** Memory allocation error.\\n\");\n        (void)fprintf(stderr, \"\"\n                      \"    varName          = %s%s\\n\"\n                      \"    nRows            = %d\\n\"\n                      \"    nCols            = %d\\n\"\n                      \"    elementSize      = %lu\\n\"\n                      \"    Current Size     = %.16g\\n\"\n                      \"    Failed resize    = %.16g\\n\\n\",\n                      var->data.name,\n                      var->data.complex ? \" (real part)\" : \"\",\n                      var->data.nRows,\n                      var->data.nCols,\n                      (unsigned long)  var->data.elSize,\n                      (double)nRows*nCols*elSize,\n                      (double)(nRows+DEFAULT_BUFFER_SIZE)*nCols*elSize);\n        exit(1);\n    }\n    var->data.re = tmp;\n\n    if (var->data.complex) {\n        tmp = realloc(var->data.im, nRows*nCols*elSize);\n        if (tmp == NULL) {\n            (void)fprintf(stderr,\n                          \"*** Memory allocation error.\\n\");\n            (void)fprintf(stderr, \"\"\n                          \"    varName          = %s (complex part)\\n\"\n                          \"    nRows            = %d\\n\"\n                          \"    nCols            = %d\\n\"\n                          \"    elementSize      = %lu\\n\"\n                          \"    Current Size     = %.16g\\n\"\n                          \"    Failed resize    = %.16g\\n\\n\",\n                          var->data.name,\n                          var->data.nRows,\n                          var->data.nCols,\n                          (unsigned long)  var->data.elSize,\n                          (double)nRows*nCols*elSize,\n                          (double)(nRows+DEFAULT_BUFFER_SIZE)*nCols*elSize);\n            exit(1);\n        }\n        var->data.im = tmp;\n    }\n    var->data.nRows = nRows;\n\n    /* Also reallocate memory for \"valueDimensions\" \n       when logging the variable-size signal\n    */\n    if(isVarDims){\n        int_T k;\n        \n        nCols = var->valDims->nCols;\n        nRows = var->valDims->nRows + DEFAULT_BUFFER_SIZE;\n        elSize = sizeof(real_T);\n        tmp = realloc(var->valDims->dimsData, nRows*nCols*elSize);\n        if (tmp == NULL) {\n            (void)fprintf(stderr,\n                          \"*** Memory allocation error.\\n\");\n            (void)fprintf(stderr, \"\"\n                          \"    varName          = %s\\n\"\n                          \"    nRows            = %d\\n\"\n                          \"    nCols            = %d\\n\"\n                          \"    elementSize      = %lu\\n\"\n                          \"    Current Size     = %.16g\\n\"\n                          \"    Failed resize    = %.16g\\n\\n\",\n                          var->valDims->name,\n                          var->valDims->nRows,\n                          var->valDims->nCols,\n                          (unsigned long)  elSize,\n                          (double)nRows*nCols*elSize,\n                          (double)(nRows+DEFAULT_BUFFER_SIZE)*nCols*elSize);\n            exit(1);\n        }\n\n        /*\n         * valueDimensions data is stored in array format and must be\n         * adjusted after reallocation (see also rt_FixupLogVar())\n         *\n         * Example: maxRows = 4; nRows = 4; nDims = 3;\n         * Before realloc of the logVar, the locations of data are as below:\n         * (x, y, z -- useful data / o -- junk, don't care)\n         * a[0] = x    a[4] = y    a[8] = z\n         * a[1] = x    a[5] = y    a[9] = z\n         * a[2] = x    a[6] = y    a[10]= z\n         * a[3] = x    a[7] = y    a[11]= z\n         *\n         * After realloc of the logVar (suppose 2 extra rows are added),\n         * the locations of data are as below:\n         * a[0] = x    a[6] = y    a[12]= o\n         * a[1] = x    a[7] = y    a[13]= o\n         * a[2] = x    a[8] = z    a[14]= o\n         * a[3] = x    a[9] = z    a[15]= o\n         * a[4] = y    a[10]= z    a[16]= o\n         * a[5] = y    a[11]= z    a[17]= o\n         *\n         * The data must be adjusted as below:\n         * a[0] = x    a[6] = y    a[12]= z\n         * a[1] = x    a[7] = y    a[13]= z\n         * a[2] = x    a[8] = y    a[14]= z\n         * a[3] = x    a[9] = y    a[15]= z\n         * a[4] = o    a[10]= o    a[16]= o\n         * a[5] = o    a[11]= o    a[17]= o\n         */\n        for(k = var->data.nDims-1; k > 0; k--){\n            (void) memcpy((real_T*)tmp + k*nRows, \n                          (real_T*)tmp + k*var->valDims->nRows,\n                          elSize * var->valDims->nRows);\n        }\n\n        var->valDims->dimsData = tmp;\n        var->valDims->nRows = nRows;\n    }\n\n} /* end rt_ReallocLogVar */\n\nconst char_T *rt_UpdateLogVarWithDiscontiguousData(LogVar                 *var,\n                                             int8_T**               data,\n                                             const int_T            *segmentLengths,\n                                             int_T                  nSegments,\n                                             RTWPreprocessingFcnPtr *preprocessingPtrs);\n                                             \n/* Function: rt_UpdateLogVarWithDiscontinuousData ==============================\n * Abstract:\n *      Log one row of the LogVar with data that is not contiguous.\n */\nconst char_T *rt_UpdateLogVarWithDiscontiguousData(LogVar                 *var,\n                                             int8_T**               data,\n                                             const int_T            *segmentLengths,\n                                             int_T                  nSegments,\n                                             RTWPreprocessingFcnPtr *preprocessingPtrs)\n{\n    size_t elSize = 0;\n    size_t offset = 0;\n    int    segIdx = 0;\n\n    if (++var->numHits % var->decimation) return(NULL);\n    var->numHits = 0;\n\n    /*\n     * Reallocate or wrap the LogVar\n     */\n    if (var->rowIdx == var->data.nRows) {\n        if (var->okayToRealloc == 1) {\n            rt_ReallocLogVar(var, false);\n        } else {\n            /* Circular buffer */\n            var->rowIdx = 0;\n            ++(var->wrapped); /* increment the wrap around counter */\n        }\n    }\n\n    /* This function is only used to log states, there's no var-dims issue. */\n    elSize = var->data.elSize;\n    offset = (size_t)(elSize * var->rowIdx * var->data.nCols);\n\n    if (var->data.complex) {\n        char_T *dstRe = (char_T*)(var->data.re) + offset;\n        char_T *dstIm = (char_T*)(var->data.im) + offset;\n\n        for (segIdx = 0; segIdx < nSegments; segIdx++) {\n            int_T         nEl  = segmentLengths[segIdx];\n            char_T *src        = (char_T *)data[segIdx];\n            int_T         el;\n\n            /* preprocess data in-place before logging */\n            RTWPreprocessingFcnPtr preprocessingPtr = preprocessingPtrs[segIdx];\n            if (preprocessingPtr != NULL) {\n                src = malloc(elSize * nEl * 2);\n                preprocessingPtr(src, (void *)data[segIdx]);\n            }\n\n            if (src == NULL) {\n                const char_T *errorMessage = \"Could not allocate memory for logging.\";\n                fprintf(stderr,\"%s.\\n\", errorMessage);\n                return(errorMessage);\n            }\n            else {\n                for (el = 0; el < nEl; el++) {\n                    (void)memcpy(dstRe, src, elSize);\n                    dstRe += elSize;   src += elSize;\n                    (void)memcpy(dstIm, src, elSize);\n                    dstIm += elSize;   src += elSize;\n                }\n            }\n\n            /* free temporarily declared data */\n            if (preprocessingPtr != NULL) {\n                free( src );\n            }\n        }\n    } else {\n        char_T *dst = (char_T*)(var->data.re) + offset;\n\n        for (segIdx = 0; segIdx < nSegments; segIdx++) {\n            size_t      segSize = elSize*segmentLengths[segIdx];\n            char_T *src         = (void *) data[segIdx];\n\n            /* preprocess data in-place before logging */\n            RTWPreprocessingFcnPtr preprocessingPtr = preprocessingPtrs[segIdx];\n            if (preprocessingPtr != NULL) {\n                src = malloc(segSize);\n                preprocessingPtr(src, data[segIdx]);\n            }\n            if (src == NULL) {\n                const char_T *errorMessage = \"Could not allocate memory for logging.\";\n                fprintf(stderr,\"%s.\\n\", errorMessage);\n                return(errorMessage);            }\n            else {\n                (void)memcpy(dst, src, segSize);\n                dst += segSize;\n            }\n\n            /* free temporarily declared data */\n            if (preprocessingPtr != NULL) {\n                free( src );\n            }\n        }\n    }\n\n    ++var->rowIdx;\n    return(NULL);\n\n} /* end rt_UpdateLogVarWithDiscontinuousData */\n\n\n/*==================*\n * Visible routines *\n *==================*/\n\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n \n/* Function: rt_CreateLogVarWithConvert ========================================\n * Abstract:\n *\tCreate a logging variable.\n *\n * Returns:\n *\t~= NULL  => success, returns the log variable created.\n *\t== NULL  => failure, error message set in the simstruct.\n */\nLogVar *rt_CreateLogVarWithConvert(\n    RTWLogInfo        *li,\n    const real_T      startTime,\n    const real_T      finalTime,\n    const real_T      inStepSize,\n    const char_T      **errStatus,\n    const char_T      *varName,\n    BuiltInDTypeId    inpDataTypeID,\n    const RTWLogDataTypeConvert *pDataTypeConvertInfo,\n    int_T             logical,\n    int_T             complex,\n    int_T             frameData,\n    int_T             nCols,\n    int_T             nDims,\n    const int_T       *dims,\n    LogValDimsStat    logValDimsStat,\n    void              **currSigDims,\n    int_T             *currSigDimsSize,\n    int_T             maxRows,\n    int_T             decimation,\n    real_T            sampleTime,\n    int_T             appendToLogVarsList)\n{\n    int_T          usingDefaultBufSize = 0;\n#ifdef NO_LOGGING_REALLOC\n    int_T          okayToRealloc       = 0;\n#else\n    int_T          okayToRealloc       = 1;\n#endif\n    LogVar         *var                = NULL;\n    /*inpDataTypeID is the rt_LoggedOutputDataTypeId*/\n    BuiltInDTypeId dTypeID             = (BuiltInDTypeId)inpDataTypeID; \n    size_t         elementSize         = rt_GetSizeofDataType(dTypeID);\n    int_T          frameSize;\n    int_T          nRows;\n    int_T          nColumns;\n\n    /*===================================================================*\n     * Determine the frame size if the data is frame based               *\n     *===================================================================*/\n    frameSize = frameData ? dims[0] : 1;\n\n    /*===================================================================*\n     * Calculate maximum number of rows needed in the buffer             *\n     *===================================================================*/\n\n    if (finalTime > startTime && finalTime != rtInf) {\n        real_T nPoints;            /* Tfinal is finite  ===>  nRows can be  */\n        real_T stepSize;           /* computed since the StepSize is fixed  */\n\n        if (sampleTime == -2.0) {  /* The signal being logged is constant,  *\n                                    * Hence, only one data point is logged. */\n            stepSize = finalTime;\n        } else if (sampleTime == -1.0 || sampleTime == 0.0) {\n                                /* Signal being logged is either inside a    *\n                                 * triggered sub-system or it is continuous. */\n            stepSize = inStepSize;\n        } else {                /* Discrete signal */\n            stepSize = sampleTime;\n        }\n\n        if (stepSize == 0.0) {\n            /* small initial value, so as to exercise the realloc code */\n            nRows = maxRows+1;\n            okayToRealloc = 1;\n        } else {\n            nPoints = 1.0 + floor((finalTime-startTime)/stepSize);\n\n            /*\n             * Add one more data point if needed.\n             */\n            if ( stepSize*(nPoints-1.0) < (finalTime-startTime) ) {\n                nPoints += 1.0;\n            }\n\n            /*\n             * Actual number of points to log = nPoints * size of\n             * each frame if data is frame-based\n             */\n            nPoints = frameData ? (nPoints * frameSize) : nPoints;\n\n            nPoints /= decimation;\n            if (nPoints != floor(nPoints)) {\n                nPoints += 1.0;\n            }\n            nRows = (nPoints <= INT_MAX) ? ((int_T) nPoints) : INT_MAX;\n        }\n        /*\n         * If maxRows is specified, and if this number is less\n         * than the number we computed (nRows) then use maxRows.\n         */\n        if ((maxRows > 0) && (maxRows < nRows)) {\n            nRows = maxRows;\n            okayToRealloc = 0;\n        }\n    } else if (finalTime == startTime) {\n        /*\n         * Number of rows to log is equal to 1 if not frame-based and\n         * equal to frame size if frame-based\n         */\n        nRows = frameData ? frameSize : 1;\n\n        /*\n         * If maxRows is specified, and if this number is less\n         * than the number we computed (nRows) then use maxRows.\n         */\n        if ((maxRows > 0) && (maxRows < nRows)) {\n            nRows = maxRows;\n            okayToRealloc = 0;\n        }\n    } else if (maxRows > 0) {     /* maxRows is specified => nRows=maxRows  */\n        nRows = maxRows;\n        okayToRealloc = 0;\n    } else {\n\n        if (inStepSize == 0) {\n            /* small initial value, so as to exercise the realloc code */\n            nRows = maxRows+1;\n            okayToRealloc = 1;\n        } else {                    /* Use a default value for nRows          */\n            usingDefaultBufSize = 1;\n            nRows = DEFAULT_BUFFER_SIZE;\n            okayToRealloc = 0;  /* No realloc with infinite stop time */\n            (void)fprintf(stdout, \"*** Using a default buffer of size %d for \"\n                          \"logging variable %s\\n\", nRows, varName);\n        }\n    }\n\n    /*\n     * Figure out the number of columns that the log variable should have.\n     * If the data is not frame based, then number of columns should equal\n     * nCols that is provided as input to the function. If the data is\n     * frame-based, then the number of columns should be equal to the\n     * number of channels = nCols/frameSize = dims[1];\n     */\n    nColumns = frameData ? dims[1] : nCols;\n\n    /*\n     * Error out if the size of the circular buffer is absurdly large, this\n     * error message is more informative than the one we get when we try to\n     * malloc this many number of bytes in one fell swoop.\n     */\n    {\n        double tmpDbl = ((double)elementSize)*((double)nRows)*\n                                              ((double)nColumns);\n\n        if (tmpDbl >= UINT_MAX) {\n            (void)fprintf(stderr,\n                          \"\\n*** Memory required to log variable '%s' is too\"\n                          \"\\n    big. Use the 'Limit rows to last:' and (or)\"\n                          \"\\n    'Decimation:' options to reduce the required\"\n                          \"\\n    memory size.\\n\", varName);\n            (void)fprintf(stderr, \"*** Details:\\n\"\n                          \"       varName         = %s\\n\"\n                          \"       nRows           = %d\\n\"\n                          \"       nCols           = %d\\n\"\n                          \"       elementSize     = %lu\\n\"\n                          \"       Bytes Required  = %.16g\\n\\n\",\n                          varName, nRows, nColumns, (unsigned long)\n                          elementSize, tmpDbl);\n            goto ERROR_EXIT;\n        }\n    }\n\n    /* Allocate memory for the log variable */\n    if ( (var = calloc(1, sizeof(LogVar))) == NULL ) {\n        (void)fprintf(stderr, \"*** Error allocating memory for logging %s\\n\",\n                      varName);\n        goto ERROR_EXIT;\n    }\n\n    /* Allocate memory for the circular buffer (real part) */\n    if ( (var->data.re = malloc(nRows*nColumns*elementSize)) == NULL ) {\n        (void)fprintf(stderr,\n                      \"*** Error allocating memory for the circular buffer\\n\");\n        (void)fprintf(stderr, \"*** Details:\\n\"\n                      \"       varName         = %s\\n\"\n                      \"       nRows           = %d\\n\"\n                      \"       nCols           = %d\\n\"\n                      \"       elementSize     = %lu\\n\"\n                      \"       Bytes Requested = %.16g\\n\\n\",\n                      varName, nRows, nColumns, (unsigned long) elementSize,\n                      ((double)elementSize)*((double)nRows)*((double)nColumns));\n        goto ERROR_EXIT;\n    }\n\n    /* Allocate memory for the circular buffer for the imaginary part */\n    if (complex) {\n        if ( (var->data.im = malloc(nRows*nColumns*elementSize)) == NULL ) {\n            (void)fprintf(stderr,\n                          \"*** Error allocating memory for the circular buffer \"\n                          \"for logging the imaginary part of %s\\n\", varName);\n            (void)fprintf(stderr, \"*** Details:\\n\"\n                          \"       varName         = %s\\n\"\n                          \"       nRows           = %d\\n\"\n                          \"       nCols           = %d\\n\"\n                          \"       elementSize     = %lu\\n\"\n                          \"       Bytes Requested = %.16g\\n\\n\",\n                          varName, nRows, nColumns, (unsigned long) elementSize,\n                          ((double)elementSize)*((double)nRows)*\n                                                 ((double)nColumns));\n            goto ERROR_EXIT;\n        }\n    }\n    /*\n     * Initialize the fields in LogVar structure.\n     */\n    if (appendToLogVarsList) {\n        rt_LoadModifiedLogVarName(li,varName,var->data.name);\n    } else {\n        var->data.name[mxMAXNAM-1] = '\\0';\n        (void)strncpy(var->data.name,varName,mxMAXNAM-1);\n    }\n    var->data.nCols           = nColumns;\n    var->data.nRows           = nRows;\n\n    var->data.nDims           = frameData ? 1 : nDims;\n    if (var->data.nDims > 2) {\n        var->data.dims = (int_T*)malloc(sizeof(int_T)*var->data.nDims);\n    } else {\n        var->data.dims = var->data._dims;\n    }\n    if (frameData) {\n        var->data.dims[0] = nColumns;\n    } else {\n        /*LINTED E_CAST_INT_TO_SMALL_INT*/\n        (void)memcpy(var->data.dims, dims, (size_t)(nDims*sizeof(int_T)));\n    }\n\n    var->data.dTypeID         = dTypeID;\n    var->data.elSize          = elementSize;\n\n    var->data.dataTypeConvertInfo = rt_GetDataTypeConvertInfo(\n        pDataTypeConvertInfo, dTypeID);\n\n    var->data.mxID            = rt_GetMxIdFromDTypeId(dTypeID);\n    /* over-ride logical bit if data type is boolean */\n    logical = dTypeID == SS_BOOLEAN ? 1 : 0;\n    var->data.logical         = (logical)   ? matLOGICAL_BIT : 0x0;\n    var->data.complex         = (complex)   ? matCOMPLEX_BIT : 0x0;\n    var->data.frameData       = frameData;\n    var->data.frameSize       = (frameData) ? frameSize : 1;\n\n    /* fill up valDims field */\n    if(logValDimsStat == NO_LOGVALDIMS){\n        /* All signals are fixed-size, no need to log valueDimensions field */\n        var->valDims     = NULL;\n        /* Set these pointers to NULLs in this case */\n        var->coords      = NULL;\n        var->strides     = NULL;\n        var->currStrides = NULL;\n    }\n    else{\n        if ( (var->valDims = calloc(1, sizeof(ValDimsData))) == NULL ) {\n            goto ERROR_EXIT;\n        }\n\n        (void)memcpy(var->valDims->name, &VALUEDIMENSIONS_FIELD_NAME, mxMAXNAM);\n\n        if (logValDimsStat == LOGVALDIMS_EMPTYMX) {\n            /* At least one signal is variable-size, \n               but the current signal is fixed-size. \n               Therefore, create a dummy MatrixData to write out valueDimensions \n               as an empty matrix. \n            */\n            var->valDims->nRows = 0;\n            var->valDims->nCols = 0;\n            var->valDims->currSigDims = NULL;\n            var->valDims->currSigDimsSize = NULL;\n            var->valDims->dimsData = NULL;\n            /* Set these pointers to NULLs in this case */\n            var->coords      = NULL;\n            var->strides     = NULL;\n            var->currStrides = NULL;\n        } else { /* The current signal is a variable-size signal. */\n            /* The \"valueDimensions\" must be double, so re-assign element size */\n            elementSize = sizeof(real_T);\n\n            /* When signals are frame-based, 'valueDimensions' has 1 column */\n            if(frameData){\n                /* When signal is frame-based, the first dimension is always fixed, \n                   so we only need to record the second dimension.\n                   e.g. Two frame-based signals [10x4] and [10x3], \n                   'valueDimensions' and 'currSigDims'\n                   only record 4 or 3.\n                */\n                nColumns = 1;\n                var->valDims->currSigDims = (void**) (currSigDims + 1);\n                var->valDims->currSigDimsSize = (int_T*) (currSigDimsSize + 1);\n            } else { /* non-frame based */\n                nColumns = nDims;\n                var->valDims->currSigDims = (void**) currSigDims;\n                var->valDims->currSigDimsSize = (int_T*) currSigDimsSize;\n            }\n            \n            /* Allocate memory for the circular buffer */\n            if ( (var->valDims->dimsData = malloc(nRows*nColumns*elementSize)) == NULL ) {\n                (void)fprintf(stderr,\n                              \"*** Error allocating memory for the circular buffer\\n\");\n                (void)fprintf(stderr, \"*** Details:\\n\"\n                              \"       varName         = %s\\n\"\n                              \"       nRows           = %d\\n\"\n                              \"       nCols           = %d\\n\"\n                              \"       elementSize     = %lu\\n\"\n                              \"       Bytes Requested = %.16g\\n\\n\",\n                              var->valDims->name, nRows, nColumns, (unsigned long) elementSize,\n                              ((double)elementSize)*((double)nRows)*((double)nColumns));\n                goto ERROR_EXIT;\n            }\n            var->valDims->nRows = nRows;\n            var->valDims->nCols = nColumns;\n\n            /* Allocate memory for these dynamic arrays */\n            {\n                size_t nbytes = var->data.nDims*sizeof(int_T);\n                if( ((var->coords = calloc(nbytes, 1)) == NULL)\n                    ||((var->strides = calloc(nbytes, 1)) == NULL)\n                    ||((var->currStrides = calloc(nbytes, 1)) == NULL) )\n                    goto ERROR_EXIT;\n            }\n        }\n    }\n\n    var->rowIdx               = 0;\n    var->wrapped              = 0;\n    var->nDataPoints          = 0;\n    var->usingDefaultBufSize  = usingDefaultBufSize;\n    var->okayToRealloc        = okayToRealloc;\n    var->decimation           = decimation;\n    var->numHits              = -1;  /* so first point gets logged */\n\n    /* Add this log var to list in log info, if necessary */\n    if (appendToLogVarsList) {\n        LogInfo *logInfo = (LogInfo*) rtliGetLogInfo(li);\n        LogVar  *varList = logInfo->logVarsList;\n\n        if (varList != NULL) {\n            while (varList->next != NULL) {\n                varList = varList->next;\n            }\n            varList->next = var;\n        } else {\n            logInfo->logVarsList = var;\n        }\n    }\n\n    return(var); /* NORMAL_EXIT */\n\n ERROR_EXIT:\n    \n    *errStatus = rtMemAllocError;\n    rt_DestroyLogVar(var);\n    return(NULL);\n\n} /* end rt_CreateLogVarWithConvert */\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\n/* Function: rt_CreateLogVar ===================================================\n * Abstract:\n *\tCreate a logging variable.\n *\n * Returns:\n *\t~= NULL  => success, returns the log variable created.\n *\t== NULL  => failure, error message set in the simstruct.\n */\nLogVar *rt_CreateLogVar(RTWLogInfo        *li,\n                               const real_T      startTime,\n                               const real_T      finalTime,\n                               const real_T      inStepSize,\n                               const char_T      **errStatus,\n                               const char_T      *varName,\n                               BuiltInDTypeId    inpDataTypeID,\n                               int_T             logical,\n                               int_T             complex,\n                               int_T             frameData,\n                               int_T             nCols,\n                               int_T             nDims,\n                               const int_T       *dims,\n                               LogValDimsStat    logValDimsStat,\n                               void              **currSigDims,\n                               int_T             *currSigDimsSize,\n                               int_T             maxRows,\n                               int_T             decimation,\n                               real_T            sampleTime,\n                               int_T             appendToLogVarsList)\n{\n    const RTWLogDataTypeConvert *pDataTypeConvertInfo = NULL;\n\n    return rt_CreateLogVarWithConvert(li,\n                                      startTime,\n                                      finalTime,\n                                      inStepSize,\n                                      errStatus,\n                                      varName,\n                                      inpDataTypeID,\n                                      pDataTypeConvertInfo,\n                                      logical,\n                                      complex,\n                                      frameData,\n                                      nCols,\n                                      nDims,\n                                      dims,\n                                      logValDimsStat,\n                                      currSigDims,\n                                      currSigDimsSize,\n                                      maxRows,\n                                      decimation,\n                                      sampleTime,\n                                      appendToLogVarsList);\n\n} /* end rt_CreateLogVar */\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\n/* Function: rt_CreateStructLogVar =============================================\n * Abstract:\n *\tCreate a logging variable in the structure format.\n *\n * Returns:\n *\t~= NULL  => success, returns the log variable created.\n *\t== NULL  => failure, error message set in the simstruct.\n */\nStructLogVar *rt_CreateStructLogVar(RTWLogInfo              *li,\n                                           const real_T            startTime,\n                                           const real_T            finalTime,\n                                           const real_T            inStepSize,\n                                           const char_T            **errStatus,\n                                           const char_T            *varName,\n                                           boolean_T               logTime,\n                                           int_T                   maxRows,\n                                           int_T                   decimation,\n                                           real_T                  sampleTime,\n                                           const RTWLogSignalInfo  *sigInfo,\n                                           const char_T            *blockName)\n{\n\n    return( local_CreateStructLogVar(li,\n                                     startTime,\n                                     finalTime,\n                                     inStepSize,\n                                     errStatus,\n                                     varName,\n                                     logTime,\n                                     maxRows,\n                                     decimation,\n                                     sampleTime,\n                                     sigInfo,\n                                     blockName));\n\n} /* end rt_CreateStructLogVar */\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n \n/* Function: rt_StartDataLoggingWithStartTime ==================================\n * Abstract:\n *      Initialize data logging info based upon the following settings cached\n *      in the RTWLogging data structure of the SimStruct.\n *\n * Return value is:\n *\t== NULL  => success\n *\t!= NULL  => failure (the return value is a pointer that points to the\n *                           error message, which is also set in the simstruct)\n */\nconst char_T *rt_StartDataLoggingWithStartTime(RTWLogInfo   *li,\n                                                      const real_T startTime,\n                                                      const real_T finalTime,\n                                                      const real_T stepSize,\n                                                      const char_T **errStatus)\n{\n    const char_T   *varName;\n    LogInfo        *logInfo;\n    real_T         sampleTime = stepSize;\n    int_T          maxRows    = rtliGetLogMaxRows(li);\n    int_T          decimation = rtliGetLogDecimation(li);\n    int_T          logFormat  = rtliGetLogFormat(li);\n    boolean_T      logTime    = (logFormat==2) ? 1 : 0;\n\n    /* reset error status */\n    *errStatus = NULL;\n\n    if ((logInfo=calloc(1,sizeof(LogInfo))) == NULL) {\n        *errStatus = rtMemAllocError;\n        goto ERROR_EXIT;\n    }\n    rtliSetLogInfo(li, (void*)logInfo);\n\n    /* time */\n    varName = rtliGetLogT(li);\n    if (varName[0] != '\\0') {\n        int_T dims = 1;\n        logInfo->t = rt_CreateLogVarWithConvert(li, startTime, finalTime,\n                                                stepSize, errStatus,\n                                                varName,SS_DOUBLE,\n                                                NULL,\n                                                0,0,0,1,1,\n                                                &dims, NO_LOGVALDIMS, NULL, NULL,\n                                                maxRows,decimation,\n                                                sampleTime,1);\n        if (logInfo->t == NULL) goto ERROR_EXIT;\n    }\n\n    /* states */\n    if ( rtliGetLogX(li)[0] != '\\0' ||  rtliGetLogXFinal(li)[0] != '\\0' ) {\n        const RTWLogSignalInfo  *xInfo = rtliGetLogXSignalInfo(li);\n\n        if (logFormat == 0) {                                /* Matrix Format */\n            int            numCols;\n            int            nDims;\n            const int      *dims;\n            BuiltInDTypeId dataType;\n            int            isComplex;\n            int_T          sIdx;\n\n            const RTWLogDataTypeConvert *pDTConvInfo;\n\n            numCols = xInfo[0].numCols ? xInfo[0].numCols[0] : 0;\n            for (sIdx = 1; sIdx < xInfo[0].numSignals; sIdx++) {\n                numCols += xInfo[0].numCols[sIdx];\n            }\n            /* If we have only one \"matrix\" state, we can log as a matrix */\n            if (xInfo[0].numSignals == 1) {\n                nDims     = xInfo[0].numDims ? xInfo[0].numDims[0] : 1;\n                dims      = xInfo[0].dims;\n            } else {\n                nDims     = 1;\n                dims      = &numCols;\n            }\n            dataType  = xInfo[0].dataTypes ? xInfo[0].dataTypes[0] : 0;\n            isComplex = xInfo[0].complexSignals ? xInfo[0].complexSignals[0] : 0;\n\n            pDTConvInfo = xInfo[0].dataTypeConvert;\n\n            if (rtliGetLogX(li)[0] != '\\0') {\n                logInfo->x = rt_CreateLogVarWithConvert(li, startTime, finalTime,\n                                                        stepSize, errStatus,\n                                                        rtliGetLogX(li),dataType,\n                                                        pDTConvInfo,\n                                                        0,\n                                                        isComplex,0,numCols,nDims,dims,\n                                                        NO_LOGVALDIMS, NULL, NULL,\n                                                        maxRows,decimation,sampleTime,1);\n                if (logInfo->x == NULL)  goto ERROR_EXIT;\n            }\n            if (rtliGetLogXFinal(li)[0] != '\\0') {\n                logInfo->xFinal = rt_CreateLogVarWithConvert(li, startTime, finalTime,\n                                                             stepSize, errStatus,\n                                                             rtliGetLogXFinal(li),dataType,\n                                                             pDTConvInfo,\n                                                             0,isComplex,0,numCols,nDims,\n                                                             dims, NO_LOGVALDIMS, NULL, \n                                                             NULL, 1,decimation,\n                                                             sampleTime,1);\n                if (logInfo->xFinal == NULL)  goto ERROR_EXIT;\n            }\n        } else {                                          /* Structure Format */\n            if (rtliGetLogX(li)[0] != '\\0') {\n                logInfo->x = local_CreateStructLogVar(li, startTime, finalTime,\n                                                      stepSize, errStatus,\n                                                      rtliGetLogX(li), logTime,\n                                                      maxRows, decimation,\n                                                      sampleTime, xInfo, NULL);\n                if (logInfo->x == NULL) goto ERROR_EXIT;\n            }\n            if (rtliGetLogXFinal(li)[0] != '\\0') {\n                logInfo->xFinal = local_CreateStructLogVar(li, startTime, finalTime,\n                                                           stepSize, errStatus,\n                                                           rtliGetLogXFinal(li),\n                                                           logTime,1,decimation,\n                                                           sampleTime,xInfo,NULL);\n                if (logInfo->xFinal == NULL) goto ERROR_EXIT;\n            }\n        }\n    }\n\n    /* outputs */\n    *errStatus = rt_StartDataLoggingForOutput(li,startTime,finalTime,\n                                              stepSize,errStatus);\n    if (*errStatus != NULL)  goto ERROR_EXIT;\n\n    return(NULL); /* NORMAL_EXIT */\n\n ERROR_EXIT:\n    (void)fprintf(stderr, \"*** Errors occurred when starting data logging.\\n\");\n    if (*errStatus == NULL) {\n        *errStatus = rtMemAllocError;\n    }\n    if (logInfo) {\n        rt_DestroyLogVar(logInfo->logVarsList);\n        logInfo->logVarsList = NULL;\n        rt_DestroyStructLogVar(logInfo->structLogVarsList);\n        logInfo->structLogVarsList = NULL;\n        FREE(logInfo);\n        rtliSetLogInfo(li,NULL);\n    }\n    return(*errStatus);\n\n} /* end rt_StartDataLoggingWithStartTime */\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\n/* Function: rt_StartDataLogging ===============================================\n * Abstract:\n */\nconst char_T *rt_StartDataLogging(RTWLogInfo   *li,\n                                         const real_T finalTime,\n                                         const real_T stepSize,\n                                         const char_T **errStatus)\n{\n    return rt_StartDataLoggingWithStartTime(li,\n                                            0.0,\n                                            finalTime,\n                                            stepSize,\n                                            errStatus);\n}\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n \n/* Function: rt_UpdateLogVar ===================================================\n * Abstract:\n *\tCalled to log data for a log variable.\n */\nvoid rt_UpdateLogVar(LogVar *var, const void *data, boolean_T isVarDims)\n{\n    size_t        elSize    = var->data.elSize;\n    const  char_T *cData    = data;\n    const  int_T  frameData = var->data.frameData;\n    const  int_T  frameSize = frameData ? (var->data.frameSize) : 1;\n    const  int_T  logWidth  = var->data.nCols;\n    BuiltInDTypeId dTypeID  = var->data.dTypeID;\n\n    size_t offset        = 0;\n    char_T *currRealRow  = NULL;\n    char_T *currImagRow  = NULL;\n    int_T  pointSize     = (int_T)((var->data.complex) ? rt_GetSizeofComplexType(dTypeID) : elSize);\n\n    int    i, j, k;\n\n    /* The following variables will be used for \n       logging variable-size signals */\n    const  int_T  nDims = var->data.nDims;\n    const  int_T  *dims = var->data.dims;\n    const  void   * const *currDimsPtr = NULL;\n    const  int_T  *currDimsSizePtr = NULL;\n\n    /* The following variables will be used for \n       logging \"valueDimensions\" field */\n    size_t offset_valDims   = 0;\n    char_T *currValDimsRow  = NULL;\n    size_t elSize_valDims   = sizeof(real_T);\n    real_T currentSigDims   = 0;\n    int_T  nRows_valDims    = 0;\n    int_T  logWidth_valDims = 0;\n\n    for (i = 0; i < frameSize; i++) {\n        if (++var->numHits % var->decimation) continue;\n        var->numHits = 0;\n\n        if (var->rowIdx == var->data.nRows) {\n            if (var->okayToRealloc == 1) {\n                rt_ReallocLogVar(var, isVarDims);\n            } else {\n                /* Circular buffer */\n                var->rowIdx = 0;\n                ++(var->wrapped); /* increment the wrap around counter */\n            }\n        }\n\n        if(isVarDims){\n            currDimsPtr = (const void * const *) var->valDims->currSigDims;\n            currDimsSizePtr = (const int_T*) var->valDims->currSigDimsSize;\n            logWidth_valDims = frameData ? 1 : var->valDims->nCols;\n            nRows_valDims = var->valDims->nRows;\n\n            var->strides[0] = 1;\n            var->currStrides[0] = 1;\n\n            for (k = 1; k < nDims; k++){\n                int32_T currDimsVal=0;\n                switch (currDimsSizePtr[k-1]) {\n                  case 1:\n                    currDimsVal = (**(((const uint8_T * const *) currDimsPtr)+(k-1)));\n                    break;\n                  case 2:\n                    currDimsVal = (**(((const uint16_T * const *) currDimsPtr)+(k-1)));\n                    break;\n                  case 4:\n                    currDimsVal = (**(((const uint32_T * const *) currDimsPtr)+(k-1)));\n                    break;\n                }\n                var->strides[k] = var->strides[k-1] * dims[k-1];\n                var->currStrides[k] = var->currStrides[k-1] * currDimsVal;\n            }\n        }\n\n        offset       = (size_t)(elSize * var->rowIdx * logWidth);\n        currRealRow  = ((char_T*) (var->data.re)) + offset;\n        currImagRow  = (var->data.complex) ?\n                       ((char_T*) (var->data.im)) + offset :  NULL;\n\n        /* update logging data */\n        for (j = 0; j < logWidth; j++) {\n\n            boolean_T inRange = true;\n            int idx = j;\n\n            /* Check whether the currently logged value is in range or not.\n               For fixed-size signal logging, always inRange = true; idx = j;\n               For variable-size signal logging, use strides, coordinates\n               and current strides to decide whether the currently logged\n               data is in range or not and its location in the logging \n               matrix.\n             */\n            if(isVarDims){\n                int rem = j;\n                idx = 0;\n                for(k = nDims-1; k>=0; k--){\n                    int32_T currDimsVal=0;\n                    switch (currDimsSizePtr[k]) {\n                      case 1:\n                        currDimsVal = (**(((const uint8_T * const *) currDimsPtr)+k));\n                        break;\n                      case 2:\n                        currDimsVal = (**(((const uint16_T * const *) currDimsPtr)+k));\n                        break;\n                      case 4:\n                        currDimsVal = (**(((const uint32_T * const *) currDimsPtr)+k));\n                        break;\n                    }\n                    var->coords[k] = rem / var->strides[k];\n                    if( var->coords[k] >= currDimsVal ){\n                        inRange = false;\n                        break;\n                    }\n                    rem = rem - var->coords[k] * var->strides[k];\n                }\n                if(inRange){\n                    idx = var->coords[0];\n                    for (k = 1; k < nDims; k++){\n                        idx += var->coords[k] * var->currStrides[k];\n                    }\n                }\n            }\n            \n            if (!var->data.dataTypeConvertInfo.conversionNeeded) {\n                /* NO  conversion needed\n                 */ \n                if (inRange) {\n                    /* If in range, fill in data */\n                    const char *cDataPoint = cData + (i+frameSize*idx) * pointSize;\n\n                    (void) memcpy(currRealRow, cDataPoint, elSize);\n                    currRealRow += elSize;\n                    if (var->data.complex) {\n                        (void) memcpy(currImagRow, cDataPoint + pointSize/2, elSize);\n                        currImagRow += elSize;\n                    }\n                } else {\n                    /* If out of range, fill in NaN or 0:\n                       1) For bool, int32, uint32, int16, uint16, etc,\n                          memset to zeros;\n                       2) For fixed-point data type, NaN conversion is not\n                          allowed, memset to zeros.\n                    */\n                    if (dTypeID == SS_DOUBLE) {\n                       ((real_T*)(currRealRow))[0] = rtNaN;\n                    } else if (dTypeID == SS_SINGLE){\n                        ((real32_T*)(currRealRow))[0] = rtNaNF;\n                    } else {\n                        (void) memset(currRealRow, 0, elSize);\n                    }\n                    \n                    currRealRow += elSize;\n                    if (var->data.complex) {\n                        /* For imaginary part, fill in 0 */\n                        (void) memset(currImagRow, 0, elSize);\n                        currImagRow += elSize;\n                    }\n                }\n            }\n            else\n            {\n                /* YES conversion needed\n                 */ \n                DTypeId dataTypeIdOriginal = \n                    var->data.dataTypeConvertInfo.dataTypeIdOriginal;\n                int_T DpSize = (int_T)((var->data.complex) ? \n                                       rt_GetSizeofComplexType(dataTypeIdOriginal) : \n                                       rt_GetSizeofDataType(dataTypeIdOriginal));\n\n                DTypeId dataTypeIdLoggingTo = \n                    var->data.dataTypeConvertInfo.dataTypeIdLoggingTo;\n\n                int bitsPerChunk = var->data.dataTypeConvertInfo.bitsPerChunk;\n                int numOfChunk =  var->data.dataTypeConvertInfo.numOfChunk;\n                unsigned int isSigned = var->data.dataTypeConvertInfo.isSigned;\n\n                double fracSlope = var->data.dataTypeConvertInfo.fracSlope;\n                int    fixedExp  = var->data.dataTypeConvertInfo.fixedExp;\n                double bias      = var->data.dataTypeConvertInfo.bias;\n\n                double curRealValue = -0.12345678987654;\n                double curImagValue = -0.12345678987654;\n\n                int_T adjIndexIfComplex = (var->data.complex) ? 2 : 1;\n\n                if(inRange){\n                    if(numOfChunk > 1)\n                    {\n                        /* For multiword */\n                        const char *pInData = (const char *)(cData);\n                        int dtSize = bitsPerChunk*numOfChunk/8;\n                        pInData += ((i+frameSize*idx) * adjIndexIfComplex) * dtSize;\n                        \n                        curRealValue = rt_GetDblValueFromOverSizedData(pInData, bitsPerChunk, numOfChunk, \n                                                                       isSigned, fracSlope, fixedExp, bias);\n                        if (var->data.complex) {\n                            curImagValue = rt_GetDblValueFromOverSizedData((pInData+dtSize), bitsPerChunk, numOfChunk, \n                                                                           isSigned, fracSlope, fixedExp, bias);\n                        }\n                    }\n                    else\n                    {\n                        /* if in range, fill in data that is converted first */\n                        switch ( dataTypeIdOriginal )\n                        {\n                          case SS_DOUBLE:\n                            {\n                                const real_T *pInData = (const real_T *)(cData + (i+frameSize*idx)* DpSize);\n                                \n                                curRealValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                if (var->data.complex) {\n                                    pInData = (const real_T *)(cData + (i+frameSize*idx)* DpSize + DpSize/2);\n                                    curImagValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                }\n                            }\n                            break;\n                          case SS_SINGLE:\n                            {\n                                const real32_T *pInData = (const real32_T *)(cData + (i+frameSize*idx)* DpSize);\n\n                                curRealValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                if (var->data.complex) {\n                                    pInData = (const real32_T *)(cData + (i+frameSize*idx)* DpSize + DpSize/2);\n                                    curImagValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                }\n                            }\n                            break;\n                          case SS_INT8:\n                            {\n                                const int8_T *pInData = (const int8_T *)(cData + (i+frameSize*idx)* DpSize);\n                                \n                                curRealValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                if (var->data.complex) {\n                                    pInData = (const int8_T *)(cData + (i+frameSize*idx)* DpSize + DpSize/2);\n                                    curImagValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                }\n                            }\n                            break;\n                          case SS_UINT8:\n                            {\n                                const uint8_T *pInData = (const uint8_T *)(cData + (i+frameSize*idx)* DpSize);\n                                \n                                curRealValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                if (var->data.complex) {\n                                    pInData = (const uint8_T *)(cData + (i+frameSize*idx)* DpSize + DpSize/2);\n                                    curImagValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                }\n                            }\n                            break;\n                          case SS_INT16:\n                            {\n                                const int16_T *pInData = (const int16_T *)(cData + (i+frameSize*idx)* DpSize);\n                                \n                                curRealValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                if (var->data.complex) {\n                                    pInData = (const int16_T *)(cData + (i+frameSize*idx)* DpSize + DpSize/2);\n                                    curImagValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                }\n                            }\n                            break;\n                          case SS_UINT16:\n                            {\n                                const uint16_T *pInData = (const uint16_T *)(cData + (i+frameSize*idx)* DpSize);\n                                \n                                curRealValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                if (var->data.complex) {\n                                    pInData = (const uint16_T *)(cData + (i+frameSize*idx)* DpSize + DpSize/2);\n                                    curImagValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                }\n                            }\n                            break;\n                          case SS_INT32:\n                            {\n                                const int32_T *pInData = (const int32_T *)(cData + (i+frameSize*idx)* DpSize);\n\n                                curRealValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                if (var->data.complex) {\n                                    pInData = (const int32_T *)(cData + (i+frameSize*idx)* DpSize + DpSize/2);\n                                    curImagValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                }\n                            }\n                            break;\n                          case SS_UINT32:\n                            {\n                                const uint32_T *pInData = (const uint32_T *)(cData + (i+frameSize*idx)* DpSize);\n                                \n                                curRealValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                if (var->data.complex) {\n                                    pInData = (const uint32_T *)(cData + (i+frameSize*idx)* DpSize + DpSize/2);\n                                    curImagValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                }\n                            }\n                            break;\n                          case SS_BOOLEAN:\n                            {\n                                const boolean_T *pInData = ((const boolean_T *)(cData));\n                                \n                                pInData += (i+frameSize*idx) * adjIndexIfComplex;\n                                \n                                curRealValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                if (var->data.complex) {\n                                    curImagValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                }\n                            }\n                            break;\n                          default: \n                            {\n                                /* For biglong */\n                                const char *pInData = (const char *)(cData);\n                                int dtSize = bitsPerChunk*numOfChunk/8;\n                                pInData += ((i+frameSize*idx) * adjIndexIfComplex) * dtSize;\n                                \n                                curRealValue = rt_GetDblValueFromOverSizedData(pInData, bitsPerChunk, numOfChunk, \n                                                                               isSigned, fracSlope, fixedExp, bias);\n                                if (var->data.complex) {\n                                    curImagValue = rt_GetDblValueFromOverSizedData((pInData+dtSize), bitsPerChunk, numOfChunk, \n                                                                                   isSigned, fracSlope, fixedExp, bias);\n                                }\n                            }\n                            break;\n                        } /* -- end of switch -- */\n                    }\n                } else {\n                    /* if out of range, just fill NaN or 0 */\n                    if(dTypeID == SS_DOUBLE || dTypeID == SS_SINGLE){\n                        /* vijay 4/11/2013: DO NOT CALL ldexp() with NaN below as it causes \n                         * lcc-win64 to generate inf instead of NaN as output. \n                         * Just use rtNaN directly */\n                        curRealValue = rtNaN;\n                    }\n                    else{\n                        curRealValue = ldexp( 0, fixedExp ) + bias;\n                    }\n                    if (var->data.complex) {\n                        /* fill 0 in imaginary part*/\n                        curImagValue = ldexp( 0, fixedExp ) + bias;\n                    }\n                }\n\n                switch ( dataTypeIdLoggingTo )\n                {\n                  case SS_DOUBLE:\n                    {\n                        *((real_T *)currRealRow) = (real_T)curRealValue;\n\n                        if (var->data.complex) {\n\n                            *((real_T *)currImagRow) = (real_T)curImagValue;\n                        }\n                    }\n                    break;\n                  case SS_SINGLE:\n                    {\n                        *((real32_T *)currRealRow) = (real32_T)curRealValue;\n\n                        if (var->data.complex) {\n\n                            *((real32_T *)currImagRow) = (real32_T)curImagValue;\n                        }\n                    }\n                    break;\n                  case SS_INT8:\n                    {\n                        *((int8_T *)currRealRow) = (int8_T)curRealValue;\n\n                        if (var->data.complex) {\n\n                            *((int8_T *)currImagRow) = (int8_T)curImagValue;\n                        }\n                    }\n                    break;\n                  case SS_UINT8:\n                    {\n                        *((uint8_T *)currRealRow) = (uint8_T)curRealValue;\n\n                        if (var->data.complex) {\n\n                            *((uint8_T *)currImagRow) = (uint8_T)curImagValue;\n                        }\n                    }\n                    break;\n                  case SS_INT16:\n                    {\n                        *((int16_T *)currRealRow) = (int16_T)curRealValue;\n\n                        if (var->data.complex) {\n\n                            *((int16_T *)currImagRow) = (int16_T)curImagValue;\n                        }\n                    }\n                    break;\n                  case SS_UINT16:\n                    {\n                        *((uint16_T *)currRealRow) = (uint16_T)curRealValue;\n\n                        if (var->data.complex) {\n\n                            *((uint16_T *)currImagRow) = (uint16_T)curImagValue;\n                        }\n                    }\n                    break;\n                  case SS_INT32:\n                    {\n                        *((int32_T *)currRealRow) = (int32_T)curRealValue;\n\n                        if (var->data.complex) {\n\n                            *((int32_T *)currImagRow) = (int32_T)curImagValue;\n                        }\n                    }\n                    break;\n                  case SS_UINT32:\n                    {\n                        *((uint32_T *)currRealRow) = (uint32_T)curRealValue;\n\n                        if (var->data.complex) {\n\n                            *((uint32_T *)currImagRow) = (uint32_T)curImagValue;\n                        }\n                    }\n                    break;\n                  case SS_BOOLEAN:\n                    {\n                        *((boolean_T *)currRealRow) = (boolean_T)(curRealValue != 0.0);\n\n                        if (var->data.complex) {\n\n                            *((boolean_T *)currImagRow) = (boolean_T)(curImagValue != 0.0);\n                        }\n                    }\n                    break;\n                } /* -- end of switch -- */\n\n                currRealRow += elSize;\n                if (var->data.complex) {\n                    currImagRow += elSize;\n                }\n            }\n        }\n\n        if(isVarDims){ /* update \"valueDimensions\" field */\n            for(j = 0; j < logWidth_valDims; j ++){\n                int32_T currDimsVal=0;\n                switch (currDimsSizePtr[j]) {\n                  case 1:\n                    currDimsVal = (**(((const uint8_T * const *) currDimsPtr)+j));\n                    break;\n                  case 2:\n                    currDimsVal = (**(((const uint16_T * const *) currDimsPtr)+j));\n                    break;\n                  case 4:\n                    currDimsVal = (**(((const uint32_T * const *) currDimsPtr)+j));\n                    break;\n                }\n                offset_valDims  = (size_t)(elSize_valDims *( var->rowIdx + nRows_valDims * j));\n                currValDimsRow  = ((char_T*) (var->valDims->dimsData)) + offset_valDims;\n\n                /* convert int_T to real_T */\n                currentSigDims = (real_T) currDimsVal;\n                (void) memcpy(currValDimsRow, &currentSigDims, elSize_valDims);\n                currValDimsRow += elSize_valDims;\n            }\n        }\n        \n        ++var->rowIdx;\n    }\n\n    return;\n\n} /* end rt_UpdateLogVar */\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n \n \n/* Function: rt_UpdateStructLogVar =============================================\n * Abstract:\n *      Called to log data for a structure log variable.\n */\nvoid rt_UpdateStructLogVar(StructLogVar *var, const real_T *t, const void *data)\n{\n    LogVar       *values = var->signals.values;\n    const char_T *signal = data;\n    boolean_T *isVarDims = var->signals.isVarDims;\n    int i = 0;\n\n    /* time */\n    if (var->logTime) {\n        rt_UpdateLogVar(var->time, t, false);\n    }\n\n    /* signals */\n    while (values) {\n        size_t elSz = values->data.elSize;\n\n        rt_UpdateLogVar(values, signal, isVarDims[i]);\n\n        if (values->data.complex) elSz *= 2;\n        signal += elSz * values->data.nCols;\n\n        values = values->next;\n        i++;\n    }\n\n} /* end rt_UpdateStructLogVar */\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/*\n * g1614989:Refactoring this function to accept number of elements\n *          instead of accepting signalInfo and index.\n */\nvoid* rt_getTempMemory(LogVar* var, int_T numEls);\n\nvoid* rt_getTempMemory(LogVar* var, int_T numEls)\n{\n    size_t elSize  = var->data.elSize;\n    size_t cmplxMult = var->data.complex ? 2 : 1;\n    /*\n     * g1689750: With multiword support for mat file logging in row major array layout, we need to allocate more space to\n     * store the data when the transpose operation is being performed. The additional space is required to store multiple\n     * chunks that each multi word contains.\n     */\n    size_t numOfChunks = var->data.dataTypeConvertInfo.conversionNeeded ? var->data.dataTypeConvertInfo.numOfChunk : 1;\n    void* tempMemory = malloc(elSize * numEls * cmplxMult * numOfChunks);\n    return tempMemory;\n}\n\n/*\n* g1614989:This function processes the signal data if a function pointer is available and then logs the data.\n*          If a function pointer is not present, signal data is logged without any processing.\n*          The idx parameter specifies which information from the SignalInfo to be used for processing and logging.\n*          When idx is -1, the provided signal info is to be used for processing and logging the data.\n*/\nvoid rt_preProcessAndLogDataWithIndex(const RTWLogSignalInfo *signalInfo, int_T idx, LogVar* val, const void * data, boolean_T isVarDims);\n\nvoid rt_preProcessAndLogDataWithIndex(const RTWLogSignalInfo *signalInfo, int_T idx, LogVar* val, const void * data, boolean_T isVarDims)\n{\n    RTWPreprocessingFcnPtr preprocessingPtr = NULL;\n    int_T numEls = -1;\n    if (idx == -1) {\n        preprocessingPtr = *(signalInfo->preprocessingPtrs);\n        numEls = *(signalInfo->numCols);\n    }\n    else {\n        preprocessingPtr = signalInfo->preprocessingPtrs[idx];\n        numEls = signalInfo->numCols[idx];\n    }\n\n    if (preprocessingPtr != NULL) {\n        void* curData = rt_getTempMemory(val, numEls);\n        preprocessingPtr(curData, data);\n        rt_UpdateLogVar(val, curData, isVarDims);\n        free(curData);\n    }\n    else {\n        rt_UpdateLogVar(val, data, isVarDims);\n    }\n}\n\n/*\n* g1614989:This function is called when each signal has a specific RTWLogSignalInfo structure defined.\n*/\n\nvoid rt_preProcessAndLogData(RTWLogSignalInfo signalInfo, LogVar* val, const void * data, boolean_T isVarDims);\n\nvoid rt_preProcessAndLogData(RTWLogSignalInfo signalInfo, LogVar* val, const void * data, boolean_T isVarDims)\n{\n    rt_preProcessAndLogDataWithIndex(&signalInfo, -1, val, data, isVarDims);\n}\n \n/* Function: rt_UpdateTXYLogVars ===============================================\n * Abstract:\n *\tUpdate the xFinal,T,X,Y variables that are being logged.\n */\nconst char_T *rt_UpdateTXYLogVars(RTWLogInfo *li, time_T *tPtr)\n{\n    return rt_UpdateTXXFYLogVars(li, tPtr, true);\n}\n \n/* Function: rt_UpdateTXXFYLogVars =============================================\n * Abstract:\n *\tUpdate xFinal and/or the T,X,Y variables that are being logged\n */\nconst char_T *rt_UpdateTXXFYLogVars(RTWLogInfo *li, time_T *tPtr, boolean_T updateTXY)\n{\n    LogInfo *logInfo     = rtliGetLogInfo(li);\n    int_T   matrixFormat = (rtliGetLogFormat(li) == 0);\n    const RTWLogSignalInfo* yInfo = rtliGetLogYSignalInfo(li);\n    const RTWLogSignalInfo* xInfo = rtliGetLogXSignalInfo(li);\n\n    /* time */\n    if (logInfo->t != NULL && updateTXY) {\n        rt_UpdateLogVar(logInfo->t, tPtr, false);\n    }\n\n    if (matrixFormat) {                                      /* MATRIX_FORMAT */\n        /* states */\n        if (logInfo->x != NULL || logInfo->xFinal != NULL) {\n            int8_T**               segAddr     = _rtliGetLogXSignalPtrs(li);\n            const int_T            *segLengths = xInfo->numCols;\n            int_T                  nSegments   = xInfo->numSignals;\n            RTWPreprocessingFcnPtr* preprocessingPtrs = xInfo->preprocessingPtrs;\n\n            if (logInfo->x != NULL && updateTXY) {\n                const char_T *errorMessage = rt_UpdateLogVarWithDiscontiguousData(logInfo->x, segAddr,\n                                                                                  segLengths, nSegments, \n                                                                                  preprocessingPtrs);\n                if (errorMessage != NULL) return(errorMessage);\n            }\n            if (logInfo->xFinal != NULL) {\n                const char_T *errorMessage = rt_UpdateLogVarWithDiscontiguousData(logInfo->xFinal, segAddr,\n                                                                                  segLengths, nSegments, \n                                                                                  preprocessingPtrs);\n                if (errorMessage != NULL) return(errorMessage);\n            }\n        }\n        /* outputs */\n        if (logInfo->y != NULL && updateTXY) {\n            LogVar **var = (LogVar**) (logInfo->y);\n            int_T  ny    = logInfo->ny;\n            int_T  i;\n            int    yIdx;\n            LogSignalPtrsType data = rtliGetLogYSignalPtrs(li);\n\n            for (i = 0, yIdx = 0; i < ny; i++) {\n                if (data[i] != NULL) {\n                    /* \n                       When outputs are logged in Matrix format, \n                       no variable-size signal logging is allowed.\n                    */\n                    /* g1614989:Code refactoring and fix for logging issue.\n                     *          Function pointer is now identified by using \n                     *          Y Signal Info instead of iterating over pre-processing \n                     *          function pointers.\n                    */ \n                    rt_preProcessAndLogData(yInfo[yIdx], var[yIdx], data[i], false);\n                    yIdx++;\n                }\n            }\n        }\n    } else {                                              /* STRUCTURE_FORMAT */\n        /* states */\n        if (logInfo->x != NULL && updateTXY) {\n            int_T             i;\n            StructLogVar      *var = logInfo->x;\n            LogVar            *val = var->signals.values;\n            int_T             nsig = var->signals.numSignals;\n            LogSignalPtrsType data = rtliGetLogXSignalPtrs(li);\n\n            /* time */\n            if (var->logTime) {\n                rt_UpdateLogVar(var->time, tPtr, false);\n            }\n\n            /* signals */\n            for (i = 0; i < nsig; i++) {\n                /* g1614989:Code refactoring and fix for logging issue.\n                 *         Function pointer is now identified by using \n                 *         X Signal Info instead of iterating over pre-processing \n                 *         function pointers.\n                 */\n                rt_preProcessAndLogDataWithIndex(xInfo, i, val, data[i], false);\n                val = val->next;\n            }\n        }\n\n        /* outputs */\n        if (logInfo->y != NULL && updateTXY) {\n            int_T             ny      = logInfo->ny;\n            LogSignalPtrsType data    = rtliGetLogYSignalPtrs(li);\n            StructLogVar      **var   = (StructLogVar**) (logInfo->y);\n\n            if (ny == 1) {\n                int_T  i;\n                int_T  dataIdx;\n                LogVar *val = var[0]->signals.values;\n                int_T  nsig = var[0]->signals.numSignals;\n                boolean_T   *isVarDims = var[0]->signals.isVarDims;\n\n                /* time */\n                if (var[0]->logTime) {\n                    rt_UpdateLogVar(var[0]->time, tPtr, false);\n                }\n\n                /* signals */\n                for (i = 0, dataIdx = 0; i < nsig; i++) {                    \n                    while (data[dataIdx] == NULL) {\n                        ++dataIdx;\n                    }\n                    /* g1614989:Code refactoring and fix for logging issue.\n                     *         Function pointer is now identified by using \n                     *         Y Signal Info instead of iterating over pre-processing \n                     *         function pointers.\n                     */\n                    rt_preProcessAndLogDataWithIndex(yInfo, i, val, data[dataIdx], isVarDims[i]);\n                    dataIdx++;\n                    val = val->next;\n                }\n            } else {\n                int_T  i;\n                int_T  dataIdx;\n\n                for (i = 0, dataIdx = 0; i < ny && var[i] != NULL; i++) {\n                    LogVar *val = var[i]->signals.values;\n                    boolean_T   *isVarDims = var[i]->signals.isVarDims;\n\n                    /* time */\n                    if (var[i]->logTime) {\n                        rt_UpdateLogVar(var[i]->time, tPtr, false);\n                    }\n\n                    /* signals */\n                    while (data[dataIdx] == NULL) {\n                        ++dataIdx;\n                    }\n                    /* g1614989:Code refactoring and fix for logging issue.\n                     *         Function pointer is now identified by using \n                     *         Y Signal Info instead of iterating over pre-processing \n                     *         function pointers.\n                     */\n                    rt_preProcessAndLogData(yInfo[i], val, data[dataIdx], isVarDims[0]);\n                    dataIdx++;\n                    val = val->next;\n                }\n            }\n        }\n        /* final state */\n        if (logInfo->xFinal != NULL) {\n            StructLogVar *xf  = logInfo->xFinal;\n            LogVar       *val = xf->signals.values;\n            int_T        nsig = xf->signals.numSignals;\n            int_T        i;\n\n            /* time */\n            if (xf->logTime) {\n                rt_UpdateLogVar(xf->time, tPtr, false);\n            }\n\n            /* signals */\n            for (i = 0; i < nsig; i++) {\n                LogSignalPtrsType data = rtliGetLogXSignalPtrs(li);\n                /* g1614989:Code refactoring and fix for logging issue.\n                 *         Function pointer is now identified by using \n                 *         X Signal Info instead of iterating over pre-processing \n                 *         function pointers.\n                 */\n                rt_preProcessAndLogDataWithIndex(xInfo, i, val, data[i], false);\n                val = val->next;\n            }\n        }\n    }\n    return(NULL);\n} /* end rt_UpdateTXXFYLogVars */\n\n\n#ifdef __cplusplus\n}\n#endif\n          \n\n          \n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\n/* Function: rt_StopDataLoggingImpl =======================================\n * Abstract:\n *\tWrite logged data to model.mat and free memory.\n */\nvoid rt_StopDataLoggingImpl(const char_T *file, RTWLogInfo *li, boolean_T isRaccel)\n{\n    FILE          *fptr;\n    LogInfo       *logInfo     = (LogInfo*) rtliGetLogInfo(li);\n    LogVar        *var         = logInfo->logVarsList;\n    StructLogVar  *svar        = logInfo->structLogVarsList;\n    /* At this time, verbose is only needed if running rapid accelerator\n     * simulations. */\n    int           verbose      = isRaccel ? 0: 1;\n\n    boolean_T     emptyFile    = 1; /* assume */\n    boolean_T     errFlag      = 0;\n    const char_T  *msg;\n\n    /*******************************\n     * Create MAT file with header *\n     *******************************/\n    if ((fptr=fopen(file,\"w+b\")) == NULL) {\n        (void)fprintf(stderr,\"*** Error opening %s\",file);\n        goto EXIT_POINT;\n    }\n    if (rt_WriteMat5FileHeader(fptr)) {\n        (void)fprintf(stderr,\"*** Error writing to %s\",file);\n        goto EXIT_POINT;\n    }\n\n    /**************************************************\n     * First log all the variables in the LogVar list *\n     **************************************************/\n    while (var != NULL) {\n        if ( (msg = rt_FixupLogVar(var,verbose)) != NULL ) {\n            (void)fprintf(stderr,\"*** Error writing %s due to: %s\\n\",file,msg);\n            errFlag = 1;\n            break;\n        }\n        if (var->nDataPoints > 0 || isRaccel) {\n            MatItem item;\n\n            item.type   = matMATRIX;\n            item.nbytes = 0; /* not yet known */\n            item.data   = &(var->data);\n            if (rt_WriteItemToMatFile(fptr, &item, MATRIX_ITEM)) {\n                (void)fprintf(stderr,\"*** Error writing log variable %s to \"\n                              \"file %s\",var->data.name, file);\n                errFlag = 1;\n                break;\n            }\n            emptyFile = 0;\n        }\n        var = var->next;\n    }\n    /* free up some memory by destroying the log var list here */\n    rt_DestroyLogVar(logInfo->logVarsList);\n    logInfo->logVarsList = NULL;\n\n    /*******************************************************\n     * Next log all the variables in the StructLogVar list *\n     *******************************************************/\n    while (svar != NULL) {\n        MatItem item;\n\n        if (svar->logTime) {\n            var = svar->time;\n            if ( (msg = rt_FixupLogVar(var,verbose)) != NULL ) {\n                (void)fprintf(stderr, \"*** Error writing %s due to: %s\\n\",\n                              file, msg);\n                errFlag = 1;\n                break;\n            }\n        }\n\n        var = svar->signals.values;\n        while (var) {\n            if ( (msg = rt_FixupLogVar(var,verbose)) != NULL ) {\n                (void)fprintf(stderr, \"*** Error writing %s due to: %s\\n\",\n                              file, msg);\n                errFlag = 1;\n                break;\n            }\n            var = var->next;\n        }\n\n        item.type   = matMATRIX;\n        item.nbytes = 0; /* not yet known */\n        item.data   = svar;\n\n        if (rt_WriteItemToMatFile(fptr, &item, STRUCT_LOG_VAR_ITEM)) {\n            (void)fprintf(stderr,\"*** Error writing structure log variable \"\n                          \"%s to file %s\",svar->name, file);\n            errFlag = 1;\n            break;\n        }\n        emptyFile = 0;\n\n        svar = svar->next;\n    }\n\n    /******************\n     * Close the file *\n     ******************/\n    (void)fclose(fptr);\n    if (emptyFile || errFlag) {\n        (void)remove(file);\n    } else {\n        if( verbose ) {\n            (void)printf(\"** created %s **\\n\\n\", file);\n        }\n    }\n\n EXIT_POINT:\n\n    /****************\n     * free logInfo *\n     ****************/\n    rt_DestroyLogVar(logInfo->logVarsList);\n    logInfo->logVarsList = NULL;\n    rt_DestroyStructLogVar(logInfo->structLogVarsList);\n    logInfo->structLogVarsList = NULL;\n    FREE(logInfo->y);\n    logInfo->y = NULL;\n    FREE(logInfo);\n    rtliSetLogInfo(li,NULL);\n\n} /* end rt_StopDataLoggingImpl */\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\n/* Function: rt_StopDataLogging ================================================\n * Abstract:\n *\tWrite logged data to model.mat and free memory.\n */\nvoid rt_StopDataLogging(const char_T *file, RTWLogInfo *li)\n{\n    rt_StopDataLoggingImpl(file,li,false);\n\n} /* end rt_StopDataLogging */\n\n\n#ifdef __cplusplus\n}\n#endif\n\n#else /*!defined(MAT_FILE) || (defined(MAT_FILE) && MAT_FILE == 1)*/\n\n#define rt_StartDataLogging(li, finalTime, stepSize, errStatus) NULL /* do nothing */\n#define rt_UpdateTXYLogVars(li, tPtr) NULL /* do nothing */\n#define rt_StopDataLogging(file, li) { (void(file)); } /* use file quiet unused macro warning */ /* do nothing */\n\n#endif /*!defined(MAT_FILE) || (defined(MAT_FILE) && MAT_FILE == 1)*/\n\n\n\n/* [eof] rt_logging.c */\n\n/* LocalWords:  Tfinal MAXNAM nonfinite DType PWS RSim Fixup logvar DDEFAULT th\n * LocalWords:  curr Realloc realloc inp biglong vijay ldexp TXY eof XFinal th\n * LocalWords:  TXXFY NULL typedefs ret polyspace NUL\n */\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true}};